<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:PapyrusJava="http://www.eclipse.org/papyrus/PapyrusJava/1" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:standard="http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_S3H3IE7WEeuHa4bUOfM2xQ" name="Project_SE_UCD_2020">
    <packageImport xmi:type="uml:PackageImport" xmi:id="_S5cyYE7WEeuHa4bUOfM2xQ">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packagedElement xmi:type="uml:Interaction" xmi:id="_S4ESUE7WEeuHa4bUOfM2xQ" name="Interaction1"/>
    <packagedElement xmi:type="uml:Package" xmi:id="_eKIccE7WEeuHa4bUOfM2xQ" name="Project_SE_UCD_2020">
      <packagedElement xmi:type="uml:Package" xmi:id="_gZ0nIE7WEeuHa4bUOfM2xQ" name="board">
        <packagedElement xmi:type="uml:Package" xmi:id="_vPXfEE7WEeuHa4bUOfM2xQ" name="tile">
          <packagedElement xmi:type="uml:Class" xmi:id="_vPZUQU7WEeuHa4bUOfM2xQ" name="TreasureTile" visibility="public" isAbstract="true">
            <generalization xmi:type="uml:Generalization" xmi:id="_vZiSQE7XEeuHa4bUOfM2xQ" general="_vbHmoU7XEeuHa4bUOfM2xQ"/>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vZiSQ07XEeuHa4bUOfM2xQ" name="treasureType" visibility="protected" type="_vuo_kE7XEeuHa4bUOfM2xQ" isUnique="false"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZlVkE7XEeuHa4bUOfM2xQ" name="TreasureTile" specification="_vZi5UE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    super(name);&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZl8oE7XEeuHa4bUOfM2xQ" name="getTreasure" specification="_vZlVkU7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    System.err.println(&quot;func getTreasure ERR -- class TreasureTile mistaken call&quot;);&#xD;
    return null;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZsDQk7XEeuHa4bUOfM2xQ" name="callTreasure" specification="_vZoY4E7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    ArrayList&lt;Integer> temp = new ArrayList&lt;Integer>();&#xD;
    for (int i = cards.size() - 1; i > -1; i--) {&#xD;
        if (cards.get(i).getTreasureType() == this.treasureType) {&#xD;
            temp.add(i);&#xD;
            if (temp.size() == 4) {&#xD;
                return temp;&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
    return temp;&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vZi5UE7XEeuHa4bUOfM2xQ" name="TreasureTile" visibility="public" method="_vZlVkE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZkugE7XEeuHa4bUOfM2xQ" name="name" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vZlVkU7XEeuHa4bUOfM2xQ" name="getTreasure" visibility="public" method="_vZl8oE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZlVkk7XEeuHa4bUOfM2xQ" type="_vPc-oU7WEeuHa4bUOfM2xQ" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vZoY4E7XEeuHa4bUOfM2xQ" name="callTreasure" visibility="public" method="_vZsDQk7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZo_8E7XEeuHa4bUOfM2xQ" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_ILxaUPaLEeW5KOK8aDMdgA"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vZpnAE7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vZqOEE7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZrcME7XEeuHa4bUOfM2xQ" name="cards" type="_vZnx0E7XEeuHa4bUOfM2xQ">
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vZsDQE7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vZsDQU7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Interface" xmi:id="_vZX6ME7XEeuHa4bUOfM2xQ" name="Tile" visibility="public">
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vZbkkE7XEeuHa4bUOfM2xQ" name="printCLI" visibility="public">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZcysE7XEeuHa4bUOfM2xQ" name="lines1To5" type="_vZYhQE7XEeuHa4bUOfM2xQ">
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vZcysU7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vZcysk7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vZdZwE7XEeuHa4bUOfM2xQ" name="getCoord" visibility="public">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZdZwU7XEeuHa4bUOfM2xQ" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vZeA0E7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vZeA0U7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vZeA0k7XEeuHa4bUOfM2xQ" name="setCoord" visibility="public">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZen4E7XEeuHa4bUOfM2xQ" name="coord">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vZen4U7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vZen4k7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vZfO8E7XEeuHa4bUOfM2xQ" name="setCoord" visibility="public">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZf2AE7XEeuHa4bUOfM2xQ" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              </ownedParameter>
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZf2AU7XEeuHa4bUOfM2xQ" name="col">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              </ownedParameter>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_vZYhQE7XEeuHa4bUOfM2xQ" name="StringBuilder"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_vZhrME7XEeuHa4bUOfM2xQ" name="StdTile" visibility="public">
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vac4QE7XEeuHa4bUOfM2xQ" name="nameCLI" visibility="protected" type="_eKOjE07WEeuHa4bUOfM2xQ" isUnique="false">
              <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vaeGYE7XEeuHa4bUOfM2xQ" name="defaultValue">
                <language>JAVA</language>
                <body>&quot;       &quot;</body>
              </defaultValue>
            </ownedAttribute>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vafUgE7XEeuHa4bUOfM2xQ" name="name" visibility="protected" type="_eKOjE07WEeuHa4bUOfM2xQ" isUnique="false"/>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vagioE7XEeuHa4bUOfM2xQ" name="status" visibility="protected" type="_vZufgE7XEeuHa4bUOfM2xQ" isUnique="false">
              <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vahwwE7XEeuHa4bUOfM2xQ" name="defaultValue">
                <language>JAVA</language>
                <body>Status.NORMAL</body>
              </defaultValue>
            </ownedAttribute>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vaiX0E7XEeuHa4bUOfM2xQ" name="players" visibility="protected" type="_gbieYE7WEeuHa4bUOfM2xQ" isUnique="false">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vajl8E7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vakNAE7XEeuHa4bUOfM2xQ" value="*"/>
              <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vakNAU7XEeuHa4bUOfM2xQ" name="defaultValue">
                <language>JAVA</language>
                <body>new ArrayList&lt;StdRole>()</body>
              </defaultValue>
            </ownedAttribute>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vakNAk7XEeuHa4bUOfM2xQ" name="coord" visibility="protected" isUnique="false">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_valbIE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_valbIU7XEeuHa4bUOfM2xQ" value="*"/>
              <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vamCME7XEeuHa4bUOfM2xQ" name="defaultValue">
                <language>JAVA</language>
                <body>{ -1, -1 }</body>
              </defaultValue>
            </ownedAttribute>
            <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_vabDEE7XEeuHa4bUOfM2xQ" name="StdTile implements Tile" client="_vZhrME7XEeuHa4bUOfM2xQ" supplier="_vZX6ME7XEeuHa4bUOfM2xQ" contract="_vZX6ME7XEeuHa4bUOfM2xQ"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vapskE7XEeuHa4bUOfM2xQ" name="StdTile" specification="_vampQE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    ;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vawaQE7XEeuHa4bUOfM2xQ" name="StdTile" specification="_varhwE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.name = name;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vazdkE7XEeuHa4bUOfM2xQ" name="getName" specification="_vaxoYE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return this.name;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_va150E7XEeuHa4bUOfM2xQ" name="getStatus" specification="_va0EoE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return this.status;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_va49IE7XEeuHa4bUOfM2xQ" name="getPlayers" specification="_va3H8E7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return this.players;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_va7ZYE7XEeuHa4bUOfM2xQ" name="getCoord" specification="_va6LQE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return this.coord;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_va-csE7XEeuHa4bUOfM2xQ" name="setName" specification="_va8ngE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.name = name;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vbAR4E7XEeuHa4bUOfM2xQ" name="setStatus" specification="_va_DwE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.status = status;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vbEjUE7XEeuHa4bUOfM2xQ" name="setPlayers" specification="_vbCHEE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.players = players;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vbHmoU7XEeuHa4bUOfM2xQ" name="setCoord" specification="_vbFxcE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.coord = coord;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vbMfIE7XEeuHa4bUOfM2xQ" name="setCoord" specification="_vbI0wE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    int[] temp = { row, col };&#xD;
    this.coord = temp;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vbOUUE7XEeuHa4bUOfM2xQ" name="flood" specification="_vbNtQE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    if (this.status == Status.NORMAL) {&#xD;
        this.status = Status.FLOODED;&#xD;
    } else if (this.status == Status.FLOODED) {&#xD;
        this.status = Status.SUNK;&#xD;
    } else {&#xD;
        ;&#xD;
    }&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vbRXoE7XEeuHa4bUOfM2xQ" name="storeUp" specification="_vbPicE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    if (this.status == Status.FLOODED) {&#xD;
        this.status = Status.NORMAL;&#xD;
        System.out.println(&quot;[Store Up success]&quot;);&#xD;
        return true;&#xD;
    } else {&#xD;
        if (this.status == Status.NORMAL) {&#xD;
            System.err.println(&quot;[Store Up failure -- This tile is completely normal.]&quot;);&#xD;
            return false;&#xD;
        } else if (this.status == Status.SUNK) {&#xD;
            System.err.println(&quot;[Store Up failure -- This tile is already sunk.]&quot;);&#xD;
            return false;&#xD;
        } else {&#xD;
            System.err.println(&quot;[Store Up failure -- this.status ERROR]&quot;);&#xD;
            return false;&#xD;
        }&#xD;
    }&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vbYsYE7XEeuHa4bUOfM2xQ" name="callTreasure" specification="_vbTM0E7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    System.err.println(&quot;func callTreasure ERR -- class StdTile mistaken call&quot;);&#xD;
    return null;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vbbvsE7XEeuHa4bUOfM2xQ" name="getTreasure" specification="_vbZ6gE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    System.err.println(&quot;func getTreasure ERR -- class StdTile mistaken call&quot;);&#xD;
    return null;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vbgoME7XEeuHa4bUOfM2xQ" name="printCLI" specification="_vbc90E7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    if (this.status == Status.NORMAL) {&#xD;
        lines1To5.set(0, lines1To5.get(0).append(&quot;╔═══════╗&quot;));&#xD;
        lines1To5.set(1, //line 2&#xD;
        lines1To5.get(1).append(//line 2&#xD;
        &quot;║&quot;));&#xD;
        printCharacterCLI(lines1To5, 1, 4);&#xD;
        lines1To5.set(1, //line 2&#xD;
        lines1To5.get(1).append(//line 2&#xD;
        &quot; &quot;));&#xD;
        printCharacterCLI(lines1To5, 1, 3);&#xD;
        lines1To5.set(1, //line 2&#xD;
        lines1To5.get(1).append(//line 2&#xD;
        &quot;║&quot;));&#xD;
        lines1To5.set(2, //line 3&#xD;
        lines1To5.get(2).append(//line 3&#xD;
        &quot;║&quot;));&#xD;
        printTileNameCLI(lines1To5);&#xD;
        lines1To5.set(2, //line 3&#xD;
        lines1To5.get(2).append(//line 3&#xD;
        &quot;║&quot;));&#xD;
        lines1To5.set(3, //line 4&#xD;
        lines1To5.get(3).append(//line 4&#xD;
        &quot;║&quot;));&#xD;
        printCharacterCLI(lines1To5, 3, 2);&#xD;
        lines1To5.set(3, //line 4&#xD;
        lines1To5.get(3).append(//line 4&#xD;
        &quot; &quot;));&#xD;
        printCharacterCLI(lines1To5, 3, 1);&#xD;
        lines1To5.set(3, //line 4&#xD;
        lines1To5.get(3).append(//line 4&#xD;
        &quot;║&quot;));&#xD;
        lines1To5.set(4, lines1To5.get(4).append(&quot;╚═══════╝&quot;));&#xD;
    } else if (this.status == Status.FLOODED) {&#xD;
        lines1To5.set(0, lines1To5.get(0).append(&quot;┌───────┐&quot;));&#xD;
        lines1To5.set(1, //line 2&#xD;
        lines1To5.get(1).append(//line 2&#xD;
        &quot;│&quot;));&#xD;
        printCharacterCLI(lines1To5, 1, 4);&#xD;
        lines1To5.set(1, //line 2&#xD;
        lines1To5.get(1).append(//line 2&#xD;
        &quot; &quot;));&#xD;
        printCharacterCLI(lines1To5, 1, 3);&#xD;
        lines1To5.set(1, //line 2&#xD;
        lines1To5.get(1).append(//line 2&#xD;
        &quot;│&quot;));&#xD;
        lines1To5.set(2, //line 3&#xD;
        lines1To5.get(2).append(//line 3&#xD;
        &quot;│&quot;));&#xD;
        printTileNameCLI(lines1To5);&#xD;
        lines1To5.set(2, //line 3&#xD;
        lines1To5.get(2).append(//line 3&#xD;
        &quot;│&quot;));&#xD;
        lines1To5.set(3, //line 4&#xD;
        lines1To5.get(3).append(//line 4&#xD;
        &quot;│&quot;));&#xD;
        printCharacterCLI(lines1To5, 3, 2);&#xD;
        lines1To5.set(3, //line 4&#xD;
        lines1To5.get(3).append(//line 4&#xD;
        &quot; &quot;));&#xD;
        printCharacterCLI(lines1To5, 3, 1);&#xD;
        lines1To5.set(3, //line 4&#xD;
        lines1To5.get(3).append(//line 4&#xD;
        &quot;│&quot;));&#xD;
        lines1To5.set(4, lines1To5.get(4).append(&quot;└───────┘&quot;));&#xD;
    } else if (this.status == Status.SUNK) {&#xD;
        lines1To5.set(0, lines1To5.get(0).append(&quot;         &quot;));&#xD;
        lines1To5.set(1, //line 2&#xD;
        lines1To5.get(1).append(//line 2&#xD;
        &quot; &quot;));&#xD;
        printCharacterCLI(lines1To5, 1, 4);&#xD;
        lines1To5.set(1, //line 2&#xD;
        lines1To5.get(1).append(//line 2&#xD;
        &quot; &quot;));&#xD;
        printCharacterCLI(lines1To5, 1, 3);&#xD;
        lines1To5.set(1, //line 2&#xD;
        lines1To5.get(1).append(//line 2&#xD;
        &quot; &quot;));&#xD;
        lines1To5.set(2, lines1To5.get(2).append(&quot;         &quot;));&#xD;
        lines1To5.set(3, //line 4&#xD;
        lines1To5.get(3).append(//line 4&#xD;
        &quot; &quot;));&#xD;
        printCharacterCLI(lines1To5, 3, 2);&#xD;
        lines1To5.set(3, //line 4&#xD;
        lines1To5.get(3).append(//line 4&#xD;
        &quot; &quot;));&#xD;
        printCharacterCLI(lines1To5, 3, 1);&#xD;
        lines1To5.set(3, //line 4&#xD;
        lines1To5.get(3).append(//line 4&#xD;
        &quot; &quot;));&#xD;
        lines1To5.set(4, lines1To5.get(4).append(&quot;         &quot;));&#xD;
    } else {&#xD;
        lines1To5.set(0, lines1To5.get(0).append(&quot;priCLIerr&quot;));&#xD;
        lines1To5.set(1, lines1To5.get(1).append(&quot;priCLIerr&quot;));&#xD;
        lines1To5.set(2, lines1To5.get(2).append(&quot;priCLIerr&quot;));&#xD;
        lines1To5.set(3, lines1To5.get(3).append(&quot;priCLIerr&quot;));&#xD;
        lines1To5.set(4, lines1To5.get(4).append(&quot;priCLIerr&quot;));&#xD;
    }&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vbnV4E7XEeuHa4bUOfM2xQ" name="printCharacterCLI" specification="_vbidYE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    if (players.size() >= playerNum) {&#xD;
        @SuppressWarnings(&quot;rawtypes&quot;) Class temp = (players.get(playerNum - 1)).getClass();&#xD;
        if (temp == CheatCharacter.class) {&#xD;
            lines1To5.set(lineNum, lines1To5.get(lineNum).append(&quot;DAD&quot;));&#xD;
        } else if (temp == Diver.class) {&#xD;
            lines1To5.set(lineNum, lines1To5.get(lineNum).append(&quot;DIV&quot;));&#xD;
        } else if (temp == Engineer.class) {&#xD;
            lines1To5.set(lineNum, lines1To5.get(lineNum).append(&quot;ENG&quot;));&#xD;
        } else if (temp == Explorer.class) {&#xD;
            lines1To5.set(lineNum, lines1To5.get(lineNum).append(&quot;EXP&quot;));&#xD;
        } else if (temp == Messenger.class) {&#xD;
            lines1To5.set(lineNum, lines1To5.get(lineNum).append(&quot;MSG&quot;));&#xD;
        } else if (temp == Navigator.class) {&#xD;
            lines1To5.set(lineNum, lines1To5.get(lineNum).append(&quot;NAV&quot;));&#xD;
        } else if (temp == Pilot.class) {&#xD;
            lines1To5.set(lineNum, lines1To5.get(lineNum).append(&quot;PIL&quot;));&#xD;
        } else {&#xD;
            lines1To5.set(lineNum, lines1To5.get(lineNum).append(&quot;ERR&quot;));&#xD;
        }&#xD;
    } else {&#xD;
        lines1To5.set(lineNum, lines1To5.get(lineNum).append(&quot;   &quot;));&#xD;
    }&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vbokAE7XEeuHa4bUOfM2xQ" name="printTileNameCLI" specification="_vbnV4U7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    lines1To5.set(2, lines1To5.get(2).append(nameCLI));&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vbpLEE7XEeuHa4bUOfM2xQ" name="playerComes" specification="_vbokAU7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    players.add(player);&#xD;
    player.setCurrStdTile(this);&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vbpyIE7XEeuHa4bUOfM2xQ" name="playerLeaves" specification="_vbpLEU7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    players.remove(player);&#xD;
    player.setCurrStdTile(null);&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vbpyIk7XEeuHa4bUOfM2xQ" name="playerAllLeaves" specification="_vbpyIU7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    players.clear();&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vampQE7XEeuHa4bUOfM2xQ" name="StdTile" visibility="public" method="_vapskE7XEeuHa4bUOfM2xQ"/>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_varhwE7XEeuHa4bUOfM2xQ" name="StdTile" visibility="public" method="_vawaQE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vavzME7XEeuHa4bUOfM2xQ" name="name" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vaxoYE7XEeuHa4bUOfM2xQ" name="getName" visibility="public" method="_vazdkE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vayPcE7XEeuHa4bUOfM2xQ" type="_eKOjE07WEeuHa4bUOfM2xQ" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_va0EoE7XEeuHa4bUOfM2xQ" name="getStatus" visibility="public" method="_va150E7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_va0rsE7XEeuHa4bUOfM2xQ" type="_vZufgE7XEeuHa4bUOfM2xQ" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_va3H8E7XEeuHa4bUOfM2xQ" name="getPlayers" visibility="public" method="_va49IE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_va3vAE7XEeuHa4bUOfM2xQ" type="_gbieYE7WEeuHa4bUOfM2xQ" direction="return">
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_va4WEE7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_va4WEU7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_va6LQE7XEeuHa4bUOfM2xQ" name="getCoord" visibility="public" method="_va7ZYE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_va6yUE7XEeuHa4bUOfM2xQ" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_va6yUU7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_va6yUk7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_va8ngE7XEeuHa4bUOfM2xQ" name="setName" visibility="public" method="_va-csE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_va91oE7XEeuHa4bUOfM2xQ" name="name" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_va_DwE7XEeuHa4bUOfM2xQ" name="setStatus" visibility="public" method="_vbAR4E7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_va_q0E7XEeuHa4bUOfM2xQ" name="status" type="_vZufgE7XEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vbCHEE7XEeuHa4bUOfM2xQ" name="setPlayers" visibility="public" method="_vbEjUE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vbCuIE7XEeuHa4bUOfM2xQ" name="players" type="_gbieYE7WEeuHa4bUOfM2xQ">
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vbDVME7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vbD8QE7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vbFxcE7XEeuHa4bUOfM2xQ" name="setCoord" visibility="public" method="_vbHmoU7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vbGYgE7XEeuHa4bUOfM2xQ" name="coord">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vbG_kE7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vbHmoE7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vbI0wE7XEeuHa4bUOfM2xQ" name="setCoord" visibility="public" method="_vbMfIE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vbKC4E7XEeuHa4bUOfM2xQ" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              </ownedParameter>
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vbKp8E7XEeuHa4bUOfM2xQ" name="col">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vbNtQE7XEeuHa4bUOfM2xQ" name="flood" visibility="public" method="_vbOUUE7XEeuHa4bUOfM2xQ"/>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vbPicE7XEeuHa4bUOfM2xQ" name="storeUp" visibility="public" method="_vbRXoE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vbQwkE7XEeuHa4bUOfM2xQ" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vbTM0E7XEeuHa4bUOfM2xQ" name="callTreasure" visibility="public" method="_vbYsYE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vbUa8E7XEeuHa4bUOfM2xQ" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_ILxaUPaLEeW5KOK8aDMdgA"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vbVpEE7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vbWQIE7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vbW3ME7XEeuHa4bUOfM2xQ" name="cards" type="_vZnx0E7XEeuHa4bUOfM2xQ">
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vbYFUE7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vbYFUU7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vbZ6gE7XEeuHa4bUOfM2xQ" name="getTreasure" visibility="public" method="_vbbvsE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vbbIoE7XEeuHa4bUOfM2xQ" type="_vPc-oU7WEeuHa4bUOfM2xQ" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vbc90E7XEeuHa4bUOfM2xQ" name="printCLI" visibility="public" method="_vbgoME7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vbeL8E7XEeuHa4bUOfM2xQ" name="lines1To5" type="_vZYhQE7XEeuHa4bUOfM2xQ">
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vbfaEE7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vbgBIE7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vbidYE7XEeuHa4bUOfM2xQ" name="printCharacterCLI" visibility="public" method="_vbnV4E7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vbkSkE7XEeuHa4bUOfM2xQ" name="lines1To5" type="_vZYhQE7XEeuHa4bUOfM2xQ">
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vbk5oE7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vbk5oU7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vblgsE7XEeuHa4bUOfM2xQ" name="lineNum">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              </ownedParameter>
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vbmHwE7XEeuHa4bUOfM2xQ" name="playerNum">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vbnV4U7XEeuHa4bUOfM2xQ" name="printTileNameCLI" visibility="public" method="_vbokAE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vbn88E7XEeuHa4bUOfM2xQ" name="lines1To5" type="_vZYhQE7XEeuHa4bUOfM2xQ">
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vbn88U7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vbn88k7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vbokAU7XEeuHa4bUOfM2xQ" name="playerComes" visibility="public" method="_vbpLEE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vbokAk7XEeuHa4bUOfM2xQ" name="player" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vbpLEU7XEeuHa4bUOfM2xQ" name="playerLeaves" visibility="public" method="_vbpyIE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vbpLEk7XEeuHa4bUOfM2xQ" name="player" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vbpyIU7XEeuHa4bUOfM2xQ" name="playerAllLeaves" visibility="public" method="_vbpyIk7XEeuHa4bUOfM2xQ"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Enumeration" xmi:id="_vZufgE7XEeuHa4bUOfM2xQ" name="Status" visibility="public">
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vZwUsE7XEeuHa4bUOfM2xQ" name="NORMAL"/>
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vZw7wE7XEeuHa4bUOfM2xQ" name="FLOODED"/>
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vZxi0E7XEeuHa4bUOfM2xQ" name="SUNK"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_vZzYAE7XEeuHa4bUOfM2xQ" name="FoolsLanding" visibility="public">
            <generalization xmi:type="uml:Generalization" xmi:id="_vZ0mIE7XEeuHa4bUOfM2xQ" general="_vZz_EE7XEeuHa4bUOfM2xQ"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZ5eoE7XEeuHa4bUOfM2xQ" name="FoolsLanding" specification="_vZ10QE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.name = &quot;Fools' Landing&quot;;&#xD;
    this.nameCLI = &quot;Fools' &quot;;&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vZ10QE7XEeuHa4bUOfM2xQ" name="FoolsLanding" visibility="public" method="_vZ5eoE7XEeuHa4bUOfM2xQ"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_vZz_EE7XEeuHa4bUOfM2xQ" name="Gate" visibility="public">
            <generalization xmi:type="uml:Generalization" xmi:id="_vcI6UE7XEeuHa4bUOfM2xQ" general="_vZhrME7XEeuHa4bUOfM2xQ"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vcMksE7XEeuHa4bUOfM2xQ" name="Gate" specification="_vcJhYE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>//should not use&#xD;
&#xD;
    ;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vcSEQE7XEeuHa4bUOfM2xQ" name="Gate" specification="_vcNy0E7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    super(name);&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vcJhYE7XEeuHa4bUOfM2xQ" name="Gate" visibility="public" method="_vcMksE7XEeuHa4bUOfM2xQ"/>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vcNy0E7XEeuHa4bUOfM2xQ" name="Gate" visibility="public" method="_vcSEQE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vcRdME7XEeuHa4bUOfM2xQ" name="name" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_vZ8h8E7XEeuHa4bUOfM2xQ" name="NullTile" visibility="public">
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vaDPoE7XEeuHa4bUOfM2xQ" name="coord" visibility="protected" isUnique="false">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vaD2sE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vaEdwE7XEeuHa4bUOfM2xQ" value="*"/>
              <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vaEdwU7XEeuHa4bUOfM2xQ" name="defaultValue">
                <language>JAVA</language>
                <body>{ -1, -1 }</body>
              </defaultValue>
            </ownedAttribute>
            <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_vaCBgE7XEeuHa4bUOfM2xQ" name="NullTile implements Tile" client="_vZ8h8E7XEeuHa4bUOfM2xQ" supplier="_vZX6ME7XEeuHa4bUOfM2xQ" contract="_vZX6ME7XEeuHa4bUOfM2xQ"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vaIIIE7XEeuHa4bUOfM2xQ" name="NullTile" specification="_vaFr4E7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    ;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vaJ9UE7XEeuHa4bUOfM2xQ" name="getCoord" specification="_vaIIIU7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return coord;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vaNAoE7XEeuHa4bUOfM2xQ" name="setCoord" specification="_vaKkYE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.coord = coord;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vaQD8E7XEeuHa4bUOfM2xQ" name="setCoord" specification="_vaOOwE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    int[] temp = { row, col };&#xD;
    this.coord = temp;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vaTuUE7XEeuHa4bUOfM2xQ" name="printCLI" specification="_vaRSEE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    //line 1&#xD;
    lines1To5.set(0, lines1To5.get(0).append(&quot;         &quot;));&#xD;
    //line 2&#xD;
    lines1To5.set(1, lines1To5.get(1).append(&quot;         &quot;));&#xD;
    //line 3&#xD;
    lines1To5.set(2, lines1To5.get(2).append(&quot;         &quot;));&#xD;
    //line 4&#xD;
    lines1To5.set(3, lines1To5.get(3).append(&quot;         &quot;));&#xD;
    //line 5&#xD;
    lines1To5.set(4, lines1To5.get(4).append(&quot;         &quot;));&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vaFr4E7XEeuHa4bUOfM2xQ" name="NullTile" visibility="public" method="_vaIIIE7XEeuHa4bUOfM2xQ"/>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vaIIIU7XEeuHa4bUOfM2xQ" name="getCoord" visibility="public" method="_vaJ9UE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vaIvME7XEeuHa4bUOfM2xQ" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vaJWQE7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vaJWQU7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vaKkYE7XEeuHa4bUOfM2xQ" name="setCoord" visibility="public" method="_vaNAoE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vaLLcE7XEeuHa4bUOfM2xQ" name="coord">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vaLygE7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vaMZkE7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vaOOwE7XEeuHa4bUOfM2xQ" name="setCoord" visibility="public" method="_vaQD8E7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vaO10E7XEeuHa4bUOfM2xQ" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              </ownedParameter>
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vaPc4E7XEeuHa4bUOfM2xQ" name="col">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vaRSEE7XEeuHa4bUOfM2xQ" name="printCLI" visibility="public" method="_vaTuUE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vaSgME7XEeuHa4bUOfM2xQ" name="lines1To5" type="_vZYhQE7XEeuHa4bUOfM2xQ">
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vaSgMU7XEeuHa4bUOfM2xQ"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vaTHQE7XEeuHa4bUOfM2xQ" value="*"/>
              </ownedParameter>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_vbrnUE7XEeuHa4bUOfM2xQ" name="Palace" visibility="public">
            <generalization xmi:type="uml:Generalization" xmi:id="_vbsOYE7XEeuHa4bUOfM2xQ" general="_vPZUQU7WEeuHa4bUOfM2xQ"/>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vbtcgE7XEeuHa4bUOfM2xQ" name="chalice" visibility="protected" isStatic="true" type="_vPc-oU7WEeuHa4bUOfM2xQ" isUnique="false"/>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vbuqoE7XEeuHa4bUOfM2xQ" name="ifGet" visibility="protected" isStatic="true" isUnique="false">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vbwf0E7XEeuHa4bUOfM2xQ" name="defaultValue">
                <language>JAVA</language>
                <body>false</body>
              </defaultValue>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vb30kE7XEeuHa4bUOfM2xQ" name="Palace" specification="_vbxt8E7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    super(name);&#xD;
    this.treasureType = TreasureType.CHALICE;&#xD;
    this.nameCLI = &quot;CHALICE&quot;;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vb6Q0E7XEeuHa4bUOfM2xQ" name="getChalice" specification="_vb5CsE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return Palace.chalice;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vb9UIE7XEeuHa4bUOfM2xQ" name="getIfGet" specification="_vb7e8E7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return Palace.ifGet;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vcAXcE7XEeuHa4bUOfM2xQ" name="setTreasure" specification="_vb-iQE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    Palace.chalice = chalice;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vcDawE7XEeuHa4bUOfM2xQ" name="setIfGet" specification="_vcBlkE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    Palace.ifGet = ifGet;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vcGeEE7XEeuHa4bUOfM2xQ" name="getTreasure" specification="_vcEo4E7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    if (Palace.chalice == null) {&#xD;
        System.err.println(&quot;[The chalice treasure == null.]&quot;);&#xD;
        return null;&#xD;
    } else if (Palace.ifGet) {&#xD;
        System.err.println(&quot;[The Chalice treasure has been captured already.]&quot;);&#xD;
        return null;&#xD;
    } else {&#xD;
        //the &quot;ifGet&quot; do not need to assign to false again. Because the only possibility for this is the player which has the treasure become dead.&#xD;
        Palace.ifGet = true;&#xD;
        return Palace.chalice;&#xD;
    }&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vbxt8E7XEeuHa4bUOfM2xQ" name="Palace" visibility="public" method="_vb30kE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vb2mcE7XEeuHa4bUOfM2xQ" name="name" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vb5CsE7XEeuHa4bUOfM2xQ" name="getChalice" visibility="public" isStatic="true" method="_vb6Q0E7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vb5pwE7XEeuHa4bUOfM2xQ" type="_vPc-oU7WEeuHa4bUOfM2xQ" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vb7e8E7XEeuHa4bUOfM2xQ" name="getIfGet" visibility="public" isStatic="true" method="_vb9UIE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vb8tEE7XEeuHa4bUOfM2xQ" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vb-iQE7XEeuHa4bUOfM2xQ" name="setTreasure" visibility="public" isStatic="true" method="_vcAXcE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vb_wYE7XEeuHa4bUOfM2xQ" name="chalice" type="_vPc-oU7WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vcBlkE7XEeuHa4bUOfM2xQ" name="setIfGet" visibility="public" isStatic="true" method="_vcDawE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vcCzsE7XEeuHa4bUOfM2xQ" name="ifGet">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vcEo4E7XEeuHa4bUOfM2xQ" name="getTreasure" visibility="public" method="_vcGeEE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vcF3AE7XEeuHa4bUOfM2xQ" type="_vPc-oU7WEeuHa4bUOfM2xQ" direction="return"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_vcUggE7XEeuHa4bUOfM2xQ" name="Temple" visibility="public">
            <generalization xmi:type="uml:Generalization" xmi:id="_vcVuoE7XEeuHa4bUOfM2xQ" general="_vPZUQU7WEeuHa4bUOfM2xQ"/>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vcWVsE7XEeuHa4bUOfM2xQ" name="stone" visibility="protected" isStatic="true" type="_vPc-oU7WEeuHa4bUOfM2xQ" isUnique="false"/>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vcW8wE7XEeuHa4bUOfM2xQ" name="ifGet" visibility="protected" isStatic="true" isUnique="false">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vcYx8E7XEeuHa4bUOfM2xQ" name="defaultValue">
                <language>JAVA</language>
                <body>false</body>
              </defaultValue>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vceRgE7XEeuHa4bUOfM2xQ" name="Temple" specification="_vcaAEE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    super(name);&#xD;
    this.treasureType = TreasureType.STONE;&#xD;
    this.nameCLI = &quot; STONE &quot;;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vchU0E7XEeuHa4bUOfM2xQ" name="getWind" specification="_vcffoE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return Temple.stone;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vcjxEE7XEeuHa4bUOfM2xQ" name="getIfGet" specification="_vcii8E7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return Temple.ifGet;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vcm0YE7XEeuHa4bUOfM2xQ" name="setTreasure" specification="_vck_ME7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    Temple.stone = stone;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vcpQoE7XEeuHa4bUOfM2xQ" name="setIfGet" specification="_vcoCgE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    Temple.ifGet = ifGet;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vcrs4E7XEeuHa4bUOfM2xQ" name="getTreasure" specification="_vcqewE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    if (Temple.stone == null) {&#xD;
        System.err.println(&quot;[The stone treasure == null.]&quot;);&#xD;
        return null;&#xD;
    } else if (Temple.ifGet) {&#xD;
        System.err.println(&quot;[The Stone treasure has been captured already.]&quot;);&#xD;
        return null;&#xD;
    } else {&#xD;
        //the &quot;ifGet&quot; do not need to assign to false again. Because the only possibility for this is the player which has the treasure become dead.&#xD;
        Temple.ifGet = true;&#xD;
        return Temple.stone;&#xD;
    }&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vcaAEE7XEeuHa4bUOfM2xQ" name="Temple" visibility="public" method="_vceRgE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vcdqcE7XEeuHa4bUOfM2xQ" name="name" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vcffoE7XEeuHa4bUOfM2xQ" name="getWind" visibility="public" isStatic="true" method="_vchU0E7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vcgtwE7XEeuHa4bUOfM2xQ" type="_vPc-oU7WEeuHa4bUOfM2xQ" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vcii8E7XEeuHa4bUOfM2xQ" name="getIfGet" visibility="public" isStatic="true" method="_vcjxEE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vcjKAE7XEeuHa4bUOfM2xQ" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vck_ME7XEeuHa4bUOfM2xQ" name="setTreasure" visibility="public" isStatic="true" method="_vcm0YE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vcmNUE7XEeuHa4bUOfM2xQ" name="stone" type="_vPc-oU7WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vcoCgE7XEeuHa4bUOfM2xQ" name="setIfGet" visibility="public" isStatic="true" method="_vcpQoE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vcopkE7XEeuHa4bUOfM2xQ" name="ifGet">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vcqewE7XEeuHa4bUOfM2xQ" name="getTreasure" visibility="public" method="_vcrs4E7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vcrF0E7XEeuHa4bUOfM2xQ" type="_vPc-oU7WEeuHa4bUOfM2xQ" direction="return"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_vcuJIE7XEeuHa4bUOfM2xQ" name="Cave" visibility="public">
            <generalization xmi:type="uml:Generalization" xmi:id="_vcuwME7XEeuHa4bUOfM2xQ" general="_vPZUQU7WEeuHa4bUOfM2xQ"/>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vcv-UE7XEeuHa4bUOfM2xQ" name="fire" visibility="protected" isStatic="true" type="_vPc-oU7WEeuHa4bUOfM2xQ" isUnique="false"/>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vcxzgE7XEeuHa4bUOfM2xQ" name="ifGet" visibility="protected" isStatic="true" isUnique="false">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vczBoE7XEeuHa4bUOfM2xQ" name="defaultValue">
                <language>JAVA</language>
                <body>false</body>
              </defaultValue>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vc3TEE7XEeuHa4bUOfM2xQ" name="Cave" specification="_vczBoU7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    super(name);&#xD;
    this.treasureType = TreasureType.FIRE;&#xD;
    this.nameCLI = &quot; FIRE  &quot;;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vc6WYE7XEeuHa4bUOfM2xQ" name="getFire" specification="_vc4hME7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return Cave.fire;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vc8yoE7XEeuHa4bUOfM2xQ" name="getIfGet" specification="_vc69cE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return Cave.ifGet;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vc-n0E7XEeuHa4bUOfM2xQ" name="setTreasure" specification="_vc8yoU7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    Cave.fire = fire;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vdBrIE7XEeuHa4bUOfM2xQ" name="setIfGet" specification="_vc_18E7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    Cave.ifGet = ifGet;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vdEHYE7XEeuHa4bUOfM2xQ" name="getTreasure" specification="_vdC5QE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    if (Cave.fire == null) {&#xD;
        System.err.println(&quot;[The fire treasure == null.]&quot;);&#xD;
        return null;&#xD;
    } else if (Cave.ifGet) {&#xD;
        System.err.println(&quot;[The fire treasure has been captured already.]&quot;);&#xD;
        return null;&#xD;
    } else {&#xD;
        //the &quot;ifGet&quot; do not need to assign to false again. Because the only possibility for this is the player which has the treasure become dead.&#xD;
        Cave.ifGet = true;&#xD;
        return Cave.fire;&#xD;
    }&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vczBoU7XEeuHa4bUOfM2xQ" name="Cave" visibility="public" method="_vc3TEE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vc2sAE7XEeuHa4bUOfM2xQ" name="name" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vc4hME7XEeuHa4bUOfM2xQ" name="getFire" visibility="public" isStatic="true" method="_vc6WYE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vc5vUE7XEeuHa4bUOfM2xQ" type="_vPc-oU7WEeuHa4bUOfM2xQ" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vc69cE7XEeuHa4bUOfM2xQ" name="getIfGet" visibility="public" isStatic="true" method="_vc8yoE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vc8LkE7XEeuHa4bUOfM2xQ" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vc8yoU7XEeuHa4bUOfM2xQ" name="setTreasure" visibility="public" isStatic="true" method="_vc-n0E7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vc-AwE7XEeuHa4bUOfM2xQ" name="fire" type="_vPc-oU7WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vc_18E7XEeuHa4bUOfM2xQ" name="setIfGet" visibility="public" isStatic="true" method="_vdBrIE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vdBEEE7XEeuHa4bUOfM2xQ" name="ifGet">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vdC5QE7XEeuHa4bUOfM2xQ" name="getTreasure" visibility="public" method="_vdEHYE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vdDgUE7XEeuHa4bUOfM2xQ" type="_vPc-oU7WEeuHa4bUOfM2xQ" direction="return"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_vdHxwE7XEeuHa4bUOfM2xQ" name="Garden" visibility="public">
            <generalization xmi:type="uml:Generalization" xmi:id="_vdIY0E7XEeuHa4bUOfM2xQ" general="_vPZUQU7WEeuHa4bUOfM2xQ"/>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vdJm8E7XEeuHa4bUOfM2xQ" name="wind" visibility="protected" isStatic="true" type="_vPc-oU7WEeuHa4bUOfM2xQ" isUnique="false"/>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vdLcIE7XEeuHa4bUOfM2xQ" name="ifGet" visibility="protected" isStatic="true" isUnique="false">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vdMqQE7XEeuHa4bUOfM2xQ" name="defaultValue">
                <language>JAVA</language>
                <body>false</body>
              </defaultValue>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vdSJ0E7XEeuHa4bUOfM2xQ" name="Garden" specification="_vdN4YE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    super(name);&#xD;
    this.treasureType = TreasureType.WIND;&#xD;
    this.nameCLI = &quot; WIND  &quot;;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vdUmEE7XEeuHa4bUOfM2xQ" name="getWind" specification="_vdTX8E7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return Garden.wind;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vdXCUE7XEeuHa4bUOfM2xQ" name="getIfGet" specification="_vdV0ME7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return Garden.ifGet;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vdZekU7XEeuHa4bUOfM2xQ" name="setTreasure" specification="_vdYQcE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    Garden.wind = wind;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vdch4E7XEeuHa4bUOfM2xQ" name="setIfGet" specification="_vdassE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    Garden.ifGet = ifGet;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vde-IE7XEeuHa4bUOfM2xQ" name="getTreasure" specification="_vddwAE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    if (Garden.wind == null) {&#xD;
        System.err.println(&quot;[The wind treasure == null.]&quot;);&#xD;
        return null;&#xD;
    } else if (Garden.ifGet) {&#xD;
        System.err.println(&quot;[The wind treasure has been captured already.]&quot;);&#xD;
        return null;&#xD;
    } else {&#xD;
        //the &quot;ifGet&quot; do not need to assign to false again. Because the only possibility for this is the player which has the treasure become dead.&#xD;
        Garden.ifGet = true;&#xD;
        return Garden.wind;&#xD;
    }&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vdN4YE7XEeuHa4bUOfM2xQ" name="Garden" visibility="public" method="_vdSJ0E7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vdRiwE7XEeuHa4bUOfM2xQ" name="name" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vdTX8E7XEeuHa4bUOfM2xQ" name="getWind" visibility="public" isStatic="true" method="_vdUmEE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vdTX8U7XEeuHa4bUOfM2xQ" type="_vPc-oU7WEeuHa4bUOfM2xQ" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vdV0ME7XEeuHa4bUOfM2xQ" name="getIfGet" visibility="public" isStatic="true" method="_vdXCUE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vdWbQE7XEeuHa4bUOfM2xQ" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vdYQcE7XEeuHa4bUOfM2xQ" name="setTreasure" visibility="public" isStatic="true" method="_vdZekU7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vdZekE7XEeuHa4bUOfM2xQ" name="wind" type="_vPc-oU7WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vdassE7XEeuHa4bUOfM2xQ" name="setIfGet" visibility="public" isStatic="true" method="_vdch4E7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vdb60E7XEeuHa4bUOfM2xQ" name="ifGet">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vddwAE7XEeuHa4bUOfM2xQ" name="getTreasure" visibility="public" method="_vde-IE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vdeXEE7XEeuHa4bUOfM2xQ" type="_vPc-oU7WEeuHa4bUOfM2xQ" direction="return"/>
            </ownedOperation>
          </packagedElement>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vYAoQE7XEeuHa4bUOfM2xQ" name="Board" visibility="public">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYB2YE7XEeuHa4bUOfM2xQ" name="NullTile" visibility="protected" type="_gZ3DYk7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYDEgE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new NullTile()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYDrkE7XEeuHa4bUOfM2xQ" name="twilightHollow" visibility="protected" type="_gZ774E7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYESoE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new StdTile(&quot;Twilight Hollow&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYFgwE7XEeuHa4bUOfM2xQ" name="breakersBridge" visibility="protected" type="_gZ774E7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYGH0E7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new StdTile(&quot;Breakers Bridge&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYGu4E7XEeuHa4bUOfM2xQ" name="lostLagoon" visibility="protected" type="_gZ774E7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYHV8E7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new StdTile(&quot;Lost Lagoon&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYH9AE7XEeuHa4bUOfM2xQ" name="watchtower" visibility="protected" type="_gZ774E7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYIkEE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new StdTile(&quot;Watchtower&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYJyME7XEeuHa4bUOfM2xQ" name="crimsonForest" visibility="protected" type="_gZ774E7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYKZQE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new StdTile(&quot;Crimson Forest&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYLAUE7XEeuHa4bUOfM2xQ" name="cliffsOfAbandon" visibility="protected" type="_gZ774E7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYLnYE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new StdTile(&quot;Cliffs of Abandon&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYMOcE7XEeuHa4bUOfM2xQ" name="mistyMarsh" visibility="protected" type="_gZ774E7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYM1gE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new StdTile(&quot;Misty Marsh&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYNckE7XEeuHa4bUOfM2xQ" name="phantomRock" visibility="protected" type="_gZ774E7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYODoE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new StdTile(&quot;Phantom Rock&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYOqsE7XEeuHa4bUOfM2xQ" name="dunesOfDeception" visibility="protected" type="_gZ774E7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYP40E7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new StdTile(&quot;Dunes of Deception&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYRG8E7XEeuHa4bUOfM2xQ" name="observatory" visibility="protected" type="_gZ774E7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYSVEE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new StdTile(&quot;Observatory&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYTjME7XEeuHa4bUOfM2xQ" name="tidalPalace" visibility="protected" type="_gac5QE7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYUxUE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Palace(&quot;Tidal Palace&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYVYYE7XEeuHa4bUOfM2xQ" name="coralPalace" visibility="protected" type="_gac5QE7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYWmgE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Palace(&quot;Coral Palace&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYX0oE7XEeuHa4bUOfM2xQ" name="caveOfShadows" visibility="protected" type="_gak1EE7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYZp0E7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Cave(&quot;Cave of Shadows&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYaQ4E7XEeuHa4bUOfM2xQ" name="caveOfEmbers" visibility="protected" type="_gak1EE7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYbfAE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Cave(&quot;Cave of Embers&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYctIE7XEeuHa4bUOfM2xQ" name="templeOfTheMoon" visibility="protected" type="_gatX8E7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYdUME7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Temple(&quot;Temple of the Moon&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYeiUE7XEeuHa4bUOfM2xQ" name="templeOfTheSun" visibility="protected" type="_gatX8E7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYfwcE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Temple(&quot;Temple of the Sun&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYfwcU7XEeuHa4bUOfM2xQ" name="whisperingGarden" visibility="protected" type="_ga1TwE7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYfwck7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Garden(&quot;Whispering Garden&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYg-kE7XEeuHa4bUOfM2xQ" name="howlingGarden" visibility="protected" type="_ga1TwE7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYhloE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Garden(&quot;Howling Garden&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYiMsE7XEeuHa4bUOfM2xQ" name="foolsLanding" visibility="protected" type="_gbEkUE7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYizwE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new FoolsLanding()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYkB4E7XEeuHa4bUOfM2xQ" name="goldGate" visibility="protected" type="_gbL5EE7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYlQAE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Gate(&quot;Gold Gate&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYl3EE7XEeuHa4bUOfM2xQ" name="ironGate" visibility="protected" type="_gbL5EE7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYnFME7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Gate(&quot;Iron Gate&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYoTUE7XEeuHa4bUOfM2xQ" name="silverGate" visibility="protected" type="_gbL5EE7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYo6YE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Gate(&quot;Silver Gate&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYphcE7XEeuHa4bUOfM2xQ" name="bronzeGate" visibility="protected" type="_gbL5EE7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYqIgE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Gate(&quot;Bronze Gate&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYqvkE7XEeuHa4bUOfM2xQ" name="copperGate" visibility="protected" type="_gbL5EE7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYr9sE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Gate(&quot;Copper Gate&quot;)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYskwE7XEeuHa4bUOfM2xQ" name="tile" visibility="protected" type="_gbaikE7WEeuHa4bUOfM2xQ" isUnique="false">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vYty4E7XEeuHa4bUOfM2xQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vYuZ8E7XEeuHa4bUOfM2xQ" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYvBAE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>{ { NullTile, NullTile, twilightHollow, tidalPalace, NullTile, NullTile }, { NullTile, breakersBridge, bronzeGate, caveOfEmbers, caveOfShadows, NullTile }, { whisperingGarden, cliffsOfAbandon, copperGate, coralPalace, crimsonForest, phantomRock }, { watchtower, dunesOfDeception, foolsLanding, goldGate, howlingGarden, silverGate }, { NullTile, observatory, mistyMarsh, lostLagoon, ironGate, NullTile }, { NullTile, NullTile, templeOfTheSun, templeOfTheMoon, NullTile, NullTile } }</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYvoEE7XEeuHa4bUOfM2xQ" name="playerList" visibility="protected" type="_gbieYE7WEeuHa4bUOfM2xQ" isUnique="false">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vYw2ME7XEeuHa4bUOfM2xQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vYxdQE7XEeuHa4bUOfM2xQ" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYyEUE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new ArrayList&lt;StdRole>()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vYyrYE7XEeuHa4bUOfM2xQ" name="ifInit" visibility="public" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vYz5gE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>false</body>
            </defaultValue>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vY3j4E7XEeuHa4bUOfM2xQ" name="Board" specification="_vY0gkE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.initCoord();&#xD;
    Palace.setTreasure(new Chalice());&#xD;
    Cave.setTreasure(new Fire());&#xD;
    Temple.setTreasure(new Stone());&#xD;
    Garden.setTreasure(new Wind());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vY7OQE7XEeuHa4bUOfM2xQ" name="getPlayerList" specification="_vY4yAE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.playerList;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vY-RkU7XEeuHa4bUOfM2xQ" name="setPlayerList" specification="_vY8cYE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.playerList = playerList;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZAGwE7XEeuHa4bUOfM2xQ" name="init" specification="_vY_fsE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.ifInit) {&#xD;
        System.err.println(&quot;func init ERR -- has been called already&quot;);&#xD;
    } else {&#xD;
        this.rearrange();&#xD;
        this.ifInit = true;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZB78E7XEeuHa4bUOfM2xQ" name="rearrange" specification="_vZBU4E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    ArrayList&lt;Integer> tempList = new ArrayList&lt;Integer>();&#xD;
    ArrayList&lt;Integer> tempList2 = new ArrayList&lt;Integer>();&#xD;
    for (int i = 0; i &lt; 6 * 6; i++) {&#xD;
        if (//ignore the NullTiles&#xD;
        (i == 0) || (i == 1) || (i == 4) || (i == 5) || (i == 6) || (i == 11) || (i == 24) || (i == 29) || (i == 30) || (i == 31) || (i == 34) || (i == 35)) {&#xD;
            continue;&#xD;
        } else {&#xD;
            tempList.add(i);&#xD;
            tempList2.add(i);&#xD;
        }&#xD;
    }&#xD;
    ArrayList&lt;Integer> randomList = new ArrayList&lt;Integer>();&#xD;
    for (int i = 0; i &lt; (6 * 6) - (3 * 4); i++) {&#xD;
        randomList.add(tempList.remove(new Random().nextInt(tempList.size())));&#xD;
    }&#xD;
    Tile tempTile;&#xD;
    for (//random&#xD;
    int i = 0; //random&#xD;
    i &lt; tempList2.size(); //random&#xD;
    i++) {&#xD;
        tempTile = this.tile[tempList2.get(i) / 6][tempList2.get(i) % 6];&#xD;
        this.tile[tempList2.get(i) / 6][tempList2.get(i) % 6] = this.tile[randomList.get(i) / 6][randomList.get(i) % 6];&#xD;
        this.tile[randomList.get(i) / 6][randomList.get(i) % 6] = tempTile;&#xD;
    }&#xD;
    this.initCoord();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZDKEE7XEeuHa4bUOfM2xQ" name="initCoord" specification="_vZCjAE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    for (int i = 0; i &lt; 6; i++) {&#xD;
        for (int j = 0; j &lt; 6; j++) {&#xD;
            this.tile[i][j].setCoord(i, j);&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZG0cE7XEeuHa4bUOfM2xQ" name="getStdTile" specification="_vZEYME7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if ((row &lt; 0) || (row > 5) || (col &lt; 0) || (col > 5)) {&#xD;
        //Out of Range&#xD;
        return null;&#xD;
    } else {&#xD;
        int temp = row * 6 + col;&#xD;
        if (//ignore the NullTiles&#xD;
        (temp == 0) || (temp == 1) || (temp == 4) || (temp == 5) || (temp == 6) || (temp == 11) || (temp == 24) || (temp == 29) || (temp == 30) || (temp == 31) || (temp == 34) || (temp == 35)) {&#xD;
            //NotTile found&#xD;
            return null;&#xD;
        } else {&#xD;
            return (StdTile) this.tile[row][col];&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZKe007XEeuHa4bUOfM2xQ" name="getAllNotSinkStdTile" specification="_vZJ3wk7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    ArrayList&lt;StdTile> tempTileList = new ArrayList&lt;StdTile>();&#xD;
    StdTile tempTile;&#xD;
    for (int id = 0; id &lt; 24; id++) {&#xD;
        tempTile = this.getStdTile(id);&#xD;
        if (tempTile.getStatus() != Status.SUNK)&#xD;
            tempTileList.add(tempTile);&#xD;
    }&#xD;
    return tempTileList;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZLs8U7XEeuHa4bUOfM2xQ" name="getCoord" specification="_vZLF4E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return tempTile.getCoord();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZM7EE7XEeuHa4bUOfM2xQ" name="getRow" specification="_vZMUAE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    int[] temp = tempTile.getCoord();&#xD;
    return temp[0];&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZP-YE7XEeuHa4bUOfM2xQ" name="getCol" specification="_vZOJME7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    int[] temp = tempTile.getCoord();&#xD;
    return temp[1];&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZP-Yk7XEeuHa4bUOfM2xQ" name="printCLILite" specification="_vZP-YU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //should be 5 elements only&#xD;
    ArrayList&lt;StringBuilder> lines1To5 = new ArrayList&lt;StringBuilder>();&#xD;
    for (int i = 0; i &lt; 5; i++) {&#xD;
        lines1To5.add(new StringBuilder(&quot;&quot;));&#xD;
    }&#xD;
    for (int i = 0; i &lt; 6; i++) {&#xD;
        for (int j = 0; j &lt; 6; j++) {&#xD;
            this.tile[i][j].printCLI(lines1To5);&#xD;
        }&#xD;
        for (int j = 0; j &lt; 5; j++) {&#xD;
            System.out.println(lines1To5.get(j));&#xD;
            lines1To5.get(j).delete(0, lines1To5.get(j).capacity());&#xD;
        }&#xD;
    }&#xD;
    this.printPlayersCLI();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZQlcU7XEeuHa4bUOfM2xQ" name="printWithAllCoord" specification="_vZQlcE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //should be 5 elements only&#xD;
    ArrayList&lt;StringBuilder> lines1To5 = new ArrayList&lt;StringBuilder>();&#xD;
    for (int i = 0; i &lt; 5; i++) {&#xD;
        lines1To5.add(new StringBuilder(&quot;&quot;));&#xD;
    }&#xD;
    for (int i = 0; i &lt; 6; i++) {&#xD;
        for (int j = 0; j &lt; 6; j++) {&#xD;
            this.tile[i][j].printCLI(lines1To5);&#xD;
            lines1To5.get(0).replace(3 + j * 9, 6 + j * 9, (i + &quot;,&quot; + j));&#xD;
        }&#xD;
        for (int j = 0; j &lt; 5; j++) {&#xD;
            System.out.println(lines1To5.get(j));&#xD;
            lines1To5.get(j).delete(0, lines1To5.get(j).capacity());&#xD;
        }&#xD;
    }&#xD;
    this.printPlayersCLI();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZRMgE7XEeuHa4bUOfM2xQ" name="printWithAllMeaningfulCoord" specification="_vZQlck7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.printWithCoordA(this.getAllNotSinkStdTile());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZRzk07XEeuHa4bUOfM2xQ" name="printWithCoordA" specification="_vZRMgU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (tempTileList == null) {&#xD;
        System.err.println(&quot;func printCLIWithCoordA ERR&quot;);&#xD;
        return;&#xD;
    }&#xD;
    ArrayList&lt;int[]> tempCoordList = new ArrayList&lt;int[]>();&#xD;
    for (StdTile i : tempTileList) {&#xD;
        tempCoordList.add(i.getCoord());&#xD;
    }&#xD;
    this.printWithCoordC(tempCoordList);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZSaok7XEeuHa4bUOfM2xQ" name="printWithCoordA" specification="_vZSaoE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (tempTileList == null) {&#xD;
        System.err.println(&quot;func printCLIWithCoordA ERR&quot;);&#xD;
        return;&#xD;
    }&#xD;
    ArrayList&lt;int[]> tempCoordList = new ArrayList&lt;int[]>();&#xD;
    for (StdTile i : tempTileList) {&#xD;
        tempCoordList.add(i.getCoord());&#xD;
    }&#xD;
    this.printWithCoordC(tempCoordList);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZTowk7XEeuHa4bUOfM2xQ" name="printWithCoordB" specification="_vZTBsE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    ArrayList&lt;int[]> tempCoordList = new ArrayList&lt;int[]>();&#xD;
    StdTile tempTile;&#xD;
    for (DirectionType i : directionList) {&#xD;
        tempTile = player.getDestination(this, i);&#xD;
        if (tempTile != null) {&#xD;
            tempCoordList.add(tempTile.getCoord());&#xD;
        }&#xD;
    }&#xD;
    this.printWithCoordC(tempCoordList);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZUP007XEeuHa4bUOfM2xQ" name="printWithCoordC" specification="_vZTow07XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (tempCoordList == null) {&#xD;
        System.err.println(&quot;func printCLIWithCoordC ERR&quot;);&#xD;
        return;&#xD;
    }&#xD;
    //should be 5 elements only&#xD;
    ArrayList&lt;StringBuilder> lines1To5 = new ArrayList&lt;StringBuilder>();&#xD;
    for (int i = 0; i &lt; 5; i++) {&#xD;
        lines1To5.add(new StringBuilder(&quot;&quot;));&#xD;
    }&#xD;
    for (int i = 0; i &lt; 6; i++) {&#xD;
        for (int j = 0; j &lt; 6; j++) {&#xD;
            this.tile[i][j].printCLI(lines1To5);&#xD;
            for (int[] k : tempCoordList) {&#xD;
                if ((k[0] == i) &amp;&amp; (k[1] == j))&#xD;
                    lines1To5.get(0).replace(3 + j * 9, 6 + j * 9, (i + &quot;,&quot; + j));&#xD;
            }&#xD;
        }&#xD;
        for (int j = 0; j &lt; 5; j++) {&#xD;
            System.out.println(lines1To5.get(j));&#xD;
            lines1To5.get(j).delete(0, lines1To5.get(j).capacity());&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZU24U7XEeuHa4bUOfM2xQ" name="printPlayersCLI" specification="_vZU24E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.playerList.size() == 0)&#xD;
        //no player&#xD;
        return;&#xD;
    for (StdRole player : this.playerList) {&#xD;
        player.printCLI();&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZWFAE7XEeuHa4bUOfM2xQ" name="getTile" specification="_vZVd8E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return tile;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vZWsEk7XEeuHa4bUOfM2xQ" name="setTile" specification="_vZWFAU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.tile = tile;&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vY0gkE7XEeuHa4bUOfM2xQ" name="Board" visibility="public" method="_vY3j4E7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vY4yAE7XEeuHa4bUOfM2xQ" name="getPlayerList" visibility="public" method="_vY7OQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vY5ZEE7XEeuHa4bUOfM2xQ" type="_gbieYE7WEeuHa4bUOfM2xQ" direction="return">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vY6AIE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vY6nME7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vY8cYE7XEeuHa4bUOfM2xQ" name="setPlayerList" visibility="public" method="_vY-RkU7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vY9DcE7XEeuHa4bUOfM2xQ" name="playerList" type="_gbieYE7WEeuHa4bUOfM2xQ">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vY9qgE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vY-RkE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vY_fsE7XEeuHa4bUOfM2xQ" name="init" visibility="public" method="_vZAGwE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZBU4E7XEeuHa4bUOfM2xQ" name="rearrange" visibility="public" method="_vZB78E7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZCjAE7XEeuHa4bUOfM2xQ" name="initCoord" visibility="private" method="_vZDKEE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZEYME7XEeuHa4bUOfM2xQ" name="getStdTile" visibility="public" method="_vZG0cE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZEYMU7XEeuHa4bUOfM2xQ" type="_gZ774E7WEeuHa4bUOfM2xQ" direction="return"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZFmUE7XEeuHa4bUOfM2xQ" name="id">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZIpoE7XEeuHa4bUOfM2xQ" name="coord">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vZJQsE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vZJQsU7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZJ3wE7XEeuHa4bUOfM2xQ" name="row">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZJ3wU7XEeuHa4bUOfM2xQ" name="col">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZJ3wk7XEeuHa4bUOfM2xQ" name="getAllNotSinkStdTile" visibility="public" method="_vZKe007XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZKe0E7XEeuHa4bUOfM2xQ" type="_gZ774E7WEeuHa4bUOfM2xQ" direction="return">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vZKe0U7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vZKe0k7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZLF4E7XEeuHa4bUOfM2xQ" name="getCoord" visibility="public" method="_vZLs8U7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZLF4U7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vZLF4k7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vZLF407XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZLs8E7XEeuHa4bUOfM2xQ" name="tempTile" type="_gZ774E7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZMUAE7XEeuHa4bUOfM2xQ" name="getRow" visibility="public" method="_vZM7EE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZMUAU7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZMUAk7XEeuHa4bUOfM2xQ" name="tempTile" type="_gZ774E7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZOJME7XEeuHa4bUOfM2xQ" name="getCol" visibility="public" method="_vZP-YE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZOwQE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZPXUE7XEeuHa4bUOfM2xQ" name="tempTile" type="_gZ774E7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZP-YU7XEeuHa4bUOfM2xQ" name="printCLILite" visibility="public" method="_vZP-Yk7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZQlcE7XEeuHa4bUOfM2xQ" name="printWithAllCoord" visibility="public" method="_vZQlcU7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZQlck7XEeuHa4bUOfM2xQ" name="printWithAllMeaningfulCoord" visibility="public" method="_vZRMgE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZRMgU7XEeuHa4bUOfM2xQ" name="printWithCoordA" visibility="public" method="_vZRzk07XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZRzkE7XEeuHa4bUOfM2xQ" name="tempTileList" type="_gZ774E7WEeuHa4bUOfM2xQ">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vZRzkU7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vZRzkk7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZSaoE7XEeuHa4bUOfM2xQ" name="printWithCoordA" visibility="public" method="_vZSaok7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZSaoU7XEeuHa4bUOfM2xQ" name="tempTileList" type="_gb5qwk7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZTBsE7XEeuHa4bUOfM2xQ" name="printWithCoordB" visibility="public" method="_vZTowk7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZTBsU7XEeuHa4bUOfM2xQ" name="directionList" type="_gb9VIE7WEeuHa4bUOfM2xQ">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vZTBsk7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vZTowE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZTowU7XEeuHa4bUOfM2xQ" name="player" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZTow07XEeuHa4bUOfM2xQ" name="printWithCoordC" visibility="public" method="_vZUP007XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZUP0E7XEeuHa4bUOfM2xQ" name="tempCoordList">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_ILxaUPaLEeW5KOK8aDMdgA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vZUP0U7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vZUP0k7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZU24E7XEeuHa4bUOfM2xQ" name="printPlayersCLI" visibility="public" method="_vZU24U7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZVd8E7XEeuHa4bUOfM2xQ" name="getTile" visibility="public" method="_vZWFAE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZVd8U7XEeuHa4bUOfM2xQ" type="_gbaikE7WEeuHa4bUOfM2xQ" direction="return">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vZVd8k7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vZVd807XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vZWFAU7XEeuHa4bUOfM2xQ" name="setTile" visibility="public" method="_vZWsEk7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vZWFAk7XEeuHa4bUOfM2xQ" name="tile" type="_gbaikE7WEeuHa4bUOfM2xQ">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vZWsEE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vZWsEU7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_vZiSQU7XEeuHa4bUOfM2xQ" name="treasure">
        <packagedElement xmi:type="uml:Enumeration" xmi:id="_vuo_kE7XEeuHa4bUOfM2xQ" name="TreasureType" visibility="public">
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vuqNsE7XEeuHa4bUOfM2xQ" name="FIRE"/>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vuq0wE7XEeuHa4bUOfM2xQ" name="WIND"/>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vurb0E7XEeuHa4bUOfM2xQ" name="CHALICE"/>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vusC4E7XEeuHa4bUOfM2xQ" name="STONE"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vpFxME7XEeuHa4bUOfM2xQ" name="Stone" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_vpG_UE7XEeuHa4bUOfM2xQ" general="_vpGYQE7XEeuHa4bUOfM2xQ"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vpLQwE7XEeuHa4bUOfM2xQ" name="Stone" specification="_vpINcE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.name = &quot;Stone&quot;;&#xD;
    this.treasureType = TreasureType.STONE;&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vpINcE7XEeuHa4bUOfM2xQ" name="Stone" visibility="public" method="_vpLQwE7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vpGYQE7XEeuHa4bUOfM2xQ" name="Treasure" visibility="public" isAbstract="true">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vpMe4E7XEeuHa4bUOfM2xQ" name="name" visibility="protected" type="_eKOjE07WEeuHa4bUOfM2xQ" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vpNF8E7XEeuHa4bUOfM2xQ" name="treasureType" visibility="protected" type="_vuo_kE7XEeuHa4bUOfM2xQ" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vpOUEE7XEeuHa4bUOfM2xQ" name="currRole" visibility="protected" type="_vklEoE7XEeuHa4bUOfM2xQ" isUnique="false"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vpRXYE7XEeuHa4bUOfM2xQ" name="Treasure" specification="_vpOUEU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    ;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vpTzoE7XEeuHa4bUOfM2xQ" name="getName" specification="_vpR-cE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return name;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vpVBwE7XEeuHa4bUOfM2xQ" name="getTreasureType" specification="_vpUasE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return treasureType;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vpVBw07XEeuHa4bUOfM2xQ" name="getCurrRole" specification="_vpVBwU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return currRole;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vpW28E7XEeuHa4bUOfM2xQ" name="setCurrRole" specification="_vpVo0E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.currRole = currRole;&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vpOUEU7XEeuHa4bUOfM2xQ" name="Treasure" visibility="public" method="_vpRXYE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vpR-cE7XEeuHa4bUOfM2xQ" name="getName" visibility="public" method="_vpTzoE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vpTMkE7XEeuHa4bUOfM2xQ" type="_eKOjE07WEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vpUasE7XEeuHa4bUOfM2xQ" name="getTreasureType" visibility="public" method="_vpVBwE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vpUasU7XEeuHa4bUOfM2xQ" type="_vuo_kE7XEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vpVBwU7XEeuHa4bUOfM2xQ" name="getCurrRole" visibility="public" method="_vpVBw07XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vpVBwk7XEeuHa4bUOfM2xQ" type="_vklEoE7XEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vpVo0E7XEeuHa4bUOfM2xQ" name="setCurrRole" visibility="public" method="_vpW28E7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vpWP4E7XEeuHa4bUOfM2xQ" name="currRole" type="_vklEoE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vpYsIE7XEeuHa4bUOfM2xQ" name="Chalice" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_vpZTME7XEeuHa4bUOfM2xQ" general="_vpGYQE7XEeuHa4bUOfM2xQ"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vpc9kE7XEeuHa4bUOfM2xQ" name="Chalice" specification="_vpZ6QE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.name = &quot;Chalice&quot;;&#xD;
    this.treasureType = TreasureType.CHALICE;&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vpZ6QE7XEeuHa4bUOfM2xQ" name="Chalice" visibility="public" method="_vpc9kE7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vut4EE7XEeuHa4bUOfM2xQ" name="Wind" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_vuufIE7XEeuHa4bUOfM2xQ" general="_vpGYQE7XEeuHa4bUOfM2xQ"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vuz-sE7XEeuHa4bUOfM2xQ" name="Wind" specification="_vuvGME7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.name = &quot;Wind&quot;;&#xD;
    this.treasureType = TreasureType.WIND;&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vuvGME7XEeuHa4bUOfM2xQ" name="Wind" visibility="public" method="_vuz-sE7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vu1z4E7XEeuHa4bUOfM2xQ" name="Fire" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_vu2a8E7XEeuHa4bUOfM2xQ" general="_vpGYQE7XEeuHa4bUOfM2xQ"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vu6sYE7XEeuHa4bUOfM2xQ" name="Fire" specification="_vu3CAE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.name = &quot;Fire&quot;;&#xD;
    this.treasureType = TreasureType.FIRE;&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vu3CAE7XEeuHa4bUOfM2xQ" name="Fire" visibility="public" method="_vu6sYE7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_vZl8oU7XEeuHa4bUOfM2xQ" name="deck">
        <packagedElement xmi:type="uml:Package" xmi:id="_vZnKwE7XEeuHa4bUOfM2xQ" name="treasureCard">
          <packagedElement xmi:type="uml:Class" xmi:id="_vZnx0E7XEeuHa4bUOfM2xQ" name="TreasureCard" visibility="public">
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vfH84E7XEeuHa4bUOfM2xQ" name="name" visibility="protected" type="_eKOjE07WEeuHa4bUOfM2xQ" isUnique="false"/>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_vfJLAE7XEeuHa4bUOfM2xQ" name="treasureType" visibility="protected" type="_vuo_kE7XEeuHa4bUOfM2xQ" isUnique="false"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vfODgE7XEeuHa4bUOfM2xQ" name="TreasureCard" specification="_vfKZIE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    ;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vfP4sE7XEeuHa4bUOfM2xQ" name="printCLI" specification="_vfPRoE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    System.out.println(this.name);&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vfS8AE7XEeuHa4bUOfM2xQ" name="getName" specification="_vfRt4E7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return this.name;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vfVYQU7XEeuHa4bUOfM2xQ" name="setName" specification="_vfUKIE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.name = name;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vfWmYE7XEeuHa4bUOfM2xQ" name="getTreasureType" specification="_vfVYQk7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return treasureType;&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vfKZIE7XEeuHa4bUOfM2xQ" name="TreasureCard" visibility="public" method="_vfODgE7XEeuHa4bUOfM2xQ"/>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vfPRoE7XEeuHa4bUOfM2xQ" name="printCLI" visibility="public" method="_vfP4sE7XEeuHa4bUOfM2xQ"/>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vfRt4E7XEeuHa4bUOfM2xQ" name="getName" visibility="public" method="_vfS8AE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vfSU8E7XEeuHa4bUOfM2xQ" type="_eKOjE07WEeuHa4bUOfM2xQ" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vfUKIE7XEeuHa4bUOfM2xQ" name="setName" visibility="public" method="_vfVYQU7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vfVYQE7XEeuHa4bUOfM2xQ" name="name" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vfVYQk7XEeuHa4bUOfM2xQ" name="getTreasureType" visibility="public" method="_vfWmYE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vfV_UE7XEeuHa4bUOfM2xQ" type="_vuo_kE7XEeuHa4bUOfM2xQ" direction="return"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_vedOgE7XEeuHa4bUOfM2xQ" name="StoneCard" visibility="public">
            <generalization xmi:type="uml:Generalization" xmi:id="_ved1kE7XEeuHa4bUOfM2xQ" general="_vZnx0E7XEeuHa4bUOfM2xQ"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_veg44E7XEeuHa4bUOfM2xQ" name="StoneCard" specification="_veecoE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.name = &quot;Stone Card&quot;;&#xD;
    this.treasureType = TreasureType.STONE;&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_veecoE7XEeuHa4bUOfM2xQ" name="StoneCard" visibility="public" method="_veg44E7XEeuHa4bUOfM2xQ"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_vejVIE7XEeuHa4bUOfM2xQ" name="FireCard" visibility="public">
            <generalization xmi:type="uml:Generalization" xmi:id="_vej8ME7XEeuHa4bUOfM2xQ" general="_vZnx0E7XEeuHa4bUOfM2xQ"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_veoNoE7XEeuHa4bUOfM2xQ" name="FireCard" specification="_vekjQE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.name = &quot;Fire Card&quot;;&#xD;
    this.treasureType = TreasureType.FIRE;&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vekjQE7XEeuHa4bUOfM2xQ" name="FireCard" visibility="public" method="_veoNoE7XEeuHa4bUOfM2xQ"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_verQ8E7XEeuHa4bUOfM2xQ" name="ChaliceCard" visibility="public">
            <generalization xmi:type="uml:Generalization" xmi:id="_ver4AE7XEeuHa4bUOfM2xQ" general="_vZnx0E7XEeuHa4bUOfM2xQ"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vewwgE7XEeuHa4bUOfM2xQ" name="ChaliceCard" specification="_vesfEE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.name = &quot;Chalice Card&quot;;&#xD;
    this.treasureType = TreasureType.CHALICE;&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vesfEE7XEeuHa4bUOfM2xQ" name="ChaliceCard" visibility="public" method="_vewwgE7XEeuHa4bUOfM2xQ"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_veylsE7XEeuHa4bUOfM2xQ" name="WindCard" visibility="public">
            <generalization xmi:type="uml:Generalization" xmi:id="_vezz0E7XEeuHa4bUOfM2xQ" general="_vZnx0E7XEeuHa4bUOfM2xQ"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ve4sUE7XEeuHa4bUOfM2xQ" name="WindCard" specification="_ve0a4E7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.name = &quot;Wind Card&quot;;&#xD;
    this.treasureType = TreasureType.WIND;&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_ve0a4E7XEeuHa4bUOfM2xQ" name="WindCard" visibility="public" method="_ve4sUE7XEeuHa4bUOfM2xQ"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_ve7IkE7XEeuHa4bUOfM2xQ" name="HelicopterLift" visibility="public">
            <generalization xmi:type="uml:Generalization" xmi:id="_ve7voE7XEeuHa4bUOfM2xQ" general="_vZnx0E7XEeuHa4bUOfM2xQ"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vfAoIE7XEeuHa4bUOfM2xQ" name="HelicopterLift" specification="_ve89wE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.name = &quot;Helicopter Lift&quot;;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vfE5kE7XEeuHa4bUOfM2xQ" name="use" specification="_vfB2QE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    if (Options.ifHelicopterLiftPlayerShouldAtTheSameTile) {&#xD;
        for (StdRole i : startTile.getPlayers()) {&#xD;
            destination.playerComes(i);&#xD;
        }&#xD;
        startTile.playerAllLeaves();&#xD;
    } else {&#xD;
        for (StdRole i : players) {&#xD;
            i.getCurrStdTile().playerLeaves(i);&#xD;
            destination.playerComes(i);&#xD;
        }&#xD;
    }&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_ve89wE7XEeuHa4bUOfM2xQ" name="HelicopterLift" visibility="public" method="_vfAoIE7XEeuHa4bUOfM2xQ"/>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vfB2QE7XEeuHa4bUOfM2xQ" name="use" visibility="public" isStatic="true" method="_vfE5kE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vfCdUE7XEeuHa4bUOfM2xQ" name="players" type="_gb5qwk7WEeuHa4bUOfM2xQ"/>
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vfDEYE7XEeuHa4bUOfM2xQ" name="startTile" type="_vZhrME7XEeuHa4bUOfM2xQ"/>
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vfESgE7XEeuHa4bUOfM2xQ" name="destination" type="_vZhrME7XEeuHa4bUOfM2xQ"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_vfYbkE7XEeuHa4bUOfM2xQ" name="Sandbags" visibility="public">
            <generalization xmi:type="uml:Generalization" xmi:id="_vfZCoE7XEeuHa4bUOfM2xQ" general="_vZnx0E7XEeuHa4bUOfM2xQ"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vfcF8E7XEeuHa4bUOfM2xQ" name="Sandbags" specification="_vfZpsE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.name = &quot;Sandbags&quot;;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vffwUE7XEeuHa4bUOfM2xQ" name="use" specification="_vfdUEE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    return destination.storeUp();&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vfZpsE7XEeuHa4bUOfM2xQ" name="Sandbags" visibility="public" method="_vfcF8E7XEeuHa4bUOfM2xQ"/>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vfdUEE7XEeuHa4bUOfM2xQ" name="use" visibility="public" isStatic="true" method="_vffwUE7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vfeiME7XEeuHa4bUOfM2xQ" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              </ownedParameter>
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vfeiMU7XEeuHa4bUOfM2xQ" name="destination" type="_vZhrME7XEeuHa4bUOfM2xQ"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_vfhlgE7XEeuHa4bUOfM2xQ" name="WaterRise" visibility="public">
            <generalization xmi:type="uml:Generalization" xmi:id="_vfiMkE7XEeuHa4bUOfM2xQ" general="_vZnx0E7XEeuHa4bUOfM2xQ"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vfl28E7XEeuHa4bUOfM2xQ" name="WaterRise" specification="_vfjasE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.name = &quot;Water Rise&quot;;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vfphUU7XEeuHa4bUOfM2xQ" name="use" specification="_vfoTME7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    floodDeck.shuffle(usedFloodDeck);&#xD;
    waterMeter.addMeter();&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vfjasE7XEeuHa4bUOfM2xQ" name="WaterRise" visibility="public" method="_vfl28E7XEeuHa4bUOfM2xQ"/>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_vfoTME7XEeuHa4bUOfM2xQ" name="use" visibility="public" isStatic="true" method="_vfphUU7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vfo6QE7XEeuHa4bUOfM2xQ" name="floodDeck" type="_vdiogE7XEeuHa4bUOfM2xQ"/>
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vfo6QU7XEeuHa4bUOfM2xQ" name="usedFloodDeck" type="_vdiogE7XEeuHa4bUOfM2xQ"/>
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_vfphUE7XEeuHa4bUOfM2xQ" name="waterMeter" type="_vfnsIE7XEeuHa4bUOfM2xQ"/>
            </ownedOperation>
          </packagedElement>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vdiogE7XEeuHa4bUOfM2xQ" name="FloodDeck" visibility="public">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vdm58E7XEeuHa4bUOfM2xQ" name="st" visibility="protected" type="_vdj2oE7XEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vdnhAE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Stack&lt;FloodCard>()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vdrycE7XEeuHa4bUOfM2xQ" name="FloodDeck" specification="_vdoIEE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    ;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vdtAkE7XEeuHa4bUOfM2xQ" name="getStack" specification="_vdsZgE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return st;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vdtnoE7XEeuHa4bUOfM2xQ" name="setStack" specification="_vdtAkU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.st = st;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vduOsE7XEeuHa4bUOfM2xQ" name="init" specification="_vdtnoU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //init FloodCard&#xD;
    ArrayList&lt;FloodCard> beforeRandomizeFloodCardList = new ArrayList&lt;FloodCard>();&#xD;
    //24 Tile in tot&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(0).getName(), board.getStdTile(0)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(1).getName(), board.getStdTile(1)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(2).getName(), board.getStdTile(2)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(3).getName(), board.getStdTile(3)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(4).getName(), board.getStdTile(4)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(5).getName(), board.getStdTile(5)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(6).getName(), board.getStdTile(6)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(7).getName(), board.getStdTile(7)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(8).getName(), board.getStdTile(8)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(9).getName(), board.getStdTile(9)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(10).getName(), board.getStdTile(10)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(11).getName(), board.getStdTile(11)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(12).getName(), board.getStdTile(12)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(13).getName(), board.getStdTile(13)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(14).getName(), board.getStdTile(14)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(15).getName(), board.getStdTile(15)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(16).getName(), board.getStdTile(16)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(17).getName(), board.getStdTile(17)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(18).getName(), board.getStdTile(18)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(19).getName(), board.getStdTile(19)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(20).getName(), board.getStdTile(20)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(21).getName(), board.getStdTile(21)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(22).getName(), board.getStdTile(22)));&#xD;
    beforeRandomizeFloodCardList.add(new FloodCard(board.getStdTile(23).getName(), board.getStdTile(23)));&#xD;
    //rearrange tiles&#xD;
    ArrayList&lt;Integer> tempList2 = new ArrayList&lt;Integer>();&#xD;
    for (int i = 0; i &lt; 10 + 8 + 6; i++) {&#xD;
        tempList2.add(i);&#xD;
    }&#xD;
    for (int i = 0; i &lt; 10 + 8 + 6; i++) {&#xD;
        this.st.push(beforeRandomizeFloodCardList.get(tempList2.remove(new Random().nextInt(tempList2.size()))));&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vdu1wU7XEeuHa4bUOfM2xQ" name="useCard" specification="_vduOsU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (//if empty&#xD;
    this.st.empty()) {&#xD;
        //shuffle the FloodCardDeck&#xD;
        shuffle(UsedFDeck);&#xD;
    }&#xD;
    UsedFDeck.getStack().push(this.st.peek());&#xD;
    this.st.pop().useCard();&#xD;
    if (//if empty&#xD;
    this.st.empty()) {&#xD;
        //shuffle the FloodCardDeck&#xD;
        shuffle(UsedFDeck);&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vdvc0k7XEeuHa4bUOfM2xQ" name="shuffle" specification="_vdvc0E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    ArrayList&lt;FloodCard> beforeRandomizeFloodCardList = new ArrayList&lt;FloodCard>();&#xD;
    for (FloodCard i : UsedFDeck.getStack()) {&#xD;
        beforeRandomizeFloodCardList.add(i);&#xD;
    }&#xD;
    //shuffle&#xD;
    ArrayList&lt;Integer> tempList2 = new ArrayList&lt;Integer>();&#xD;
    for (int i = 0; i &lt; beforeRandomizeFloodCardList.size(); i++) {&#xD;
        tempList2.add(i);&#xD;
    }&#xD;
    for (int i = 0; i &lt; beforeRandomizeFloodCardList.size(); i++) {&#xD;
        this.st.push(beforeRandomizeFloodCardList.get(tempList2.remove(new Random().nextInt(tempList2.size()))));&#xD;
    }&#xD;
    while (!UsedFDeck.getStack().empty()) {&#xD;
        UsedFDeck.getStack().pop();&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vdwD4U7XEeuHa4bUOfM2xQ" name="printCLI" specification="_vdwD4E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    System.out.println();&#xD;
    for (FloodCard i : this.st) {&#xD;
        i.printCLI();&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vdoIEE7XEeuHa4bUOfM2xQ" name="FloodDeck" visibility="public" method="_vdrycE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vdsZgE7XEeuHa4bUOfM2xQ" name="getStack" visibility="public" method="_vdtAkE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vdsZgU7XEeuHa4bUOfM2xQ" type="_vdj2oE7XEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vdtAkU7XEeuHa4bUOfM2xQ" name="setStack" visibility="public" method="_vdtnoE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vdtAkk7XEeuHa4bUOfM2xQ" name="st" type="_vdj2oE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vdtnoU7XEeuHa4bUOfM2xQ" name="init" visibility="public" method="_vduOsE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vdtnok7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vduOsU7XEeuHa4bUOfM2xQ" name="useCard" visibility="public" method="_vdu1wU7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vdu1wE7XEeuHa4bUOfM2xQ" name="UsedFDeck" type="_vdiogE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vdvc0E7XEeuHa4bUOfM2xQ" name="shuffle" visibility="public" method="_vdvc0k7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vdvc0U7XEeuHa4bUOfM2xQ" name="UsedFDeck" type="_vdiogE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vdwD4E7XEeuHa4bUOfM2xQ" name="printCLI" visibility="public" method="_vdwD4U7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vdzuQE7XEeuHa4bUOfM2xQ" name="TreasureDeck" visibility="public">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vd08YE7XEeuHa4bUOfM2xQ" name="st" visibility="protected" type="_vdj2oE7XEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vd2KgE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Stack&lt;TreasureCard>()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vd504E7XEeuHa4bUOfM2xQ" name="TreasureDeck" specification="_vd2xkE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    ;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vd7DAE7XEeuHa4bUOfM2xQ" name="getStack" specification="_vd504U7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return st;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vd-tYE7XEeuHa4bUOfM2xQ" name="setStack" specification="_vd8RIE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.st = st;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_veBJoE7XEeuHa4bUOfM2xQ" name="init" specification="_vd_7gE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    HelicopterLift[] helicopterLift = { new HelicopterLift(), new HelicopterLift(), new HelicopterLift() };&#xD;
    Sandbags[] sandbags = { new Sandbags(), new Sandbags() };&#xD;
    WaterRise[] waterRise = { new WaterRise(), new WaterRise(), new WaterRise() };&#xD;
    ChaliceCard[] chaliceCard = { new ChaliceCard(), new ChaliceCard(), new ChaliceCard(), new ChaliceCard(), new ChaliceCard() };&#xD;
    FireCard[] fireCard = { new FireCard(), new FireCard(), new FireCard(), new FireCard(), new FireCard() };&#xD;
    StoneCard[] stoneCard = { new StoneCard(), new StoneCard(), new StoneCard(), new StoneCard(), new StoneCard() };&#xD;
    WindCard[] windCard = { new WindCard(), new WindCard(), new WindCard(), new WindCard(), new WindCard() };&#xD;
    ArrayList&lt;Integer> tempList5 = new ArrayList&lt;Integer>();&#xD;
    for (int i = 0; i &lt; 3 + 2 + 3 + (4 * 5); i++) {&#xD;
        tempList5.add(i);&#xD;
    }&#xD;
    ArrayList&lt;TreasureCard> tempTreasureCardList = new ArrayList&lt;TreasureCard>();&#xD;
    for (int i = 0; i &lt; 3; i++) {&#xD;
        tempTreasureCardList.add(helicopterLift[i]);&#xD;
    }&#xD;
    for (int i = 0; i &lt; 2; i++) {&#xD;
        tempTreasureCardList.add(sandbags[i]);&#xD;
    }&#xD;
    for (int i = 0; i &lt; 3; i++) {&#xD;
        tempTreasureCardList.add(waterRise[i]);&#xD;
    }&#xD;
    for (int i = 0; i &lt; 5; i++) {&#xD;
        tempTreasureCardList.add(chaliceCard[i]);&#xD;
        tempTreasureCardList.add(fireCard[i]);&#xD;
        tempTreasureCardList.add(stoneCard[i]);&#xD;
        tempTreasureCardList.add(windCard[i]);&#xD;
    }&#xD;
    for (int i = 0; i &lt; 3 + 2 + 3 + (4 * 5); i++) {&#xD;
        this.st.push(tempTreasureCardList.get(tempList5.remove(new Random().nextInt(tempList5.size()))));&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_veDl4E7XEeuHa4bUOfM2xQ" name="isStackEmpty" specification="_veCXwE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.getStack().empty();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_veGCIE7XEeuHa4bUOfM2xQ" name="popCard" specification="_veE0AE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.getStack().empty()) {&#xD;
        System.err.println(&quot;stack empty&quot;);&#xD;
        return null;&#xD;
    } else {&#xD;
        return this.getStack().pop();&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_veJFcE7XEeuHa4bUOfM2xQ" name="pushCard" specification="_veH3UE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.getStack().push(card);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_veK6oE7XEeuHa4bUOfM2xQ" name="shuffle" specification="_veJsgE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if ((!UsedTDeck.getStack().empty()) &amp;&amp; (this.getStack().empty())) {&#xD;
        ArrayList&lt;TreasureCard> beforeRandomizeTreasureCardList = new ArrayList&lt;TreasureCard>();&#xD;
        for (TreasureCard i : UsedTDeck.getStack()) {&#xD;
            beforeRandomizeTreasureCardList.add(i);&#xD;
        }&#xD;
        //shuffle&#xD;
        ArrayList&lt;Integer> tempList2 = new ArrayList&lt;Integer>();&#xD;
        for (int i = 0; i &lt; beforeRandomizeTreasureCardList.size(); i++) {&#xD;
            tempList2.add(i);&#xD;
        }&#xD;
        for (int i = 0; i &lt; beforeRandomizeTreasureCardList.size(); i++) {&#xD;
            this.st.push(beforeRandomizeTreasureCardList.get(tempList2.remove(new Random().nextInt(tempList2.size()))));&#xD;
        }&#xD;
        while (!UsedTDeck.getStack().empty()) {&#xD;
            UsedTDeck.getStack().pop();&#xD;
        }&#xD;
        return true;&#xD;
    } else {&#xD;
        return false;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_veMv0E7XEeuHa4bUOfM2xQ" name="printCLI" specification="_veMIwE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    System.out.println();&#xD;
    for (TreasureCard i : this.st) {&#xD;
        i.printCLI();&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vd2xkE7XEeuHa4bUOfM2xQ" name="TreasureDeck" visibility="public" method="_vd504E7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vd504U7XEeuHa4bUOfM2xQ" name="getStack" visibility="public" method="_vd7DAE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vd6b8E7XEeuHa4bUOfM2xQ" type="_vdj2oE7XEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vd8RIE7XEeuHa4bUOfM2xQ" name="setStack" visibility="public" method="_vd-tYE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vd-GUE7XEeuHa4bUOfM2xQ" name="st" type="_vdj2oE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vd_7gE7XEeuHa4bUOfM2xQ" name="init" visibility="public" method="_veBJoE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_veCXwE7XEeuHa4bUOfM2xQ" name="isStackEmpty" visibility="public" method="_veDl4E7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_veC-0E7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_veE0AE7XEeuHa4bUOfM2xQ" name="popCard" visibility="public" method="_veGCIE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_veFbEE7XEeuHa4bUOfM2xQ" type="_vZnx0E7XEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_veH3UE7XEeuHa4bUOfM2xQ" name="pushCard" visibility="public" method="_veJFcE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_veIeYE7XEeuHa4bUOfM2xQ" name="card" type="_vZnx0E7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_veJsgE7XEeuHa4bUOfM2xQ" name="shuffle" visibility="public" method="_veK6oE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_veJsgU7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_veKTkE7XEeuHa4bUOfM2xQ" name="UsedTDeck" type="_vdzuQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_veMIwE7XEeuHa4bUOfM2xQ" name="printCLI" visibility="public" method="_veMv0E7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_veOlAE7XEeuHa4bUOfM2xQ" name="floodCard">
          <packagedElement xmi:type="uml:Class" xmi:id="_vePzIE7XEeuHa4bUOfM2xQ" name="FloodCard" visibility="public">
            <ownedAttribute xmi:type="uml:Property" xmi:id="_veRBQE7XEeuHa4bUOfM2xQ" name="name" visibility="protected" type="_eKOjE07WEeuHa4bUOfM2xQ" isUnique="false"/>
            <ownedAttribute xmi:type="uml:Property" xmi:id="_veSPYE7XEeuHa4bUOfM2xQ" name="stdTile" visibility="protected" type="_vZhrME7XEeuHa4bUOfM2xQ" isUnique="false"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_veXu8E7XEeuHa4bUOfM2xQ" name="FloodCard" specification="_veS2cE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    this.name = name;&#xD;
    this.stdTile = stdTile;&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_veZkIE7XEeuHa4bUOfM2xQ" name="useCard" specification="_veY9EE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    System.out.print(this.stdTile.getName());&#xD;
    int[] tempCoord = this.stdTile.getCoord();&#xD;
    System.out.print(&quot; (&quot; + tempCoord[0] + &quot;,&quot; + tempCoord[1] + &quot;)&quot;);&#xD;
    this.stdTile.flood();&#xD;
    if (//FLOODED, SUNK&#xD;
    this.stdTile.getStatus() == Status.FLOODED) {&#xD;
        System.out.println(&quot; flood more...&quot;);&#xD;
    } else if (this.stdTile.getStatus() == Status.SUNK) {&#xD;
        System.out.println(&quot; has sunk!!&quot;);&#xD;
    }&#xD;
</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vecAYE7XEeuHa4bUOfM2xQ" name="printCLI" specification="_veayQE7XEeuHa4bUOfM2xQ">
              <language>JAVA</language>
              <body>&#xD;
    System.out.println(this.name);&#xD;
</body>
            </ownedBehavior>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_veS2cE7XEeuHa4bUOfM2xQ" name="FloodCard" visibility="public" method="_veXu8E7XEeuHa4bUOfM2xQ">
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_veWg0E7XEeuHa4bUOfM2xQ" name="name" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
              <ownedParameter xmi:type="uml:Parameter" xmi:id="_veXH4E7XEeuHa4bUOfM2xQ" name="stdTile" type="_vZhrME7XEeuHa4bUOfM2xQ"/>
            </ownedOperation>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_veY9EE7XEeuHa4bUOfM2xQ" name="useCard" visibility="public" method="_veZkIE7XEeuHa4bUOfM2xQ"/>
            <ownedOperation xmi:type="uml:Operation" xmi:id="_veayQE7XEeuHa4bUOfM2xQ" name="printCLI" visibility="public" method="_vecAYE7XEeuHa4bUOfM2xQ"/>
          </packagedElement>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_vfnFEE7XEeuHa4bUOfM2xQ" name="waterMeter">
        <packagedElement xmi:type="uml:Class" xmi:id="_vfnsIE7XEeuHa4bUOfM2xQ" name="WaterMeter" visibility="public">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vu9IoE7XEeuHa4bUOfM2xQ" name="meter" visibility="protected" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vu9vsE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>-1</body>
            </defaultValue>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vvCBIE7XEeuHa4bUOfM2xQ" name="WaterMeter" specification="_vu-WwE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    ;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vvFrgE7XEeuHa4bUOfM2xQ" name="setWaterMeter" specification="_vvD2UE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.meter = meter;&#xD;
//waterMeter(1~10)&#xD;
//waterLevel(2~5)&#xD;
//waterMeter  waterLevel  difficulty&#xD;
//     1           2         Novice&#xD;
//     2           2         Normal&#xD;
//     3           3         Elite&#xD;
//     4           3         Legendary&#xD;
//     5           3&#xD;
//     6           4&#xD;
//     7           4&#xD;
//     8           5&#xD;
//     9           5&#xD;
//     10          Game Over :X&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vvIHwE7XEeuHa4bUOfM2xQ" name="getMeter" specification="_vvGSkE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.meter;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vvJV4E7XEeuHa4bUOfM2xQ" name="getLevel" specification="_vvIHwU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    switch(this.meter) {&#xD;
        case 1:&#xD;
        case 2:&#xD;
            return 2;&#xD;
        case 3:&#xD;
        case 4:&#xD;
        case 5:&#xD;
            return 3;&#xD;
        case 6:&#xD;
        case 7:&#xD;
            return 4;&#xD;
        case 8:&#xD;
        case 9:&#xD;
            return 5;&#xD;
        case 10:&#xD;
        case 11:&#xD;
            //Game Over&#xD;
            return 6;&#xD;
        default:&#xD;
            //ERROR&#xD;
            return -1;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vvLyIE7XEeuHa4bUOfM2xQ" name="printCLI" specification="_vvKkAE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    System.out.println(&quot;[Current Water Meter = &quot; + this.meter + &quot;]&quot;);&#xD;
    System.out.println(&quot;[Current Water Level = &quot; + this.getLevel() + &quot;]&quot;);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vvNnUE7XEeuHa4bUOfM2xQ" name="addMeter" specification="_vvNAQE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.meter++;&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vu-WwE7XEeuHa4bUOfM2xQ" name="WaterMeter" visibility="public" method="_vvCBIE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vvD2UE7XEeuHa4bUOfM2xQ" name="setWaterMeter" visibility="public" method="_vvFrgE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vvEdYE7XEeuHa4bUOfM2xQ" name="meter">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vvGSkE7XEeuHa4bUOfM2xQ" name="getMeter" visibility="public" method="_vvIHwE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vvHgsE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vvIHwU7XEeuHa4bUOfM2xQ" name="getLevel" visibility="public" method="_vvJV4E7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vvIu0E7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vvKkAE7XEeuHa4bUOfM2xQ" name="printCLI" visibility="public" method="_vvLyIE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vvNAQE7XEeuHa4bUOfM2xQ" name="addMeter" visibility="public" method="_vvNnUE7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_vfzSUE7XEeuHa4bUOfM2xQ" name="facade">
        <packagedElement xmi:type="uml:Interface" xmi:id="_vf0gcE7XEeuHa4bUOfM2xQ" name="MyOutput" visibility="public">
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vf1HgE7XEeuHa4bUOfM2xQ" name="printCardListForUse" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vf1HgU7XEeuHa4bUOfM2xQ" name="selectedPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vf1Hgk7XEeuHa4bUOfM2xQ" name="printCardListForDrop" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vf1ukE7XEeuHa4bUOfM2xQ" name="selectedPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vf1ukU7XEeuHa4bUOfM2xQ" name="printPlayerListForChoose" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vf2VoE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vf2VoU7XEeuHa4bUOfM2xQ" name="printPlayerListForChoose" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vf28sE7XEeuHa4bUOfM2xQ" name="playerList" type="_gbieYE7WEeuHa4bUOfM2xQ">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vf28sU7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vf28sk7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vf3jwE7XEeuHa4bUOfM2xQ" name="printMoveMenu" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vf3jwU7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vf4K0E7XEeuHa4bUOfM2xQ" name="moveFlag">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_f-GnEPaLEeW5KOK8aDMdgA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vf4K0U7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vf4x4E7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vf5Y8E7XEeuHa4bUOfM2xQ" name="selectedPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vf6AAE7XEeuHa4bUOfM2xQ" name="printStoreUpMenu" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vf7OIE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vf8cQE7XEeuHa4bUOfM2xQ" name="moveFlag">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_f-GnEPaLEeW5KOK8aDMdgA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vf9DUE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vf9qYE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vf-RcE7XEeuHa4bUOfM2xQ" name="selectedPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vf-4gE7XEeuHa4bUOfM2xQ" name="printMenu" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgDxAE7XEeuHa4bUOfM2xQ" type="_vgAGoE7XEeuHa4bUOfM2xQ" direction="return">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vgEYEE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vgE_IE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgFmME7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgG0UE7XEeuHa4bUOfM2xQ" name="selectedPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgHbYE7XEeuHa4bUOfM2xQ" name="currPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vgIpgE7XEeuHa4bUOfM2xQ" name="printMove" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgJQkE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_f-GnEPaLEeW5KOK8aDMdgA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vgJ3oE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vgJ3oU7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgKesE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgLs0E7XEeuHa4bUOfM2xQ" name="selectedPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgMT4E7XEeuHa4bUOfM2xQ" name="ifNoAP">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vgM68E7XEeuHa4bUOfM2xQ" name="printShoreUp" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgOJEE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_f-GnEPaLEeW5KOK8aDMdgA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vgOwIE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vgPXME7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgP-QE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgQlUE7XEeuHa4bUOfM2xQ" name="selectedPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgRMYE7XEeuHa4bUOfM2xQ" name="ifNoAP">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vgRzcE7XEeuHa4bUOfM2xQ" name="printPassCard" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgSagE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_f-GnEPaLEeW5KOK8aDMdgA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vgTBkE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vgTooE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgUPsE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgU2wE7XEeuHa4bUOfM2xQ" name="selectedPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgVd0E7XEeuHa4bUOfM2xQ" name="ifNoAP">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vgWE4E7XEeuHa4bUOfM2xQ" name="printCaptureTreasure" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgXTAE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_f-GnEPaLEeW5KOK8aDMdgA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vgX6EE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vgX6EU7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgX6Ek7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgX6E07XEeuHa4bUOfM2xQ" name="selectedPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgYhIE7XEeuHa4bUOfM2xQ" name="ifNoAP">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vgZIME7XEeuHa4bUOfM2xQ" name="printUseCard" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgZvQE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_f-GnEPaLEeW5KOK8aDMdgA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vgaWUE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vga9YE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgbkcE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgcykE7XEeuHa4bUOfM2xQ" name="selectedPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vgdZoE7XEeuHa4bUOfM2xQ" name="printUseAbility" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgeAsE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_f-GnEPaLEeW5KOK8aDMdgA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vgenwE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vgenwU7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgenwk7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgf14E7XEeuHa4bUOfM2xQ" name="selectedPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vggc8E7XEeuHa4bUOfM2xQ" name="ifNoAP">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vghEAE7XEeuHa4bUOfM2xQ" name="printEnd" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vghrEE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_f-GnEPaLEeW5KOK8aDMdgA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vgiSIE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vgi5ME7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgjgQE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgkHUE7XEeuHa4bUOfM2xQ" name="selectedPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgkuYE7XEeuHa4bUOfM2xQ" name="ifNoAP">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgl8gE7XEeuHa4bUOfM2xQ" name="currPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_vgrcEE7XEeuHa4bUOfM2xQ" name="MyInput" visibility="public">
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vgsDIE7XEeuHa4bUOfM2xQ" name="inputAnything" visibility="private" isStatic="true" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vgyw0E7XEeuHa4bUOfM2xQ" name="inputMultipleOneDigitNumber" visibility="private" isStatic="true" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vgz-8E7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_ILxaUPaLEeW5KOK8aDMdgA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vg0mAE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vg0mAU7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vg1NEE7XEeuHa4bUOfM2xQ" name="hint" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vg2bME7XEeuHa4bUOfM2xQ" name="validNumList">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_ILxaUPaLEeW5KOK8aDMdgA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vg3CQE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vg3pUE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vg43cE7XEeuHa4bUOfM2xQ" name="inputOneDigitNumber" visibility="private" isStatic="true" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vg6FkE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vg7TsE7XEeuHa4bUOfM2xQ" name="hint" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vg76wE7XEeuHa4bUOfM2xQ" name="minValidNum">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vg8h0E7XEeuHa4bUOfM2xQ" name="maxValidNum">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vg-XAE7XEeuHa4bUOfM2xQ" name="inputOneDigitNumber" visibility="private" isStatic="true" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vg--EE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhAMME7XEeuHa4bUOfM2xQ" name="hint" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhAzQE7XEeuHa4bUOfM2xQ" name="validNumList">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_ILxaUPaLEeW5KOK8aDMdgA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vhBaUE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vhCBYE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vhDPgE7XEeuHa4bUOfM2xQ" name="inputOneNumber" visibility="private" isStatic="true" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhD2kE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhFEsE7XEeuHa4bUOfM2xQ" name="hint" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhFrwE7XEeuHa4bUOfM2xQ" name="minValidNum">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhG54E7XEeuHa4bUOfM2xQ" name="maxValidNum">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vhIIAE7XEeuHa4bUOfM2xQ" name="chooseMultiPlayer" visibility="private" isStatic="true" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhJWIE7XEeuHa4bUOfM2xQ" type="_gb5qwk7WEeuHa4bUOfM2xQ" direction="return"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhKkQE7XEeuHa4bUOfM2xQ" name="hint" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhLyYE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vhNAgE7XEeuHa4bUOfM2xQ" name="str2intHashSet" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhOOoE7XEeuHa4bUOfM2xQ" type="_gb5qwk7WEeuHa4bUOfM2xQ" direction="return"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhO1sE7XEeuHa4bUOfM2xQ" name="str" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vhPcwE7XEeuHa4bUOfM2xQ" name="inputStartCoord" visibility="private" isStatic="true" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhQD0E7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vhQq4E7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vhRR8E7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhRR8U7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vhSgEE7XEeuHa4bUOfM2xQ" name="inputDestinationCoord" visibility="private" isStatic="true" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhTHIE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vhTuME7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vhUVQE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhU8UE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vhXYkE7XEeuHa4bUOfM2xQ" name="inputCoord" visibility="private" isStatic="true" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhYmsE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vhZ00E7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vhab4E7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhcREE7XEeuHa4bUOfM2xQ" name="hint" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhdfME7XEeuHa4bUOfM2xQ" name="validCoord">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_ILxaUPaLEeW5KOK8aDMdgA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vheGQE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vhetUE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vhf7cE7XEeuHa4bUOfM2xQ" name="inputCoord" visibility="private" isStatic="true" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhgigE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vhhJkE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vhhJkU7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhiXsE7XEeuHa4bUOfM2xQ" name="hint" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhi-wE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vhjl0E7XEeuHa4bUOfM2xQ" name="str2coord" visibility="private" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhkM4E7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vhkz8E7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vhlbAE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vhmCEE7XEeuHa4bUOfM2xQ" name="str" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vh3u4E7XEeuHa4bUOfM2xQ" name="MyGameManager" visibility="public">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vh6LIE7XEeuHa4bUOfM2xQ" name="board" visibility="protected" type="_vYAoQE7XEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vh7ZQE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Board()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vh8AUE7XEeuHa4bUOfM2xQ" name="floodDeck" visibility="protected" type="_vdiogE7XEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vh9OcE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new FloodDeck()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vh91gE7XEeuHa4bUOfM2xQ" name="usedFloodDeck" visibility="protected" type="_vdiogE7XEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vh_DoE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new FloodDeck()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_viARwE7XEeuHa4bUOfM2xQ" name="treasureDeck" visibility="protected" type="_vdzuQE7XEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_viA40E7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new TreasureDeck()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_viBf4E7XEeuHa4bUOfM2xQ" name="usedTreasureDeck" visibility="protected" type="_vdzuQE7XEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_viDVEE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new TreasureDeck()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_viD8IE7XEeuHa4bUOfM2xQ" name="coord" visibility="protected" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_ILxaUPaLEeW5KOK8aDMdgA"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_viD8IU7XEeuHa4bUOfM2xQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_viEjME7XEeuHa4bUOfM2xQ" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_viFKQE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new ArrayList&lt;Integer>()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_viFxUE7XEeuHa4bUOfM2xQ" name="waterMeter" visibility="protected" type="_vfnsIE7XEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_viG_cE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new WaterMeter()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_viINkE7XEeuHa4bUOfM2xQ" name="chalice" visibility="protected" type="_vPc-oU7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_viKCwE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Chalice()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_viKp0E7XEeuHa4bUOfM2xQ" name="fire" visibility="protected" type="_vPc-oU7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_viKp0U7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Fire()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_viLQ4E7XEeuHa4bUOfM2xQ" name="store" visibility="protected" type="_vPc-oU7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_viL38E7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Stone()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_viNGEE7XEeuHa4bUOfM2xQ" name="wind" visibility="protected" type="_vPc-oU7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_viNtIE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Wind()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_viOUME7XEeuHa4bUOfM2xQ" name="selectedPlayer" visibility="protected" type="_gbieYE7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_viPiUE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>null</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_viQwcE7XEeuHa4bUOfM2xQ" name="currPlayer" visibility="protected" type="_gbieYE7WEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_viRXgE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>null</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_viR-kE7XEeuHa4bUOfM2xQ" name="currPlayerInt" visibility="protected" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_viSloE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_viTzwE7XEeuHa4bUOfM2xQ" name="feedbackOperationString" visibility="protected" type="_eKOjE07WEeuHa4bUOfM2xQ" isUnique="false">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_viUa0E7XEeuHa4bUOfM2xQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_viUa0U7XEeuHa4bUOfM2xQ" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_viVB4E7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>{ &quot;[The operation has been selected: end this turn]&quot;, &quot;[The operation has been selected: move]&quot;, &quot;[The operation has been selected: shore up a flood tile]&quot;, &quot;[The operation has been selected: pass a treasure card]&quot;, &quot;[The operation has been selected: capture a treasure]&quot;, &quot;[The operation has been selected: use a functional treasure card]&quot;, &quot;[The operation has been selected: switch to another player]&quot;, &quot;[The operation has been selected: use ability]&quot; }</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_viWQAE7XEeuHa4bUOfM2xQ" name="forMoveInputIntArray" visibility="protected" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_viWQAU7XEeuHa4bUOfM2xQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_viW3EE7XEeuHa4bUOfM2xQ" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_viXeIE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>{ 8, 2, 4, 6, 7, 3, 1, 9 }</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_viYsQE7XEeuHa4bUOfM2xQ" name="forShoreUpInputIntArray" visibility="protected" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_viZ6YE7XEeuHa4bUOfM2xQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_viahcE7XEeuHa4bUOfM2xQ" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vibIgE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>{ 8, 2, 4, 6, 5, 7, 3, 1, 9 }</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vigBAE7XEeuHa4bUOfM2xQ" name="int2direction" visibility="private" type="_vicWoE7XEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vihPIE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new HashMap&lt;Integer, DirectionType>()</body>
            </defaultValue>
          </ownedAttribute>
          <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_vh4V8E7XEeuHa4bUOfM2xQ" name="MyGameManager implements MyInput" client="_vh3u4E7XEeuHa4bUOfM2xQ" supplier="_vgrcEE7XEeuHa4bUOfM2xQ" contract="_vgrcEE7XEeuHa4bUOfM2xQ"/>
          <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_vh5kEE7XEeuHa4bUOfM2xQ" name="MyGameManager implements MyOutput" client="_vh3u4E7XEeuHa4bUOfM2xQ" supplier="_vf0gcE7XEeuHa4bUOfM2xQ" contract="_vf0gcE7XEeuHa4bUOfM2xQ"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vilgkE7XEeuHa4bUOfM2xQ" name="MyGameManager" specification="_viidQE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.floodDeck.init(board);&#xD;
    this.treasureDeck.init();&#xD;
    int2direction.put(8, DirectionType.UP);&#xD;
    int2direction.put(2, DirectionType.DOWN);&#xD;
    int2direction.put(4, DirectionType.LEFT);&#xD;
    int2direction.put(6, DirectionType.RIGHT);&#xD;
    int2direction.put(5, DirectionType.MIDDLE);&#xD;
    int2direction.put(7, DirectionType.TOPLEFT);&#xD;
    int2direction.put(3, DirectionType.BOTTOMRIGHT);&#xD;
    int2direction.put(1, DirectionType.BOTTOMLEFT);&#xD;
    int2direction.put(9, DirectionType.TOPRIGHT);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vinVwE7XEeuHa4bUOfM2xQ" name="init" specification="_vimusE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.board.init();&#xD;
    for (int i = 0; i &lt; 6; i++) {&#xD;
        this.useFloodCard();&#xD;
    }&#xD;
    //init player&#xD;
    //Assign a role to each player&#xD;
    //The number of players should range from 2 to 4.&#xD;
    //Each Player can have a role: Engineer, Explorer, Diver, Pilot, Messenger, Navigator.&#xD;
    int tempInt = 0;&#xD;
    try {&#xD;
        tempInt = MyInput.inputOneDigitNumber(&quot;input number of players (2~4):&quot;, 2, 4);&#xD;
        initRoles(tempInt);&#xD;
        initAssignCards();&#xD;
    } catch (IOException e) {&#xD;
        e.printStackTrace();&#xD;
    }&#xD;
    //Set the Water Meter&#xD;
    System.out.println(&quot;difficulty (1~4):&quot;);&#xD;
    System.out.println(&quot;1: waterMeter=1 Novice&quot;);&#xD;
    System.out.println(&quot;2: waterMeter=2 Normal&quot;);&#xD;
    System.out.println(&quot;3: waterMeter=3 Elite&quot;);&#xD;
    System.out.println(&quot;4: waterMeter=4 Legendary&quot;);&#xD;
    try {&#xD;
        tempInt = MyInput.inputOneDigitNumber(&quot;choose difficulty (1~4):&quot;, 1, 4);&#xD;
    } catch (IOException e) {&#xD;
        e.printStackTrace();&#xD;
    }&#xD;
    this.waterMeter.setWaterMeter(tempInt);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vin80U7XEeuHa4bUOfM2xQ" name="initRoles" specification="_vinVwU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //init all roles&#xD;
    //Assign a role to each player:&#xD;
    //Randomly assign to each player one of the following roles: Explorer, Diver, Pilot, Engineer, Messenger and Navigator.&#xD;
    ArrayList&lt;StdRole> playerList = new ArrayList&lt;StdRole>();&#xD;
    if (Options.ifCheat) {&#xD;
        for (int i = 0; i &lt; tempInt; i++) {&#xD;
            playerList.add(new CheatCharacter());&#xD;
        }&#xD;
    } else {&#xD;
        ArrayList&lt;StdRole> tempPlayerList = new ArrayList&lt;StdRole>();&#xD;
        tempPlayerList.add(new Diver());&#xD;
        tempPlayerList.add(new Engineer());&#xD;
        tempPlayerList.add(new Explorer());&#xD;
        tempPlayerList.add(new Messenger());&#xD;
        tempPlayerList.add(new Navigator());&#xD;
        tempPlayerList.add(new Pilot());&#xD;
        StdRole tempRole;&#xD;
        int tempRandom;&#xD;
        for (//random&#xD;
        int i = 0; //random&#xD;
        i &lt; tempPlayerList.size(); //random&#xD;
        i++) {&#xD;
            tempRandom = new Random().nextInt(tempPlayerList.size());&#xD;
            tempRole = tempPlayerList.get(i);&#xD;
            tempPlayerList.set(i, tempPlayerList.get(tempRandom));&#xD;
            tempPlayerList.set(tempRandom, tempRole);&#xD;
        }&#xD;
        for (int i = 0; i &lt; tempInt; i++) {&#xD;
            playerList.add(tempPlayerList.get(i));&#xD;
        }&#xD;
    }&#xD;
    //and the Navigator will be placed on Gold Gate.&#xD;
    for (int i = 0; i &lt; playerList.size(); i++) {&#xD;
        @SuppressWarnings(&quot;rawtypes&quot;) Class tempClass = (playerList.get(i)).getClass();&#xD;
        if (tempClass == CheatCharacter.class) {&#xD;
            (playerList.get(i)).setCurrStdTile(board.getStdTile(10 + 2 * i + new Random().nextInt(2)));&#xD;
            board.getStdTile(10 + 2 * i + new Random().nextInt(2)).playerComes(playerList.get(i));&#xD;
        } else if (tempClass == Diver.class) {&#xD;
            (playerList.get(i)).setCurrStdTile(board.getStdTile(20));&#xD;
            board.getStdTile(20).playerComes(playerList.get(i));&#xD;
        } else if (tempClass == Engineer.class) {&#xD;
            (playerList.get(i)).setCurrStdTile(board.getStdTile(22));&#xD;
            board.getStdTile(22).playerComes(playerList.get(i));&#xD;
        } else if (tempClass == Explorer.class) {&#xD;
            (playerList.get(i)).setCurrStdTile(board.getStdTile(23));&#xD;
            board.getStdTile(23).playerComes(playerList.get(i));&#xD;
        } else if (tempClass == Messenger.class) {&#xD;
            (playerList.get(i)).setCurrStdTile(board.getStdTile(21));&#xD;
            board.getStdTile(21).playerComes(playerList.get(i));&#xD;
        } else if (tempClass == Navigator.class) {&#xD;
            (playerList.get(i)).setCurrStdTile(board.getStdTile(19));&#xD;
            board.getStdTile(19).playerComes(playerList.get(i));&#xD;
        } else if (tempClass == Pilot.class) {&#xD;
            (playerList.get(i)).setCurrStdTile(board.getStdTile(18));&#xD;
            board.getStdTile(18).playerComes(playerList.get(i));&#xD;
        } else {&#xD;
            System.err.println(&quot;init players ERROR&quot;);&#xD;
        }&#xD;
    }&#xD;
    this.board.setPlayerList(playerList);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vioj4U7XEeuHa4bUOfM2xQ" name="initAssignCards" specification="_vioj4E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //If anyone gets the Waters Rise cards, you should put it back in the Treasure Deck and assign another card.&#xD;
    for (StdRole i : board.getPlayerList()) {&#xD;
        for (int j = 0; j &lt; 2; j++) {&#xD;
            if (treasureDeck.getStack().peek().getClass() != WaterRise.class) {&#xD;
                i.addTreasureCard(treasureDeck.popCard());&#xD;
            } else {&#xD;
                usedTreasureDeck.pushCard(treasureDeck.popCard());&#xD;
                j--;&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
    while (!usedTreasureDeck.isStackEmpty()) {&#xD;
        treasureDeck.getStack().add(new Random().nextInt(treasureDeck.getStack().size()), usedTreasureDeck.popCard());&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vipK8U7XEeuHa4bUOfM2xQ" name="useFloodCard" specification="_vipK8E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.floodDeck.useCard(this.usedFloodDeck);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vipyAE7XEeuHa4bUOfM2xQ" name="ifLose" specification="_vipK8k7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.ifLose1() || this.ifLose2() || this.ifLose3() || this.ifLose4()) {&#xD;
        System.out.println(&quot;Your team lose the game.&quot;);&#xD;
        System.exit(0);&#xD;
        return true;&#xD;
    } else {&#xD;
        return false;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_viqZEE7XEeuHa4bUOfM2xQ" name="ifLose1" specification="_vipyAU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (//Palace&#xD;
    (this.board.getStdTile(14).getStatus() == Status.SUNK) &amp;&amp; (this.board.getStdTile(15).getStatus() == Status.SUNK) &amp;&amp; !(Palace.getIfGet())) {&#xD;
        System.out.println(&quot;[Both Palaces sink before the Chalice treasure is collected.]&quot;);&#xD;
        return true;&#xD;
    } else if (//Cave&#xD;
    (this.board.getStdTile(10).getStatus() == Status.SUNK) &amp;&amp; (this.board.getStdTile(11).getStatus() == Status.SUNK) &amp;&amp; !(Cave.getIfGet())) {&#xD;
        System.out.println(&quot;[Both Caves sink before the Fire treasure is collected.]&quot;);&#xD;
        return true;&#xD;
    } else if (//Temple&#xD;
    (this.board.getStdTile(16).getStatus() == Status.SUNK) &amp;&amp; (this.board.getStdTile(17).getStatus() == Status.SUNK) &amp;&amp; !(Temple.getIfGet())) {&#xD;
        System.out.println(&quot;[Both Temples sink before the Stone treasure is collected.]&quot;);&#xD;
        return true;&#xD;
    } else if (//Garden&#xD;
    (this.board.getStdTile(12).getStatus() == Status.SUNK) &amp;&amp; (this.board.getStdTile(13).getStatus() == Status.SUNK) &amp;&amp; !(Garden.getIfGet())) {&#xD;
        System.out.println(&quot;[Both Gardens sink before the Wind treasure is collected.]&quot;);&#xD;
        return true;&#xD;
    } else {&#xD;
        return false;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_virAIE7XEeuHa4bUOfM2xQ" name="ifLose2" specification="_viqZEU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (board.getStdTile(18).getStatus() == Status.SUNK) {&#xD;
        System.out.println(&quot;[The Fools’ Landing tile sinks.]&quot;);&#xD;
        return true;&#xD;
    } else {&#xD;
        return false;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_virAI07XEeuHa4bUOfM2xQ" name="ifLose3" specification="_virAIU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    for (StdRole player : this.board.getPlayerList()) {&#xD;
        if (!player.getIsAlive()) {&#xD;
            System.out.println(&quot;[The player &quot; + player.getName() + &quot; sinks.]&quot;);&#xD;
            return true;&#xD;
        }&#xD;
    }&#xD;
    return false;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_virnMk7XEeuHa4bUOfM2xQ" name="ifLose4" specification="_virnME7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if ((this.waterMeter.getLevel() == 6) || (this.waterMeter.getLevel() == -1)) {&#xD;
        System.out.println(&quot;[The current water level reaches the skull and crossbones.]&quot;);&#xD;
        return true;&#xD;
    } else {&#xD;
        return false;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vitcYE7XEeuHa4bUOfM2xQ" name="useWaterRise" specification="_visOQE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    System.out.println(&quot;[Use WaterRise -- Water Rise !!]&quot;);&#xD;
    WaterRise.use(this.floodDeck, this.usedFloodDeck, this.waterMeter);&#xD;
    this.dropCard(card);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_viy78E7XEeuHa4bUOfM2xQ" name="useSandbags" specification="_viuDcE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    boolean result;&#xD;
    System.out.println(&quot;[Use Sandbags]&quot;);&#xD;
    System.out.println(&quot;Destination coordinate?&quot;);&#xD;
    int[] tempInt = MyInput.inputDestinationCoord(this.board);&#xD;
    if (tempInt == null) {&#xD;
        result = false;&#xD;
    } else {&#xD;
        StdTile tempTile = this.board.getStdTile(tempInt);&#xD;
        result = Sandbags.use(tempTile);&#xD;
        if (result) {&#xD;
            this.dropPlayerCard(player, cardIndex, card);&#xD;
        }&#xD;
    }&#xD;
    return result;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vi4bgE7XEeuHa4bUOfM2xQ" name="useHelicopterLift" specification="_vi0KEE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    System.out.println(&quot;[Use HelicopterLift]&quot;);&#xD;
    if (//if win&#xD;
    this.ifWin()) {&#xD;
        System.out.println(&quot;[Your team has captured all the treasures.]&quot;);&#xD;
        System.out.println(&quot;[All team members called Helicopter at the Fools’ Landing tile.]&quot;);&#xD;
        System.out.println(&quot;[You win the game!!]&quot;);&#xD;
        System.exit(0);&#xD;
        //return whatever //this is some kind of success&#xD;
        return true;&#xD;
    } else {&#xD;
        this.board.printWithAllMeaningfulCoord();&#xD;
        MyOutput.printPlayerListForChoose(board);&#xD;
        if (Options.ifHelicopterLiftPlayerShouldAtTheSameTile) {&#xD;
            System.out.println(&quot;Start at which player's tile?&quot;);&#xD;
            int tempInt1 = MyInput.inputOneDigitNumber((&quot;Index for the player (1~&quot; + this.board.getPlayerList().size() + &quot;):&quot;), 0, this.board.getPlayerList().size());&#xD;
            if (tempInt1 == 0) {&#xD;
                System.out.println(&quot;[This operation has been canceled by user.]&quot;);&#xD;
                //cancel&#xD;
                return false;&#xD;
            } else {&#xD;
                System.out.println(&quot;Destination coordinate?&quot;);&#xD;
                int[] tempInt2 = MyInput.inputDestinationCoord(this.board);&#xD;
                if (tempInt2 == null) {&#xD;
                    System.out.println(&quot;[This operation has been canceled by user.]&quot;);&#xD;
                    //cancel&#xD;
                    return false;&#xD;
                } else {&#xD;
                    StdTile destination = this.board.getStdTile(tempInt2);&#xD;
                    HelicopterLift.use(null, this.board.getStdTile(this.board.getPlayerList().get(tempInt1 - 1).getCoord()), destination);&#xD;
                    this.dropPlayerCard(player, cardIndex, card);&#xD;
                    //success&#xD;
                    return true;&#xD;
                }&#xD;
            }&#xD;
        } else {&#xD;
            System.out.println(&quot;Choose player(s):&quot;);&#xD;
            HashSet&lt;Integer> tempIntHashSet = MyInput.chooseMultiPlayer((&quot;Index for the player (1~&quot; + this.board.getPlayerList().size()), this.board);&#xD;
            if (tempIntHashSet == null) {&#xD;
                System.out.println(&quot;[This operation has been canceled by user.]&quot;);&#xD;
                //cancel&#xD;
                return false;&#xD;
            }&#xD;
            HashSet&lt;StdRole> players = new HashSet&lt;StdRole>();&#xD;
            System.out.println(&quot;Player selected:&quot;);&#xD;
            for (int i : tempIntHashSet) {&#xD;
                if (i == 0) {&#xD;
                    System.out.println(&quot;[This operation has been canceled by user.]&quot;);&#xD;
                    //cancel&#xD;
                    return false;&#xD;
                } else if (i > this.board.getPlayerList().size()) {&#xD;
                    System.out.println(&quot;[Invalid input -- player index out of range]&quot;);&#xD;
                    //invalid input&#xD;
                    return false;&#xD;
                } else {&#xD;
                    players.add(this.board.getPlayerList().get(i - 1));&#xD;
                }&#xD;
            }&#xD;
            for (StdRole i : players) {&#xD;
                System.out.println(i.getName());&#xD;
            }&#xD;
            if (players.size() == 0) {&#xD;
                System.err.println(&quot;func useHelicopterLift ERROR -- HashSet&lt;StdRole> players size == 0&quot;);&#xD;
                //ERR&#xD;
                return false;&#xD;
            }&#xD;
            System.out.println(&quot;Destination coordinate?&quot;);&#xD;
            int[] tempInt2 = MyInput.inputDestinationCoord(this.board);&#xD;
            if (tempInt2 == null) {&#xD;
                System.out.println(&quot;[This operation has been canceled by user.]&quot;);&#xD;
                //cancel&#xD;
                return false;&#xD;
            } else {&#xD;
                StdTile destination = this.board.getStdTile(tempInt2);&#xD;
                HelicopterLift.use(players, null, destination);&#xD;
                this.dropPlayerCard(player, cardIndex, card);&#xD;
                //success&#xD;
                return true;&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vi7e0E7XEeuHa4bUOfM2xQ" name="useFlyAbility" specification="_vi5CkE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    System.out.println(&quot;[Use Fly Ability]&quot;);&#xD;
    System.out.println(&quot;Destination coordinate?&quot;);&#xD;
    int[] tempInt = MyInput.inputDestinationCoord(this.board);&#xD;
    if (tempInt == null) {&#xD;
        return false;&#xD;
    } else {&#xD;
        return ((Pilot) player).flyAbility(this.board, tempInt);&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vi9UAE7XEeuHa4bUOfM2xQ" name="ifWin" specification="_vi8F4E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (!this.ifLose2()) {&#xD;
        if (this.board.getStdTile(18).getPlayers().size() == this.board.getPlayerList().size()) {&#xD;
            if (Palace.getIfGet()) {&#xD;
                if (Cave.getIfGet()) {&#xD;
                    if (Temple.getIfGet()) {&#xD;
                        if (Garden.getIfGet()) {&#xD;
                            return true;&#xD;
                        }&#xD;
                    }&#xD;
                }&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
    return false;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vi_JME7XEeuHa4bUOfM2xQ" name="begin" specification="_vi-iIE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.currPlayer = board.getPlayerList().get(this.currPlayerInt);&#xD;
    //set the selectedPlayer to the &quot;curr player&quot; as default&#xD;
    this.selectedPlayer = board.getPlayerList().get(this.currPlayerInt);&#xD;
    //AP = 3&#xD;
    this.currPlayer.begin();&#xD;
    TreasureCard tempCard;&#xD;
    for (//pick two treasure cards&#xD;
    int i = 0; //pick two treasure cards&#xD;
    i &lt; 2; //pick two treasure cards&#xD;
    i++) {&#xD;
        tempCard = treasureDeck.popCard();&#xD;
        if (//water rise&#xD;
        tempCard.getClass() == WaterRise.class) {&#xD;
            this.useWaterRise(tempCard);&#xD;
        } else {&#xD;
            this.currPlayer.addTreasureCard(tempCard);&#xD;
        }&#xD;
        if (//drop card&#xD;
        this.currPlayer.getCards().size() == 6) {&#xD;
            this.forceToChooseCardToDrop(this.currPlayer);&#xD;
        }&#xD;
        if (//check if a shuffle is needed&#xD;
        this.treasureDeck.isStackEmpty()) {&#xD;
            this.treasureDeck.shuffle(this.usedTreasureDeck);&#xD;
        }&#xD;
    }&#xD;
    this.ifLose();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjBlcE7XEeuHa4bUOfM2xQ" name="end" specification="_vjAXUE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.ifLose();&#xD;
    for (//applied flood card&#xD;
    int i = 0; //applied flood card&#xD;
    i &lt; this.waterMeter.getLevel(); //applied flood card&#xD;
    i++) {&#xD;
        this.useFloodCard();&#xD;
        ArrayList&lt;StdTile> tempNearestTile;&#xD;
        for (StdRole j : this.board.getPlayerList()) {&#xD;
            //check if anyone sinks after a flood card has been applied&#xD;
            tempNearestTile = j.end(this.board);&#xD;
            if (tempNearestTile != null) {&#xD;
                if (this.playerSink(j, tempNearestTile) == false) {&#xD;
                    System.out.println(&quot;[Your team member sinks.]&quot;);&#xD;
                }&#xD;
            }&#xD;
        }&#xD;
        this.ifLose();&#xD;
    }&#xD;
    if (//switch to the next player&#xD;
    this.currPlayerInt == board.getPlayerList().size() - 1) {&#xD;
        this.currPlayerInt = 0;&#xD;
    } else {&#xD;
        this.currPlayerInt++;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjFP0E7XEeuHa4bUOfM2xQ" name="playerSink" specification="_vjCzkE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    boolean flag = true;&#xD;
    while (flag) {&#xD;
        System.out.println(&quot;[ &quot; + player.getName() + &quot; sinks!!]&quot;);&#xD;
        if (nearestTile.size() == 0) {&#xD;
            System.out.println(&quot;[ &quot; + player.getName() + &quot; no place to swim!!]&quot;);&#xD;
            player.setIsAlive(false);&#xD;
            System.out.println(&quot;[ &quot; + player.getName() + &quot; leave from us.]&quot;);&#xD;
            return false;&#xD;
        } else {&#xD;
            this.board.printWithCoordA(nearestTile);&#xD;
            System.out.println(&quot;[ &quot; + player.getName() + &quot; must swim to a tile]&quot;);&#xD;
            ArrayList&lt;int[]> tempCoordList = new ArrayList&lt;int[]>();&#xD;
            for (StdTile i : nearestTile) {&#xD;
                tempCoordList.add(i.getCoord());&#xD;
            }&#xD;
            int[] chosenCoord;&#xD;
            chosenCoord = MyInput.inputCoord(&quot;Choose a tile to swim:&quot;, tempCoordList);&#xD;
            if (chosenCoord != null) {&#xD;
                flag = false;&#xD;
                player.getCurrStdTile().playerLeaves(player);&#xD;
                this.board.getStdTile(chosenCoord).playerComes(player);&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
    this.printCLI();&#xD;
    return true;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjITIE7XEeuHa4bUOfM2xQ" name="forceToChooseCardToDrop" specification="_vjGd8E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    while ((this.chooseCardToDrop(player)) == false) {&#xD;
        System.out.println(&quot;[You are be forced to drop a card, this operation can not be canceled.]&quot;);&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjKvYE7XEeuHa4bUOfM2xQ" name="chooseCardToDrop" specification="_vjI6ME7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    System.out.println(player.getName() + &quot;:&quot;);&#xD;
    System.out.println(&quot;Choose a card to drop:&quot;);&#xD;
    MyOutput.printCardListForDrop(player);&#xD;
    int tempCardIndex = MyInput.inputOneDigitNumber((&quot;Input index of cards (1~&quot; + player.getCards().size() + &quot;):&quot;), 0, player.getCards().size());&#xD;
    if (tempCardIndex == 0) {&#xD;
        System.out.println(&quot;[This operation has been canceled by user.]&quot;);&#xD;
        //cancel // usually this would be refuse&#xD;
        return false;&#xD;
    } else {&#xD;
        if (player.getCards().get(tempCardIndex - 1).getClass() == HelicopterLift.class) {&#xD;
            if (this.confirmToUseCard(&quot;Are you going to use this HelicopterLift card while dropping it? (0: drop, 1:use)&quot;)) {&#xD;
                if (this.useHelicopterLift(player.getCards().get(tempCardIndex - 1), tempCardIndex - 1, player)) {&#xD;
                    return true;&#xD;
                }&#xD;
            } else {&#xD;
                this.dropPlayerCard(player, tempCardIndex - 1, player.getCards().get(tempCardIndex - 1));&#xD;
                return true;&#xD;
            }&#xD;
        } else if (player.getCards().get(tempCardIndex - 1).getClass() == Sandbags.class) {&#xD;
            if (this.confirmToUseCard(&quot;Are you going to use this Sandbags card while dropping it? (0: drop, 1:use)&quot;)) {&#xD;
                if (this.useSandbags(player.getCards().get(tempCardIndex - 1), tempCardIndex - 1, player)) {&#xD;
                    return true;&#xD;
                }&#xD;
            } else {&#xD;
                this.dropPlayerCard(player, tempCardIndex - 1, player.getCards().get(tempCardIndex - 1));&#xD;
                return true;&#xD;
            }&#xD;
        } else {&#xD;
            this.dropPlayerCard(player, tempCardIndex - 1, player.getCards().get(tempCardIndex - 1));&#xD;
            return true;&#xD;
        }&#xD;
    }&#xD;
    return false;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjOZwE7XEeuHa4bUOfM2xQ" name="confirmToUseCard" specification="_vjMkkE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    int tempInt = MyInput.inputOneDigitNumber(hint, 0, 1);&#xD;
    return (tempInt == 1);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjQ2AE7XEeuHa4bUOfM2xQ" name="dropCard" specification="_vjPn4E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.usedTreasureDeck.pushCard(card);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjUgYE7XEeuHa4bUOfM2xQ" name="dropPlayerCard" specification="_vjRdEE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.usedTreasureDeck.pushCard(card);&#xD;
    currPlayer.removeTreasureCard(cardIndex);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjXjsE7XEeuHa4bUOfM2xQ" name="takeAction" specification="_vjVugE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    while (this.currPlayer.getAP() > 0) {&#xD;
        this.printCLI();&#xD;
        if (!this.ifLose()) {&#xD;
            ArrayList&lt;ArrayList&lt;Boolean>> hintFlag = MyOutput.printMenu(board, this.selectedPlayer, this.currPlayer);&#xD;
            if ((Palace.getIfGet()) &amp;&amp; (Cave.getIfGet()) &amp;&amp; (Temple.getIfGet()) &amp;&amp; (Garden.getIfGet())) {&#xD;
                System.out.println(&quot;[You get all treasures! Try to get all team members to the Fools' Landing and call a Helicopter!]&quot;);&#xD;
            }&#xD;
            int tempInt = 6;&#xD;
            if ((selectedPlayer.getClass() == Pilot.class) || (selectedPlayer.getClass() == CheatCharacter.class)) {&#xD;
                tempInt = 7;&#xD;
            } else if ((selectedPlayer.getClass() == Navigator.class) &amp;&amp; (Options.ifNavigatorHasOwnAbility == true)) {&#xD;
                tempInt = 7;&#xD;
            } else {&#xD;
                tempInt = 6;&#xD;
            }&#xD;
            int tempChoose = MyInput.inputOneDigitNumber((&quot;Input index of operation (0~&quot; + tempInt + &quot;):&quot;), 0, tempInt);&#xD;
            System.out.println(&quot;[The player has been selected: &quot; + this.selectedPlayer.getName() + &quot; ]&quot;);&#xD;
            System.out.println(this.feedbackOperationString[tempChoose]);&#xD;
            int tempChoose2 = 0, tempChoose3 = 0;&#xD;
            boolean tempFlag;&#xD;
            switch(tempChoose) {&#xD;
                //move&#xD;
                case 1:&#xD;
                //shoreUp&#xD;
                case 2:&#xD;
                //give&#xD;
                case 3:&#xD;
                //capture&#xD;
                case 4:&#xD;
                //ability&#xD;
                case 7:&#xD;
                    if (this.selectedPlayer.getAP() &lt;= 0) {&#xD;
                        System.out.println(&quot;[No enough AP]&quot;);&#xD;
                        break;&#xD;
                    } else {&#xD;
                        switch(tempChoose) {&#xD;
                            //move&#xD;
                            case 1:&#xD;
                                tempFlag = true;&#xD;
                                for (boolean i : hintFlag.get(0)) {&#xD;
                                    if (i == true) {&#xD;
                                        tempFlag = false;&#xD;
                                        break;&#xD;
                                    }&#xD;
                                }&#xD;
                                if (tempFlag) {&#xD;
                                    //invalid&#xD;
                                    System.out.println(//invalid&#xD;
                                    &quot;[No valid tile nearby.]&quot;);&#xD;
                                } else {&#xD;
                                    MyOutput.printMoveMenu(this.board, hintFlag.get(0), this.selectedPlayer);&#xD;
                                    ArrayList&lt;Integer> validNumList = new ArrayList&lt;Integer>();&#xD;
                                    for (int i = 0; i &lt; 8; i++) {&#xD;
                                        if (hintFlag.get(0).get(i)) {&#xD;
                                            validNumList.add(forMoveInputIntArray[i]);&#xD;
                                        }&#xD;
                                    }&#xD;
                                    validNumList.add(0);&#xD;
                                    StringBuilder hint = new StringBuilder(&quot;Input index of operation (&quot;);&#xD;
                                    for (int i = 0; i &lt; validNumList.size(); i++) {&#xD;
                                        hint.append(validNumList.get(i));&#xD;
                                        hint.append(&quot; or &quot;);&#xD;
                                    }&#xD;
                                    hint.delete(hint.length() - 4, hint.length());&#xD;
                                    hint.append(&quot;):&quot;);&#xD;
                                    tempChoose2 = MyInput.inputOneDigitNumber(hint.toString(), validNumList);&#xD;
                                    if (tempChoose2 == 0) {&#xD;
                                        System.out.println(&quot;This operation has been canceled by user&quot;);&#xD;
                                    } else {&#xD;
                                        this.selectedPlayer.move(board, int2direction.get(tempChoose2));&#xD;
                                    }&#xD;
                                }&#xD;
                                break;&#xD;
                            //shoreUp&#xD;
                            case 2:&#xD;
                                tempFlag = true;&#xD;
                                for (boolean i : hintFlag.get(1)) {&#xD;
                                    if (i == true) {&#xD;
                                        tempFlag = false;&#xD;
                                        break;&#xD;
                                    }&#xD;
                                }&#xD;
                                if (tempFlag) {&#xD;
                                    //invalid&#xD;
                                    System.out.println(//invalid&#xD;
                                    &quot;[No flooded tile nearby.]&quot;);&#xD;
                                } else {&#xD;
                                    MyOutput.printStoreUpMenu(this.board, hintFlag.get(1), this.selectedPlayer);&#xD;
                                    ArrayList&lt;Integer> validNumList = new ArrayList&lt;Integer>();&#xD;
                                    for (int i = 0; i &lt; 9; i++) {&#xD;
                                        if (hintFlag.get(1).get(i)) {&#xD;
                                            validNumList.add(forShoreUpInputIntArray[i]);&#xD;
                                        }&#xD;
                                    }&#xD;
                                    validNumList.add(0);&#xD;
                                    StringBuilder hint = new StringBuilder(&quot;Input index of operation (&quot;);&#xD;
                                    for (int i = 0; i &lt; validNumList.size(); i++) {&#xD;
                                        hint.append(validNumList.get(i));&#xD;
                                        hint.append(&quot; or &quot;);&#xD;
                                    }&#xD;
                                    hint.delete(hint.length() - 4, hint.length());&#xD;
                                    hint.append(&quot;):&quot;);&#xD;
                                    if (this.selectedPlayer.getClass() == Engineer.class) {&#xD;
                                        System.out.println(&quot; [Engineer] could input two different tile (eg. 2,4) or a single tile input (eg. 2):&quot;);&#xD;
                                        ArrayList&lt;Integer> tempMultipleChoose = MyInput.inputMultipleOneDigitNumber(hint.toString(), validNumList);&#xD;
                                        if (tempMultipleChoose.get(0) == 0) {&#xD;
                                            //cancel&#xD;
                                            System.out.println(//cancel&#xD;
                                            &quot;This operation has been canceled by user&quot;);&#xD;
                                        } else if (tempMultipleChoose.size() == 1) {&#xD;
                                            this.selectedPlayer.shoreUp(board, int2direction.get(tempMultipleChoose.get(0)));&#xD;
                                        } else if ((tempMultipleChoose.get(1) == 0)) {&#xD;
                                            //cancel&#xD;
                                            System.out.println(//cancel&#xD;
                                            &quot;This operation has been canceled by user&quot;);&#xD;
                                        } else if (tempMultipleChoose.get(0) == tempMultipleChoose.get(1)) {&#xD;
                                            System.out.println(&quot;[Store up twice on a single tile is not allowed.]&quot;);&#xD;
                                        } else {&#xD;
                                            ((Engineer) this.selectedPlayer).shoreUp(board, int2direction.get(tempMultipleChoose.get(0)), int2direction.get(tempMultipleChoose.get(1)));&#xD;
                                        }&#xD;
                                    } else {&#xD;
                                        tempChoose2 = MyInput.inputOneDigitNumber(hint.toString(), validNumList);&#xD;
                                        if (tempChoose2 == 0) {&#xD;
                                            //cancel&#xD;
                                            System.out.println(//cancel&#xD;
                                            &quot;This operation has been canceled by user&quot;);&#xD;
                                        } else {&#xD;
                                            this.selectedPlayer.shoreUp(board, int2direction.get(tempChoose2));&#xD;
                                        }&#xD;
                                    }&#xD;
                                }&#xD;
                                break;&#xD;
                            //give&#xD;
                            case 3:&#xD;
                                if ((hintFlag.get(2).get(0)) &amp;&amp; (this.selectedPlayer.getClass() != Messenger.class)) {&#xD;
                                    System.out.println(&quot;[No other player.]&quot;);&#xD;
                                } else if (hintFlag.get(2).get(1)) {&#xD;
                                    System.out.println(&quot;[No cards.]&quot;);&#xD;
                                } else {&#xD;
                                    ArrayList&lt;StdRole> tempPlayerList;&#xD;
                                    if (this.selectedPlayer.getClass() == Messenger.class) {&#xD;
                                        tempPlayerList = this.board.getPlayerList();&#xD;
                                    } else {&#xD;
                                        tempPlayerList = this.selectedPlayer.getCurrStdTile().getPlayers();&#xD;
                                    }&#xD;
                                    if (tempPlayerList.size() == 2) {&#xD;
                                        tempChoose3 = 1 - tempPlayerList.lastIndexOf(this.selectedPlayer) + 1;&#xD;
                                        System.out.println(&quot;[Pass card to player -- &quot; + tempPlayerList.get(tempChoose3 - 1).getName() + &quot; ]&quot;);&#xD;
                                    }&#xD;
                                    MyOutput.printCardListForDrop(this.selectedPlayer);&#xD;
                                    tempChoose2 = MyInput.inputOneDigitNumber((&quot;Input index for the card (0~&quot; + this.selectedPlayer.getCards().size() + &quot;):&quot;), 0, this.selectedPlayer.getCards().size());&#xD;
                                    if (tempChoose2 == 0) {&#xD;
                                        System.out.println(&quot;[This operation has been canceled by user]&quot;);&#xD;
                                    } else {&#xD;
                                        if (tempPlayerList.size() == 2) {&#xD;
                                            //there is only one player in range&#xD;
                                            ;&#xD;
                                        } else {&#xD;
                                            MyOutput.printPlayerListForChoose(tempPlayerList);&#xD;
                                            if (this.selectedPlayer.getClass() == CheatCharacter.class) {&#xD;
                                                tempChoose3 = MyInput.inputOneNumber((&quot;Input index for the player (0~&quot; + tempPlayerList.size() + &quot;):&quot;), 0, tempPlayerList.size());&#xD;
                                            } else {&#xD;
                                                tempChoose3 = MyInput.inputOneDigitNumber((&quot;Input index for the player (0~&quot; + tempPlayerList.size() + &quot;):&quot;), 0, tempPlayerList.size());&#xD;
                                            }&#xD;
                                        }&#xD;
                                        if (tempChoose3 == 0) {&#xD;
                                            System.out.println(&quot;[This operation has been canceled by user]&quot;);&#xD;
                                        } else if (this.selectedPlayer == tempPlayerList.get(tempChoose3 - 1)) {&#xD;
                                            System.out.println(&quot;[You passed a card to yourself without any AP cost.]&quot;);&#xD;
                                        } else {&#xD;
                                            this.selectedPlayer.passCard(tempPlayerList.get(tempChoose3 - 1), tempChoose2 - 1);&#xD;
                                            if (//drop card&#xD;
                                            tempPlayerList.get(//drop card&#xD;
                                            tempChoose3 - 1).getCards().size() == 6) {&#xD;
                                                this.forceToChooseCardToDrop(tempPlayerList.get(tempChoose3 - 1));&#xD;
                                            }&#xD;
                                        }&#xD;
                                    }&#xD;
                                }&#xD;
                                break;&#xD;
                            //capture&#xD;
                            case 4:&#xD;
                                if (hintFlag.get(3).get(0)) {&#xD;
                                    System.out.println(&quot;[No enough any same type treasure cards]&quot;);&#xD;
                                } else if (hintFlag.get(3).get(1)) {&#xD;
                                    System.out.println(&quot;[Not at treasure tile]&quot;);&#xD;
                                } else if (hintFlag.get(3).get(2)) {&#xD;
                                    System.out.println(&quot;[No enough required treasure cards]&quot;);&#xD;
                                } else {&#xD;
                                    if (this.selectedPlayer.captureTreasure(this.usedTreasureDeck)) {&#xD;
                                        System.out.println(&quot;[Capture...Success]&quot;);&#xD;
                                    } else {&#xD;
                                        System.out.println(&quot;[Capture...Failed]&quot;);&#xD;
                                    }&#xD;
                                }&#xD;
                                break;&#xD;
                            //ability&#xD;
                            case 7:&#xD;
                                if (this.selectedPlayer.getClass() == CheatCharacter.class) {&#xD;
                                    System.out.println(&quot;1: get 20 Treasure cards (drop WaterRise)&quot;);&#xD;
                                    System.out.println(&quot;2: get 10 Treasure cards (applied WaterRise)&quot;);&#xD;
                                    System.out.println(&quot;3: recover all tiles&quot;);&#xD;
                                    System.out.println(&quot;4: flood all tiles&quot;);&#xD;
                                    System.out.println(&quot;5: sink all tiles&quot;);&#xD;
                                    System.out.println(&quot;6: reset water meter to 1&quot;);&#xD;
                                    System.out.println(&quot;7: reset water meter to 9&quot;);&#xD;
                                    System.out.println(&quot;8: get all treasures&quot;);&#xD;
                                    System.out.println(&quot;9: get all treasures and separates to every one&quot;);&#xD;
                                    System.out.println(&quot;10: move all players to the Fools' Landing&quot;);&#xD;
                                    System.out.println(&quot;11: set a player's AP to 99&quot;);&#xD;
                                    System.out.println(&quot;12: set a diagonally island for explorer&quot;);&#xD;
                                    System.out.println(&quot;13: force the diver into water and puts 1*1 cross-shaped guaranteed tiles surround him&quot;);&#xD;
                                    System.out.println(&quot;14: force the diver into water and puts 2*2 cross-shaped guaranteed tiles surround him&quot;);&#xD;
                                    System.out.println(&quot;15: force the diver into water and puts 3*3 cross-shaped guaranteed tiles surround him&quot;);&#xD;
                                    System.out.println(&quot;16: force the diver into water and puts 4*4 cross-shaped guaranteed tiles surround him&quot;);&#xD;
                                    System.out.println(&quot;17: force the diver into water and puts 5*5 cross-shaped guaranteed tiles surround him&quot;);&#xD;
                                    System.out.println(&quot;18: force the diver into water and puts 6*6 cross-shaped guaranteed tiles surround him&quot;);&#xD;
                                    System.out.println(&quot;19: add 10 HelicopterLift into your hand of cards&quot;);&#xD;
                                    System.out.println(&quot;20: add 10 SandBags into your hand of cards&quot;);&#xD;
                                    System.out.println(&quot;0: cancel&quot;);&#xD;
                                    tempChoose2 = MyInput.inputOneNumber((&quot;Input:&quot;), 0, 20);&#xD;
                                    TreasureCard tempCard;&#xD;
                                    Treasure tempTreasure;&#xD;
                                    int guaranteedArea = 0;&#xD;
                                    switch(tempChoose2) {&#xD;
                                        case 1:&#xD;
                                            for (int i = 0; i &lt; 20; i++) {&#xD;
                                                tempCard = treasureDeck.popCard();&#xD;
                                                //water rise&#xD;
                                                if (tempCard.getClass() == WaterRise.class) {&#xD;
                                                    this.usedTreasureDeck.pushCard(tempCard);&#xD;
                                                } else {&#xD;
                                                    this.selectedPlayer.addTreasureCard(tempCard);&#xD;
                                                }&#xD;
                                                //check if a shuffle is needed&#xD;
                                                if (treasureDeck.isStackEmpty()) {&#xD;
                                                    treasureDeck.shuffle(this.usedTreasureDeck);&#xD;
                                                }&#xD;
                                            }&#xD;
                                            break;&#xD;
                                        case 2:&#xD;
                                            for (int i = 0; i &lt; 10; i++) {&#xD;
                                                tempCard = treasureDeck.popCard();&#xD;
                                                //water rise&#xD;
                                                if (tempCard.getClass() == WaterRise.class) {&#xD;
                                                    this.useWaterRise(tempCard);&#xD;
                                                } else {&#xD;
                                                    this.selectedPlayer.addTreasureCard(tempCard);&#xD;
                                                }&#xD;
                                                //check if a shuffle is needed&#xD;
                                                if (treasureDeck.isStackEmpty()) {&#xD;
                                                    treasureDeck.shuffle(this.usedTreasureDeck);&#xD;
                                                }&#xD;
                                            }&#xD;
                                            break;&#xD;
                                        case 3:&#xD;
                                            for (int id = 0; id &lt; 24; id++) {&#xD;
                                                this.board.getStdTile(id).setStatus(Status.NORMAL);&#xD;
                                            }&#xD;
                                            break;&#xD;
                                        case 4:&#xD;
                                            for (int id = 0; id &lt; 24; id++) {&#xD;
                                                this.board.getStdTile(id).flood();&#xD;
                                            }&#xD;
                                            break;&#xD;
                                        case 5:&#xD;
                                            for (int id = 0; id &lt; 24; id++) {&#xD;
                                                this.board.getStdTile(id).setStatus(Status.SUNK);&#xD;
                                            }&#xD;
                                            break;&#xD;
                                        case 6:&#xD;
                                            this.waterMeter.setWaterMeter(1);&#xD;
                                            break;&#xD;
                                        case 7:&#xD;
                                            this.waterMeter.setWaterMeter(9);&#xD;
                                            break;&#xD;
                                        case 8:&#xD;
                                            for (int i = 10; i &lt; 18; i += 2) {&#xD;
                                                tempTreasure = this.board.getStdTile(i).getTreasure();&#xD;
                                                if (tempTreasure != null) {&#xD;
                                                    this.selectedPlayer.getTreasures().add(tempTreasure);&#xD;
                                                }&#xD;
                                            }&#xD;
                                            break;&#xD;
                                        case 9:&#xD;
                                            for (int i = 10, j = 0; i &lt; 18 &amp;&amp; j &lt; 4; i += 2, j++) {&#xD;
                                                tempTreasure = this.board.getStdTile(i).getTreasure();&#xD;
                                                if (tempTreasure != null) {&#xD;
                                                    this.board.getPlayerList().get(j % this.board.getPlayerList().size()).getTreasures().add(tempTreasure);&#xD;
                                                }&#xD;
                                            }&#xD;
                                            break;&#xD;
                                        case 10:&#xD;
                                            for (StdRole i : this.board.getPlayerList()) {&#xD;
                                                i.getCurrStdTile().playerLeaves(i);&#xD;
                                                this.board.getStdTile(18).playerComes(i);&#xD;
                                            }&#xD;
                                            break;&#xD;
                                        case 11:&#xD;
                                            System.out.println(&quot;Choose player:&quot;);&#xD;
                                            MyOutput.printPlayerListForChoose(this.board);&#xD;
                                            tempChoose2 = MyInput.inputOneDigitNumber((&quot;Input index for the player (0~&quot; + this.board.getPlayerList().size() + &quot;):&quot;), 0, this.board.getPlayerList().size());&#xD;
                                            this.board.getPlayerList().get(tempChoose2 - 1).setAP(99);&#xD;
                                            break;&#xD;
                                        case 12:&#xD;
                                            boolean ifNoExplorer = true;&#xD;
                                            for (StdRole i : this.board.getPlayerList()) {&#xD;
                                                if (i.getClass() == Explorer.class) {&#xD;
                                                    ifNoExplorer = false;&#xD;
                                                    int[] tempCoord = i.getCoord();&#xD;
                                                    StdTile tempTile;&#xD;
                                                    int row = tempCoord[0] % 2, col = tempCoord[1] % 2;&#xD;
                                                    int tempCoord2;&#xD;
                                                    if (row == col) {&#xD;
                                                        tempCoord2 = 0;&#xD;
                                                    } else {&#xD;
                                                        tempCoord2 = 1;&#xD;
                                                    }&#xD;
                                                    for (int j = 0; j &lt; 6; j++) {&#xD;
                                                        int k;&#xD;
                                                        if (j % 2 == 0) {&#xD;
                                                            k = 1 - tempCoord2;&#xD;
                                                        } else {&#xD;
                                                            k = tempCoord2;&#xD;
                                                        }&#xD;
                                                        for (; k &lt; 6; k += 2) {&#xD;
                                                            tempTile = this.board.getStdTile(j, k);&#xD;
                                                            if (tempTile != null) {&#xD;
                                                                tempTile.setStatus(Status.SUNK);&#xD;
                                                            }&#xD;
                                                        }&#xD;
                                                    }&#xD;
                                                    break;&#xD;
                                                }&#xD;
                                            }&#xD;
                                            if (ifNoExplorer) {&#xD;
                                                System.out.println(&quot;[No explorer.]&quot;);&#xD;
                                            }&#xD;
                                            break;&#xD;
                                        case 18:&#xD;
                                            guaranteedArea++;&#xD;
                                        case 17:&#xD;
                                            guaranteedArea++;&#xD;
                                        case 16:&#xD;
                                            guaranteedArea++;&#xD;
                                        case 15:&#xD;
                                            guaranteedArea++;&#xD;
                                        case 14:&#xD;
                                            guaranteedArea++;&#xD;
                                        case 13:&#xD;
                                            guaranteedArea++;&#xD;
                                            boolean ifNoDiver = true;&#xD;
                                            for (StdRole i : this.board.getPlayerList()) {&#xD;
                                                if (i.getClass() == Diver.class) {&#xD;
                                                    ifNoDiver = false;&#xD;
                                                    int[] tempCoord = i.getCoord();&#xD;
                                                    StdTile tempTile;&#xD;
                                                    for (int row = 0; row &lt; 6; row++) {&#xD;
                                                        for (int col = 0; col &lt; 6; col++) {&#xD;
                                                            if (((Math.abs(row - tempCoord[0])) + (Math.abs(col - tempCoord[1]))) &lt;= guaranteedArea) {&#xD;
                                                                tempTile = this.board.getStdTile(row, col);&#xD;
                                                                if (tempTile != null) {&#xD;
                                                                    tempTile.setStatus(Status.SUNK);&#xD;
                                                                }&#xD;
                                                            }&#xD;
                                                        }&#xD;
                                                    }&#xD;
                                                    break;&#xD;
                                                }&#xD;
                                            }&#xD;
                                            if (ifNoDiver) {&#xD;
                                                System.out.println(&quot;[No diver.]&quot;);&#xD;
                                            }&#xD;
                                            break;&#xD;
                                        case 19:&#xD;
                                            for (int i = 0; i &lt; 10; i++) {&#xD;
                                                this.selectedPlayer.getCards().add(new HelicopterLift());&#xD;
                                            }&#xD;
                                            break;&#xD;
                                        case 20:&#xD;
                                            for (int i = 0; i &lt; 10; i++) {&#xD;
                                                this.selectedPlayer.getCards().add(new Sandbags());&#xD;
                                            }&#xD;
                                            break;&#xD;
                                        case 0:&#xD;
                                            System.out.println(&quot;[This operation has been canceled by user]&quot;);&#xD;
                                            break;&#xD;
                                        default:&#xD;
                                            break;&#xD;
                                    }&#xD;
                                } else {&#xD;
                                    if (hintFlag.get(5).get(0)) {&#xD;
                                        System.out.println(&quot;[The ability is limited to use for now]&quot;);&#xD;
                                    } else if (selectedPlayer.getClass() == Pilot.class) {&#xD;
                                        this.useFlyAbility(this.selectedPlayer);&#xD;
                                    } else if (selectedPlayer.getClass() == Navigator.class) {&#xD;
                                        ArrayList&lt;StdRole> tempPlayerList = new ArrayList&lt;StdRole>();&#xD;
                                        tempPlayerList.addAll(this.board.getPlayerList());&#xD;
                                        tempPlayerList.remove(selectedPlayer);&#xD;
                                        MyOutput.printPlayerListForChoose(tempPlayerList);&#xD;
                                        tempChoose2 = MyInput.inputOneDigitNumber((&quot;Input index for the player (0~&quot; + tempPlayerList.size() + &quot;):&quot;), 0, tempPlayerList.size());&#xD;
                                        if (tempChoose2 == 0) {&#xD;
                                            System.out.println(&quot;[This operation has been canceled by user]&quot;);&#xD;
                                        } else {&#xD;
                                            HashSet&lt;StdTile> tempValidTiles = new HashSet&lt;StdTile>();&#xD;
                                            tempValidTiles = ((Navigator) selectedPlayer).getValidGuideDestination(this.board, tempPlayerList.get(tempChoose2 - 1));&#xD;
                                            if (tempValidTiles == null) {&#xD;
                                                //not allowed&#xD;
                                                System.out.println(&quot;[Not allowed]&quot;);&#xD;
                                            } else if (tempValidTiles.size() == 0) {&#xD;
                                                //not allowed&#xD;
                                                System.out.println(&quot;[No place to go]&quot;);&#xD;
                                            } else {&#xD;
                                                this.board.printWithCoordA(tempValidTiles);&#xD;
                                                ArrayList&lt;int[]> tempCoordList = new ArrayList&lt;int[]>();&#xD;
                                                for (StdTile i : tempValidTiles) {&#xD;
                                                    tempCoordList.add(i.getCoord());&#xD;
                                                }&#xD;
                                                int[] chosenCoord = MyInput.inputCoord((&quot;Choose a tile to guide:&quot;), tempCoordList);&#xD;
                                                if (chosenCoord == null) {&#xD;
                                                    //Cancel&#xD;
                                                    System.out.println(&quot;[Canceled]&quot;);&#xD;
                                                } else {&#xD;
                                                    tempPlayerList.get(tempChoose2 - 1).getCurrStdTile().playerLeaves(tempPlayerList.get(tempChoose2 - 1));&#xD;
                                                    this.board.getStdTile(chosenCoord).playerComes(tempPlayerList.get(tempChoose2 - 1));&#xD;
                                                }&#xD;
                                            }&#xD;
                                        }&#xD;
                                    } else {&#xD;
                                        //ERR&#xD;
                                        ;&#xD;
                                    }&#xD;
                                }&#xD;
                                break;&#xD;
                            default:&#xD;
                                //ERR&#xD;
                                break;&#xD;
                        }&#xD;
                    }&#xD;
                    break;&#xD;
                //use&#xD;
                case 5:&#xD;
                    if (hintFlag.get(4).get(0)) {&#xD;
                        System.out.println(&quot;[No functional card]&quot;);&#xD;
                    } else {&#xD;
                        MyOutput.printCardListForUse(this.selectedPlayer);&#xD;
                        if (selectedPlayer.getClass() == CheatCharacter.class) {&#xD;
                            tempChoose2 = MyInput.inputOneNumber((&quot;Input index for the card (0~&quot; + this.selectedPlayer.getCards().size() + &quot;):&quot;), 0, this.selectedPlayer.getCards().size());&#xD;
                        } else {&#xD;
                            tempChoose2 = MyInput.inputOneDigitNumber((&quot;Input index for the card (0~&quot; + this.selectedPlayer.getCards().size() + &quot;):&quot;), 0, this.selectedPlayer.getCards().size());&#xD;
                        }&#xD;
                        if (tempChoose2 == 0) {&#xD;
                            System.out.println(&quot;[This operation has been canceled by user]&quot;);&#xD;
                        } else if (selectedPlayer.getCards().get(tempChoose2 - 1).getClass() == HelicopterLift.class) {&#xD;
                            this.useHelicopterLift(selectedPlayer.getCards().get(tempChoose2 - 1), tempChoose2 - 1, this.selectedPlayer);&#xD;
                        } else if (selectedPlayer.getCards().get(tempChoose2 - 1).getClass() == Sandbags.class) {&#xD;
                            this.useSandbags(selectedPlayer.getCards().get(tempChoose2 - 1), tempChoose2 - 1, this.selectedPlayer);&#xD;
                        } else {&#xD;
                            System.out.println(&quot;[Not allowed]&quot;);&#xD;
                        }&#xD;
                    }&#xD;
                    break;&#xD;
                //switch&#xD;
                case 6:&#xD;
                    MyOutput.printPlayerListForChoose(board);&#xD;
                    tempChoose2 = MyInput.inputOneDigitNumber((&quot;Input index for the player (0~&quot; + this.board.getPlayerList().size() + &quot;):&quot;), 0, this.board.getPlayerList().size());&#xD;
                    if (tempChoose2 != 0) {&#xD;
                        this.selectedPlayer = board.getPlayerList().get(tempChoose2 - 1);&#xD;
                    } else {&#xD;
                        System.out.println(&quot;[This operation has been canceled by user]&quot;);&#xD;
                    }&#xD;
                    break;&#xD;
                //end&#xD;
                case 0:&#xD;
                    if (hintFlag.get(6).get(0)) {&#xD;
                        //end&#xD;
                        System.out.println(//end&#xD;
                        &quot; Not your turn&quot;);&#xD;
                    } else {&#xD;
                        System.out.println(&quot;0: Cancel&quot;);&#xD;
                        System.out.println(&quot;1: Proceed&quot;);&#xD;
                        tempChoose2 = MyInput.inputOneDigitNumber(&quot;Are you sure to end this turn? (0 or 1):&quot;, 0, 1);&#xD;
                        if (tempChoose2 == 1) {&#xD;
                            this.selectedPlayer.end(board);&#xD;
                        } else {&#xD;
                            System.out.println(&quot;[This operation has been canceled by user]&quot;);&#xD;
                        }&#xD;
                    }&#xD;
                    break;&#xD;
                default:&#xD;
                    System.err.println(&quot;tempChoose ERROR&quot;);&#xD;
                    break;&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjZ_8E7XEeuHa4bUOfM2xQ" name="printCLI" specification="_vjZY4E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.board.printCLILite();&#xD;
    this.waterMeter.printCLI();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjb1IE7XEeuHa4bUOfM2xQ" name="printBoardWithAllCoordCLI" specification="_vjbOEE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.board.printWithAllCoord();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjdDQE7XEeuHa4bUOfM2xQ" name="printFDeckCLI" specification="_vjccME7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.floodDeck.printCLI();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjeRYU7XEeuHa4bUOfM2xQ" name="printUsedFDeckCLI" specification="_vjeRYE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.usedFloodDeck.printCLI();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjgGkE7XEeuHa4bUOfM2xQ" name="printTreasureDeckCLI" specification="_vjffgE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.treasureDeck.printCLI();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjgtoU7XEeuHa4bUOfM2xQ" name="printUsedTreasureDeckCLI" specification="_vjgtoE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.usedTreasureDeck.printCLI();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjhUsE7XEeuHa4bUOfM2xQ" name="printWaterMeterCLI" specification="_vjgtok7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.waterMeter.printCLI();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjh7wE7XEeuHa4bUOfM2xQ" name="printPlayersCLI" specification="_vjhUsU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.board.printPlayersCLI();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjjw8E7XEeuHa4bUOfM2xQ" name="getBoard" specification="_vjjJ4E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.board;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjm0QE7XEeuHa4bUOfM2xQ" name="setBoard" specification="_vjk_EE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.board = board;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjqeoE7XEeuHa4bUOfM2xQ" name="getFloodDeck" specification="_vjopcE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.floodDeck;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjs64E7XEeuHa4bUOfM2xQ" name="setFloodDeck" specification="_vjrswE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.floodDeck = floodDeck;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjuwEE7XEeuHa4bUOfM2xQ" name="getUsedFloodDeck" specification="_vjth8E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.usedFloodDeck;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjxMUE7XEeuHa4bUOfM2xQ" name="setUsedFloodDeck" specification="_vjv-ME7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.usedFloodDeck = usedFloodDeck;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vjzBgE7XEeuHa4bUOfM2xQ" name="getTreasureDeck" specification="_vjxzYE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.treasureDeck;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vj2r4E7XEeuHa4bUOfM2xQ" name="setTreasureDeck" specification="_vj02sE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.treasureDeck = treasureDeck;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vj4hEE7XEeuHa4bUOfM2xQ" name="getUsedTreasureDeck" specification="_vj36AE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.usedTreasureDeck;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vj7kYE7XEeuHa4bUOfM2xQ" name="setUsedTreasureDeck" specification="_vj5vME7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.usedTreasureDeck = usedTreasureDeck;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vj9ZkE7XEeuHa4bUOfM2xQ" name="getSelectedPlayer" specification="_vj8ygE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.selectedPlayer;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vj_OwE7XEeuHa4bUOfM2xQ" name="setSelectedPlayer" specification="_vj9ZkU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.selectedPlayer = selectedPlayer;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vkBrAE7XEeuHa4bUOfM2xQ" name="getCurrPlayer" specification="_vkAc4E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.currPlayer;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vkEHQE7XEeuHa4bUOfM2xQ" name="setCurrPlayer" specification="_vkC5IE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.currPlayer = currPlayer;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vkHKkE7XEeuHa4bUOfM2xQ" name="getWaterMeter" specification="_vkF8cE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.waterMeter;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vkIYsE7XEeuHa4bUOfM2xQ" name="setWaterMeter" specification="_vkHxoE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.waterMeter = waterMeter;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vkMDEE7XEeuHa4bUOfM2xQ" name="initForTest" specification="_vkKN4E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.board.init();&#xD;
    for (int i = 0; i &lt; 6; i++) {&#xD;
        this.useFloodCard();&#xD;
    }&#xD;
    this.initRoles(temp1);&#xD;
    this.initAssignCards();&#xD;
    this.waterMeter.setWaterMeter(temp2);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vkSwwE7XEeuHa4bUOfM2xQ" name="useSandbagsForTest" specification="_vkN4QE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    boolean result;&#xD;
    if (tempInt == null) {&#xD;
        result = false;&#xD;
    } else {&#xD;
        StdTile tempTile = this.board.getStdTile(tempInt);&#xD;
        result = Sandbags.use(tempTile);&#xD;
        if (result) {&#xD;
            this.dropPlayerCard(player, cardIndex, card);&#xD;
        }&#xD;
    }&#xD;
    return result;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vkY3YU7XEeuHa4bUOfM2xQ" name="useHelicopterLiftByMultipleForTest" specification="_vkTX0E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (//if win&#xD;
    this.ifWin()) {&#xD;
        //return whatever //this is some kind of success&#xD;
        return true;&#xD;
    } else {&#xD;
        if (tempIntHashSet == null) {&#xD;
            //cancel&#xD;
            return false;&#xD;
        }&#xD;
        HashSet&lt;StdRole> players = new HashSet&lt;StdRole>();&#xD;
        for (int i : tempIntHashSet) {&#xD;
            if (i == 0) {&#xD;
                //cancel&#xD;
                return false;&#xD;
            } else if (i > this.board.getPlayerList().size()) {&#xD;
                //invalid input&#xD;
                return false;&#xD;
            } else {&#xD;
                players.add(this.board.getPlayerList().get(i - 1));&#xD;
            }&#xD;
        }&#xD;
        for (StdRole i : players) {&#xD;
            System.out.println(i.getName());&#xD;
        }&#xD;
        if (players.size() == 0) {&#xD;
            //ERR&#xD;
            return false;&#xD;
        }&#xD;
        if (tempInt2 == null) {&#xD;
            //cancel&#xD;
            return false;&#xD;
        } else {&#xD;
            StdTile destination = this.board.getStdTile(tempInt2);&#xD;
            HelicopterLift.use(players, null, destination);&#xD;
            this.dropPlayerCard(player, cardIndex, card);&#xD;
            //success&#xD;
            return true;&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vkaskE7XEeuHa4bUOfM2xQ" name="useWaterRiseTest" specification="_vkZecE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.useWaterRise(card);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vkgMIE7XEeuHa4bUOfM2xQ" name="UseCardWhileDrop" specification="_vkchwE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (player.getCards().get(tempCardIndex - 1).getClass() == HelicopterLift.class) {&#xD;
        if (choice == 1) {&#xD;
            if (this.useHelicopterLift(player.getCards().get(tempCardIndex - 1), tempCardIndex - 1, player)) {&#xD;
                return true;&#xD;
            }&#xD;
        } else {&#xD;
            this.dropPlayerCard(player, tempCardIndex - 1, player.getCards().get(tempCardIndex - 1));&#xD;
            return true;&#xD;
        }&#xD;
    } else if (player.getCards().get(tempCardIndex - 1).getClass() == Sandbags.class) {&#xD;
        if (choice == 1) {&#xD;
            if (this.useSandbags(player.getCards().get(tempCardIndex - 1), tempCardIndex - 1, player)) {&#xD;
                return true;&#xD;
            }&#xD;
        } else {&#xD;
            this.dropPlayerCard(player, tempCardIndex - 1, player.getCards().get(tempCardIndex - 1));&#xD;
            return true;&#xD;
        }&#xD;
    } else {&#xD;
        this.dropPlayerCard(player, tempCardIndex - 1, player.getCards().get(tempCardIndex - 1));&#xD;
        return true;&#xD;
    }&#xD;
    return false;&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_viidQE7XEeuHa4bUOfM2xQ" name="MyGameManager" visibility="public" method="_vilgkE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vimusE7XEeuHa4bUOfM2xQ" name="init" visibility="public" method="_vinVwE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vinVwU7XEeuHa4bUOfM2xQ" name="initRoles" visibility="public" method="_vin80U7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vin80E7XEeuHa4bUOfM2xQ" name="tempInt">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vioj4E7XEeuHa4bUOfM2xQ" name="initAssignCards" visibility="public" method="_vioj4U7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vipK8E7XEeuHa4bUOfM2xQ" name="useFloodCard" visibility="private" method="_vipK8U7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vipK8k7XEeuHa4bUOfM2xQ" name="ifLose" visibility="private" method="_vipyAE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vipK807XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vipyAU7XEeuHa4bUOfM2xQ" name="ifLose1" visibility="public" method="_viqZEE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vipyAk7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_viqZEU7XEeuHa4bUOfM2xQ" name="ifLose2" visibility="public" method="_virAIE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_viqZEk7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_virAIU7XEeuHa4bUOfM2xQ" name="ifLose3" visibility="public" method="_virAI07XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_virAIk7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_virnME7XEeuHa4bUOfM2xQ" name="ifLose4" visibility="public" method="_virnMk7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_virnMU7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_visOQE7XEeuHa4bUOfM2xQ" name="useWaterRise" visibility="private" method="_vitcYE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vis1UE7XEeuHa4bUOfM2xQ" name="card" type="_vZnx0E7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_viuDcE7XEeuHa4bUOfM2xQ" name="useSandbags" visibility="private" method="_viy78E7XEeuHa4bUOfM2xQ" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_viuqgE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_viv4oE7XEeuHa4bUOfM2xQ" name="card" type="_vZnx0E7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_viwfsE7XEeuHa4bUOfM2xQ" name="cardIndex">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vixt0E7XEeuHa4bUOfM2xQ" name="player" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vi0KEE7XEeuHa4bUOfM2xQ" name="useHelicopterLift" visibility="private" method="_vi4bgE7XEeuHa4bUOfM2xQ" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vi0xIE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vi1YME7XEeuHa4bUOfM2xQ" name="card" type="_vZnx0E7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vi2mUE7XEeuHa4bUOfM2xQ" name="cardIndex">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vi3NYE7XEeuHa4bUOfM2xQ" name="player" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vi5CkE7XEeuHa4bUOfM2xQ" name="useFlyAbility" visibility="private" method="_vi7e0E7XEeuHa4bUOfM2xQ" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vi5poE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vi6QsE7XEeuHa4bUOfM2xQ" name="player" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vi8F4E7XEeuHa4bUOfM2xQ" name="ifWin" visibility="public" method="_vi9UAE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vi8s8E7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vi-iIE7XEeuHa4bUOfM2xQ" name="begin" visibility="public" method="_vi_JME7XEeuHa4bUOfM2xQ" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjAXUE7XEeuHa4bUOfM2xQ" name="end" visibility="public" method="_vjBlcE7XEeuHa4bUOfM2xQ" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjCzkE7XEeuHa4bUOfM2xQ" name="playerSink" visibility="private" method="_vjFP0E7XEeuHa4bUOfM2xQ" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjDaoE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjDaoU7XEeuHa4bUOfM2xQ" name="player" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjDaok7XEeuHa4bUOfM2xQ" name="nearestTile" type="_vZhrME7XEeuHa4bUOfM2xQ">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vjEowE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vjEowU7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjGd8E7XEeuHa4bUOfM2xQ" name="forceToChooseCardToDrop" visibility="private" method="_vjITIE7XEeuHa4bUOfM2xQ" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjHFAE7XEeuHa4bUOfM2xQ" name="player" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjI6ME7XEeuHa4bUOfM2xQ" name="chooseCardToDrop" visibility="private" method="_vjKvYE7XEeuHa4bUOfM2xQ" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjJhQE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjKIUE7XEeuHa4bUOfM2xQ" name="player" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjMkkE7XEeuHa4bUOfM2xQ" name="confirmToUseCard" visibility="private" method="_vjOZwE7XEeuHa4bUOfM2xQ" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjNLoE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjNLoU7XEeuHa4bUOfM2xQ" name="hint" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjPn4E7XEeuHa4bUOfM2xQ" name="dropCard" visibility="private" method="_vjQ2AE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjQO8E7XEeuHa4bUOfM2xQ" name="card" type="_vZnx0E7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjRdEE7XEeuHa4bUOfM2xQ" name="dropPlayerCard" visibility="private" method="_vjUgYE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjSEIE7XEeuHa4bUOfM2xQ" name="currPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjTSQE7XEeuHa4bUOfM2xQ" name="cardIndex">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjT5UE7XEeuHa4bUOfM2xQ" name="card" type="_vZnx0E7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjVugE7XEeuHa4bUOfM2xQ" name="takeAction" visibility="public" method="_vjXjsE7XEeuHa4bUOfM2xQ" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjZY4E7XEeuHa4bUOfM2xQ" name="printCLI" visibility="public" method="_vjZ_8E7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjbOEE7XEeuHa4bUOfM2xQ" name="printBoardWithAllCoordCLI" visibility="public" method="_vjb1IE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjccME7XEeuHa4bUOfM2xQ" name="printFDeckCLI" visibility="public" method="_vjdDQE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjeRYE7XEeuHa4bUOfM2xQ" name="printUsedFDeckCLI" visibility="public" method="_vjeRYU7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjffgE7XEeuHa4bUOfM2xQ" name="printTreasureDeckCLI" visibility="public" method="_vjgGkE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjgtoE7XEeuHa4bUOfM2xQ" name="printUsedTreasureDeckCLI" visibility="public" method="_vjgtoU7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjgtok7XEeuHa4bUOfM2xQ" name="printWaterMeterCLI" visibility="public" method="_vjhUsE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjhUsU7XEeuHa4bUOfM2xQ" name="printPlayersCLI" visibility="public" method="_vjh7wE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjjJ4E7XEeuHa4bUOfM2xQ" name="getBoard" visibility="public" method="_vjjw8E7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjjJ4U7XEeuHa4bUOfM2xQ" type="_vYAoQE7XEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjk_EE7XEeuHa4bUOfM2xQ" name="setBoard" visibility="public" method="_vjm0QE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjmNME7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjopcE7XEeuHa4bUOfM2xQ" name="getFloodDeck" visibility="public" method="_vjqeoE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjpQgE7XEeuHa4bUOfM2xQ" type="_vdiogE7XEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjrswE7XEeuHa4bUOfM2xQ" name="setFloodDeck" visibility="public" method="_vjs64E7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjsT0E7XEeuHa4bUOfM2xQ" name="floodDeck" type="_vdiogE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjth8E7XEeuHa4bUOfM2xQ" name="getUsedFloodDeck" visibility="public" method="_vjuwEE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjuJAE7XEeuHa4bUOfM2xQ" type="_vdiogE7XEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjv-ME7XEeuHa4bUOfM2xQ" name="setUsedFloodDeck" visibility="public" method="_vjxMUE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjwlQE7XEeuHa4bUOfM2xQ" name="usedFloodDeck" type="_vdiogE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vjxzYE7XEeuHa4bUOfM2xQ" name="getTreasureDeck" visibility="public" method="_vjzBgE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vjyacE7XEeuHa4bUOfM2xQ" type="_vdzuQE7XEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vj02sE7XEeuHa4bUOfM2xQ" name="setTreasureDeck" visibility="public" method="_vj2r4E7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vj2E0E7XEeuHa4bUOfM2xQ" name="treasureDeck" type="_vdzuQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vj36AE7XEeuHa4bUOfM2xQ" name="getUsedTreasureDeck" visibility="public" method="_vj4hEE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vj36AU7XEeuHa4bUOfM2xQ" type="_vdzuQE7XEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vj5vME7XEeuHa4bUOfM2xQ" name="setUsedTreasureDeck" visibility="public" method="_vj7kYE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vj6WQE7XEeuHa4bUOfM2xQ" name="usedTreasureDeck" type="_vdzuQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vj8ygE7XEeuHa4bUOfM2xQ" name="getSelectedPlayer" visibility="public" method="_vj9ZkE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vj8ygU7XEeuHa4bUOfM2xQ" type="_gbieYE7WEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vj9ZkU7XEeuHa4bUOfM2xQ" name="setSelectedPlayer" visibility="public" method="_vj_OwE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vj-nsE7XEeuHa4bUOfM2xQ" name="selectedPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vkAc4E7XEeuHa4bUOfM2xQ" name="getCurrPlayer" visibility="public" method="_vkBrAE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkBD8E7XEeuHa4bUOfM2xQ" type="_gbieYE7WEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vkC5IE7XEeuHa4bUOfM2xQ" name="setCurrPlayer" visibility="public" method="_vkEHQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkDgME7XEeuHa4bUOfM2xQ" name="currPlayer" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vkF8cE7XEeuHa4bUOfM2xQ" name="getWaterMeter" visibility="public" method="_vkHKkE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkGjgE7XEeuHa4bUOfM2xQ" type="_vfnsIE7XEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vkHxoE7XEeuHa4bUOfM2xQ" name="setWaterMeter" visibility="public" method="_vkIYsE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkHxoU7XEeuHa4bUOfM2xQ" name="waterMeter" type="_vfnsIE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vkKN4E7XEeuHa4bUOfM2xQ" name="initForTest" visibility="public" method="_vkMDEE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkK08E7XEeuHa4bUOfM2xQ" name="temp1">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkLcAE7XEeuHa4bUOfM2xQ" name="temp2">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vkN4QE7XEeuHa4bUOfM2xQ" name="useSandbagsForTest" visibility="public" method="_vkSwwE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkOfUE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkPGYE7XEeuHa4bUOfM2xQ" name="card" type="_vZnx0E7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkPtcE7XEeuHa4bUOfM2xQ" name="cardIndex">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkQ7kE7XEeuHa4bUOfM2xQ" name="player" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkRioE7XEeuHa4bUOfM2xQ" name="tempInt">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vkSJsE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vkSJsU7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vkTX0E7XEeuHa4bUOfM2xQ" name="useHelicopterLiftByMultipleForTest" visibility="public" method="_vkY3YU7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkT-4E7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkUl8E7XEeuHa4bUOfM2xQ" name="card" type="_vZnx0E7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkVNAE7XEeuHa4bUOfM2xQ" name="cardIndex">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkWbIE7XEeuHa4bUOfM2xQ" name="player" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkXCME7XEeuHa4bUOfM2xQ" name="tempIntHashSet" type="_gb5qwk7WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkXpQE7XEeuHa4bUOfM2xQ" name="tempInt2">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vkYQUE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vkY3YE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vkZecE7XEeuHa4bUOfM2xQ" name="useWaterRiseTest" visibility="public" method="_vkaskE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkZecU7XEeuHa4bUOfM2xQ" name="card" type="_vZnx0E7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vkchwE7XEeuHa4bUOfM2xQ" name="UseCardWhileDrop" visibility="public" method="_vkgMIE7XEeuHa4bUOfM2xQ" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkdI0E7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkdv4E7XEeuHa4bUOfM2xQ" name="player" type="_gbieYE7WEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkeW8E7XEeuHa4bUOfM2xQ" name="tempCardIndex">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vke-AE7XEeuHa4bUOfM2xQ" name="choice">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_vkjPcE7XEeuHa4bUOfM2xQ" name="role">
        <packagedElement xmi:type="uml:Class" xmi:id="_vkkdkE7XEeuHa4bUOfM2xQ" name="Navigator" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_vklrsE7XEeuHa4bUOfM2xQ" general="_vklEoE7XEeuHa4bUOfM2xQ"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vkovAE7XEeuHa4bUOfM2xQ" name="Navigator" specification="_vkmSwE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.name = &quot;Navigator&quot;;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vksZYE7XEeuHa4bUOfM2xQ" name="getValidGuideDestination" specification="_vkpWEE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (Options.ifNavigatorHasOwnAbility) {&#xD;
        if (this.AP == 0) {&#xD;
            //no enough AP&#xD;
            return null;&#xD;
        } else if (board == null) {&#xD;
            System.err.println(&quot;board == null&quot;);&#xD;
            //ERR&#xD;
            return null;&#xD;
        } else if (targetRole == null) {&#xD;
            System.err.println(&quot;targetRole == null&quot;);&#xD;
            //ERR&#xD;
            return null;&#xD;
        } else //clockwise -- ↑→↓←↗↘↙↖&#xD;
        {&#xD;
            HashSet&lt;StdTile> tempValidTiles1 = new HashSet&lt;StdTile>();&#xD;
            HashSet&lt;StdTile> tempValidTiles2 = new HashSet&lt;StdTile>();&#xD;
            int[] currCoord = targetRole.getCoord();&#xD;
            //clockwise -- ↑→↓←↗↘↙↖&#xD;
            int[] rowIncrement = { -1, 0, 1, 0, -1, 1, 1, -1 };&#xD;
            //clockwise -- ↑→↓←↗↘↙↖&#xD;
            int[] colIncrement = { 0, 1, 0, -1, 1, 1, -1, -1 };&#xD;
            StdTile tempTile;&#xD;
            for (//↑→↓←&#xD;
            int i = 0; //↑→↓←&#xD;
            i &lt; 4; //↑→↓←&#xD;
            i++) {&#xD;
                tempTile = board.getStdTile(currCoord[0] + rowIncrement[i], //↑→↓←&#xD;
                currCoord[1] + //↑→↓←&#xD;
                colIncrement[i]);&#xD;
                if (tempTile != null) {&#xD;
                    if ((tempTile.getStatus() != Status.SUNK) || (targetRole.getClass() == Diver.class)) {&#xD;
                        tempValidTiles1.add(tempTile);&#xD;
                    }&#xD;
                }&#xD;
            }&#xD;
            if (targetRole.getClass() == Explorer.class) {&#xD;
                for (//↗↘↙↖&#xD;
                int i = 4; //↗↘↙↖&#xD;
                i &lt; 8; //↗↘↙↖&#xD;
                i++) {&#xD;
                    tempTile = board.getStdTile(currCoord[0] + rowIncrement[i], //↗↘↙↖&#xD;
                    currCoord[1] + //↗↘↙↖&#xD;
                    colIncrement[i]);&#xD;
                    if (tempTile != null) {&#xD;
                        if (tempTile.getStatus() != Status.SUNK) {&#xD;
                            tempValidTiles1.add(tempTile);&#xD;
                        }&#xD;
                    }&#xD;
                }&#xD;
            }&#xD;
            HashSet&lt;StdTile> tempValidTiles3 = new HashSet&lt;StdTile>();&#xD;
            for (StdTile i : tempValidTiles1) {&#xD;
                tempValidTiles3 = getValidGuideDestinationUP2(board, targetRole, i);&#xD;
                if (tempValidTiles3 != null) {&#xD;
                    if (tempValidTiles3.size() != 0) {&#xD;
                        for (StdTile j : tempValidTiles3) {&#xD;
                            tempValidTiles2.add(j);&#xD;
                        }&#xD;
                    }&#xD;
                }&#xD;
            }&#xD;
            for (StdTile i : tempValidTiles2) {&#xD;
                tempValidTiles1.add(i);&#xD;
            }&#xD;
            if (tempValidTiles1.size() != 0) {&#xD;
                this.AP--;&#xD;
            }&#xD;
            return tempValidTiles1;&#xD;
        }&#xD;
    } else {&#xD;
        return //disabled&#xD;
        null;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vkxR4E7XEeuHa4bUOfM2xQ" name="getValidGuideDestinationUP2" specification="_vkuOkE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (Options.ifNavigatorHasOwnAbility) {&#xD;
        if (this.AP == 0) {&#xD;
            //no enough AP&#xD;
            return null;&#xD;
        } else if (board == null) {&#xD;
            System.err.println(&quot;board == null&quot;);&#xD;
            //ERR&#xD;
            return null;&#xD;
        } else if (targetRole == null) {&#xD;
            System.err.println(&quot;targetRole == null&quot;);&#xD;
            //ERR&#xD;
            return null;&#xD;
        } else if (currTile == null) {&#xD;
            System.err.println(&quot;currTile == null&quot;);&#xD;
            //ERR&#xD;
            return null;&#xD;
        } else //clockwise -- ↑→↓←↗↘↙↖&#xD;
        {&#xD;
            HashSet&lt;StdTile> tempValidTiles2 = new HashSet&lt;StdTile>();&#xD;
            int[] currCoord = currTile.getCoord();&#xD;
            //clockwise -- ↑→↓←↗↘↙↖&#xD;
            int[] rowIncrement = { -1, 0, 1, 0, -1, 1, 1, -1 };&#xD;
            //clockwise -- ↑→↓←↗↘↙↖&#xD;
            int[] colIncrement = { 0, 1, 0, -1, 1, 1, -1, -1 };&#xD;
            StdTile tempTile;&#xD;
            for (//↑→↓←&#xD;
            int i = 0; //↑→↓←&#xD;
            i &lt; 4; //↑→↓←&#xD;
            i++) {&#xD;
                tempTile = board.getStdTile(currCoord[0] + rowIncrement[i], //↑→↓←&#xD;
                currCoord[1] + //↑→↓←&#xD;
                colIncrement[i]);&#xD;
                if (tempTile != null) {&#xD;
                    if ((tempTile.getStatus() != Status.SUNK) || (targetRole.getClass() == Diver.class)) {&#xD;
                        tempValidTiles2.add(tempTile);&#xD;
                    }&#xD;
                }&#xD;
            }&#xD;
            if (targetRole.getClass() == Explorer.class) {&#xD;
                for (//↗↘↙↖&#xD;
                int i = 4; //↗↘↙↖&#xD;
                i &lt; 8; //↗↘↙↖&#xD;
                i++) {&#xD;
                    tempTile = board.getStdTile(currCoord[0] + rowIncrement[i], //↗↘↙↖&#xD;
                    currCoord[1] + //↗↘↙↖&#xD;
                    colIncrement[i]);&#xD;
                    if (tempTile != null) {&#xD;
                        if (tempTile.getStatus() != Status.SUNK) {&#xD;
                            tempValidTiles2.add(tempTile);&#xD;
                        }&#xD;
                    }&#xD;
                }&#xD;
            }&#xD;
            return tempValidTiles2;&#xD;
        }&#xD;
    } else {&#xD;
        return //disabled&#xD;
        null;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vkmSwE7XEeuHa4bUOfM2xQ" name="Navigator" visibility="public" method="_vkovAE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vkpWEE7XEeuHa4bUOfM2xQ" name="getValidGuideDestination" visibility="public" method="_vksZYE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkqkME7XEeuHa4bUOfM2xQ" type="_gb5qwk7WEeuHa4bUOfM2xQ" direction="return"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkrLQE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkryUE7XEeuHa4bUOfM2xQ" name="targetRole" type="_vklEoE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vkuOkE7XEeuHa4bUOfM2xQ" name="getValidGuideDestinationUP2" visibility="private" method="_vkxR4E7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vku1oE7XEeuHa4bUOfM2xQ" type="_gb5qwk7WEeuHa4bUOfM2xQ" direction="return"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkvcsE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkwDwE7XEeuHa4bUOfM2xQ" name="targetRole" type="_vklEoE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vkwq0E7XEeuHa4bUOfM2xQ" name="currTile" type="_vZhrME7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vklEoE7XEeuHa4bUOfM2xQ" name="StdRole" visibility="public" isAbstract="true">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vlaLEE7XEeuHa4bUOfM2xQ" name="isAlive" visibility="protected" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vlayIE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>true</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vlcAQE7XEeuHa4bUOfM2xQ" name="AP" visibility="protected" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vldOYE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vldOYU7XEeuHa4bUOfM2xQ" name="currStdTile" visibility="protected" type="_vZhrME7XEeuHa4bUOfM2xQ" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vld1cE7XEeuHa4bUOfM2xQ" name="cards" visibility="protected" type="_vZnx0E7XEeuHa4bUOfM2xQ" isUnique="false">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vld1cU7XEeuHa4bUOfM2xQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vlecgE7XEeuHa4bUOfM2xQ" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vlfDkE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new ArrayList&lt;TreasureCard>()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vlfqoE7XEeuHa4bUOfM2xQ" name="treasures" visibility="protected" type="_vPc-oU7WEeuHa4bUOfM2xQ" isUnique="false">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vlg4wE7XEeuHa4bUOfM2xQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vlhf0E7XEeuHa4bUOfM2xQ" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vlhf0U7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new ArrayList&lt;Treasure>()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vlit8E7XEeuHa4bUOfM2xQ" name="name" visibility="protected" type="_eKOjE07WEeuHa4bUOfM2xQ" isUnique="false"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vlnmcE7XEeuHa4bUOfM2xQ" name="StdRole" specification="_vlj8EE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    ;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vloNgU7XEeuHa4bUOfM2xQ" name="begin" specification="_vloNgE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.AP = 3;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vlqCsE7XEeuHa4bUOfM2xQ" name="end" specification="_vloNgk7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.AP = 0;&#xD;
    if (this.currStdTile.getStatus() == Status.SUNK) {&#xD;
        return this.sink(board);&#xD;
    }&#xD;
    return null;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vlse8E7XEeuHa4bUOfM2xQ" name="getIsAlive" specification="_vlrQ0E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.isAlive;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vlttEU7XEeuHa4bUOfM2xQ" name="getAP" specification="_vltGAE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.AP;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vlwJUE7XEeuHa4bUOfM2xQ" name="getCurrStdTile" specification="_vlu7ME7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return currStdTile;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vlzzsE7XEeuHa4bUOfM2xQ" name="getCards" specification="_vlxXcE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.cards;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vl2P8E7XEeuHa4bUOfM2xQ" name="getTreasures" specification="_vl0awE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.treasures;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vl4sME7XEeuHa4bUOfM2xQ" name="getName" specification="_vl3eEE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.name;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vl7IcE7XEeuHa4bUOfM2xQ" name="setIsAlive" specification="_vl5TQE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.isAlive = isAlive;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vl-LwE7XEeuHa4bUOfM2xQ" name="setAP" specification="_vl89oE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.AP = AP;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmAoAE7XEeuHa4bUOfM2xQ" name="setCurrStdTile" specification="_vl-y0E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.currStdTile = currStdTile;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmDrUE7XEeuHa4bUOfM2xQ" name="setCards" specification="_vmB2IE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.cards = cards;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmHVsE7XEeuHa4bUOfM2xQ" name="setTreasures" specification="_vmE5cE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.treasures = treasures;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmJx8E7XEeuHa4bUOfM2xQ" name="setName" specification="_vmIj0E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.name = name;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmMOME7XEeuHa4bUOfM2xQ" name="getCoord" specification="_vmLAEE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return this.currStdTile.getCoord();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmODYE7XEeuHa4bUOfM2xQ" name="getDestination" specification="_vmMOMU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    int[] temp = currStdTile.getCoord();&#xD;
    int row = temp[0], col = temp[1];&#xD;
    if ((row == -1) &amp;&amp; (col == -1)) {&#xD;
        System.err.print(&quot;func getDestination ERR -- coordinate not initialize&quot;);&#xD;
        return null;&#xD;
    } else if ((row &lt; 0) || (row > 5) || (col &lt; 0) || (col > 5)) {&#xD;
        System.err.print(&quot;func getDestination ERR -- coordinate out of range&quot;);&#xD;
        return null;&#xD;
    } else {&#xD;
        switch(directionType) {&#xD;
            //↑&#xD;
            case UP:&#xD;
                if (row == 0) {&#xD;
                    //not allowed&#xD;
                    return null;&#xD;
                } else {&#xD;
                    return board.getStdTile(row - 1, col);&#xD;
                }&#xD;
            //↓&#xD;
            case DOWN:&#xD;
                if (row == 5) {&#xD;
                    //not allowed&#xD;
                    return null;&#xD;
                } else {&#xD;
                    return board.getStdTile(row + 1, col);&#xD;
                }&#xD;
            //←&#xD;
            case LEFT:&#xD;
                if (col == 0) {&#xD;
                    //not allowed&#xD;
                    return null;&#xD;
                } else {&#xD;
                    return board.getStdTile(row, col - 1);&#xD;
                }&#xD;
            //→&#xD;
            case RIGHT:&#xD;
                if (col == 5) {&#xD;
                    //not allowed&#xD;
                    return null;&#xD;
                } else {&#xD;
                    return board.getStdTile(row, col + 1);&#xD;
                }&#xD;
            //?&#xD;
            case MIDDLE:&#xD;
                return this.currStdTile;&#xD;
            //↖&#xD;
            case TOPLEFT:&#xD;
                if ((row + col == 2) || (row + col == 3)) {&#xD;
                    //not allowed&#xD;
                    return null;&#xD;
                } else {&#xD;
                    return board.getStdTile(row - 1, col - 1);&#xD;
                }&#xD;
            case //↘&#xD;
            BOTTOMRIGHT:&#xD;
                if ((row + col == 7) || (row + col == 8)) {&#xD;
                    //not allowed&#xD;
                    return null;&#xD;
                } else {&#xD;
                    return board.getStdTile(row + 1, col + 1);&#xD;
                }&#xD;
            case //↙&#xD;
            BOTTOMLEFT:&#xD;
                int tempRow = 5 - row;&#xD;
                if ((tempRow + col == 2) || (tempRow + col == 3)) {&#xD;
                    //not allowed&#xD;
                    return null;&#xD;
                } else {&#xD;
                    return board.getStdTile(row + 1, col - 1);&#xD;
                }&#xD;
            //↗&#xD;
            case TOPRIGHT:&#xD;
                int tempCol = 5 - col;&#xD;
                if ((row + tempCol == 2) || (row + tempCol == 3)) {&#xD;
                    //not allowed&#xD;
                    return null;&#xD;
                } else {&#xD;
                    return board.getStdTile(row - 1, col + 1);&#xD;
                }&#xD;
            //ERR&#xD;
            default:&#xD;
                return null;&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmRtwE7XEeuHa4bUOfM2xQ" name="move" specification="_vmPRgE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.AP == 0) {&#xD;
        //not enough AP&#xD;
        return false;&#xD;
    } else {&#xD;
        switch(directionType) {&#xD;
            //↑&#xD;
            case UP:&#xD;
            //↓&#xD;
            case DOWN:&#xD;
            //←&#xD;
            case LEFT:&#xD;
            //→&#xD;
            case RIGHT:&#xD;
                StdTile destination = getDestination(board, directionType);&#xD;
                if (destination == null) {&#xD;
                    //failure&#xD;
                    return false;&#xD;
                } else if (destination.getStatus() == Status.SUNK) {&#xD;
                    //failure&#xD;
                    return false;&#xD;
                } else {&#xD;
                    this.freeMove(destination);&#xD;
                    this.AP--;&#xD;
                    //success&#xD;
                    return true;&#xD;
                }&#xD;
            //?//cancel&#xD;
            case MIDDLE:&#xD;
            //↖//not allowed&#xD;
            case TOPLEFT:&#xD;
            //↘//not allowed&#xD;
            case BOTTOMRIGHT:&#xD;
            //↙//not allowed&#xD;
            case BOTTOMLEFT:&#xD;
            //↗//not allowed&#xD;
            case TOPRIGHT:&#xD;
            //ERR&#xD;
            default:&#xD;
                //failure&#xD;
                return false;&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmUKAE7XEeuHa4bUOfM2xQ" name="freeMove" specification="_vmS74E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    destination.getPlayers().add(this);&#xD;
    this.currStdTile.getPlayers().remove(this);&#xD;
    this.currStdTile = destination;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmXNUE7XEeuHa4bUOfM2xQ" name="shoreUp" specification="_vmUxEE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.AP == 0) {&#xD;
        //not enough AP&#xD;
        return false;&#xD;
    } else {&#xD;
        switch(directionType) {&#xD;
            //↑&#xD;
            case UP:&#xD;
            //↓&#xD;
            case DOWN:&#xD;
            //←&#xD;
            case LEFT:&#xD;
            //→&#xD;
            case RIGHT:&#xD;
            //?&#xD;
            case MIDDLE:&#xD;
                StdTile destination = getDestination(board, directionType);&#xD;
                if (destination == null) {&#xD;
                    //failure&#xD;
                    return false;&#xD;
                } else {&#xD;
                    if (this.freeShoreUp(destination)) {&#xD;
                        this.AP--;&#xD;
                        //success&#xD;
                        return true;&#xD;
                    } else {&#xD;
                        //failure&#xD;
                        return false;&#xD;
                    }&#xD;
                }&#xD;
            //↖//not allowed&#xD;
            case TOPLEFT:&#xD;
            //↘//not allowed&#xD;
            case BOTTOMRIGHT:&#xD;
            //↙//not allowed&#xD;
            case BOTTOMLEFT:&#xD;
            //↗//not allowed&#xD;
            case TOPRIGHT:&#xD;
            //ERR&#xD;
            default:&#xD;
                //failure&#xD;
                return false;&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmaQoE7XEeuHa4bUOfM2xQ" name="freeShoreUp" specification="_vmYbcE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return destination.storeUp();&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmd7AE7XEeuHa4bUOfM2xQ" name="sink" specification="_vmbewE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.currStdTile.getStatus() != Status.SUNK) {&#xD;
        System.err.println(&quot;func sink ERR -- mistaken call&quot;);&#xD;
        //mistaken call&#xD;
        return null;&#xD;
    } else {&#xD;
        ArrayList&lt;StdTile> tempList = new ArrayList&lt;StdTile>();&#xD;
        StdTile temp;&#xD;
        ArrayList&lt;DirectionType> fourDirectionTypes = new ArrayList&lt;DirectionType>();&#xD;
        fourDirectionTypes.add(DirectionType.UP);&#xD;
        fourDirectionTypes.add(DirectionType.DOWN);&#xD;
        fourDirectionTypes.add(DirectionType.LEFT);&#xD;
        fourDirectionTypes.add(DirectionType.RIGHT);&#xD;
        for (DirectionType i : fourDirectionTypes) {&#xD;
            temp = this.getDestination(board, i);&#xD;
            if (temp == null) {&#xD;
                ;&#xD;
            } else if (temp.getStatus() == Status.SUNK) {&#xD;
                ;&#xD;
            } else {&#xD;
                tempList.add(temp);&#xD;
            }&#xD;
        }&#xD;
        if (tempList.size() == 0) {&#xD;
            this.isAlive = false;&#xD;
        }&#xD;
        return tempList;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmfwME7XEeuHa4bUOfM2xQ" name="addTreasureCard" specification="_vmeiEE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.cards.add(card);&#xD;
    if (cards.size() == 6) {&#xD;
        //if the num of cards == 6&#xD;
        return false;&#xD;
    } else {&#xD;
        return true;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmgXQk7XEeuHa4bUOfM2xQ" name="dropTreasureCard" specification="_vmfwMU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (cards.size() == 0) {&#xD;
        //if this player has no card&#xD;
        return false;&#xD;
    } else if (cards.size() &lt; cardIndex + 1) {&#xD;
        //if card index > the sum of curr player's cards&#xD;
        return false;&#xD;
    } else {&#xD;
        usedTreasureDeck.getStack().push(this.cards.remove(cardIndex));&#xD;
        return true;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmhlYE7XEeuHa4bUOfM2xQ" name="removeTreasureCard" specification="_vmg-UE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (cards.size() == 0) {&#xD;
        //if this player has no card&#xD;
        return false;&#xD;
    } else if (cards.size() &lt; cardIndex + 1) {&#xD;
        //if card index > the sum of curr player's cards&#xD;
        return false;&#xD;
    } else {&#xD;
        this.cards.remove(cardIndex);&#xD;
        return true;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmiMck7XEeuHa4bUOfM2xQ" name="passCard" specification="_vmhlYU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.AP == 0) {&#xD;
        //not enough AP&#xD;
        return false;&#xD;
    } else {&#xD;
        int[] destCoord = targetRole.getCoord();&#xD;
        int destRow = destCoord[0], destCol = destCoord[1];&#xD;
        int[] currCoord = this.getCoord();&#xD;
        int currRow = currCoord[0], currCol = currCoord[1];&#xD;
        if ((destRow == currRow) &amp;&amp; (destCol == currCol)) {&#xD;
            this.freePassCard(targetRole, cardIndex);&#xD;
            this.AP--;&#xD;
            //success&#xD;
            return true;&#xD;
        } else {&#xD;
            //failure&#xD;
            return false;&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmjakE7XEeuHa4bUOfM2xQ" name="freePassCard" specification="_vmizgE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    targetRole.addTreasureCard(this.getCards().get(cardIndex));&#xD;
    this.removeTreasureCard(cardIndex);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmkBoE7XEeuHa4bUOfM2xQ" name="captureTreasure" specification="_vmjakU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.AP == 0) {&#xD;
        //not enough AP&#xD;
        return false;&#xD;
    } else {&#xD;
        ArrayList&lt;Integer> temp = this.currStdTile.callTreasure(this.cards);&#xD;
        if (temp == null) {&#xD;
            System.err.print(&quot; func captureTreasure ERR -- temp == null&quot;);&#xD;
            return false;&#xD;
        } else if (temp.size() == 4) {&#xD;
            Treasure tempTreasure = this.currStdTile.getTreasure();&#xD;
            if (tempTreasure == null) {&#xD;
                //failure&#xD;
                return false;&#xD;
            } else {&#xD;
                this.treasures.add(tempTreasure);&#xD;
                for (int i : temp) {&#xD;
                    this.dropTreasureCard(i, usedTreasureDeck);&#xD;
                }&#xD;
                this.AP--;&#xD;
                //success&#xD;
                return true;&#xD;
            }&#xD;
        } else {&#xD;
            //not allowed&#xD;
            return false;&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmkosE7XEeuHa4bUOfM2xQ" name="printCLI" specification="_vmkBoU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    System.out.print(&quot;[&quot; + this.name + &quot;  AP: &quot; + this.AP + &quot;]&quot;);&#xD;
    if (this.treasures.size() > 0) {&#xD;
        for (Treasure i : this.treasures) {&#xD;
            System.out.print(&quot;  [Treasure &quot;);&#xD;
            if (i == null) {&#xD;
                System.out.print(&quot;null&quot;);&#xD;
            } else {&#xD;
                System.out.print(i.getName());&#xD;
            }&#xD;
            System.out.print(&quot;]&quot;);&#xD;
        }&#xD;
    }&#xD;
    TreasureType tempTreasureType;&#xD;
    int countFire = 0, countWind = 0, countStore = 0, countChalice = 0;&#xD;
    for (TreasureCard i : this.getCards()) {&#xD;
        tempTreasureType = i.getTreasureType();&#xD;
        if (tempTreasureType == TreasureType.FIRE) {&#xD;
            countFire++;&#xD;
        } else if (tempTreasureType == TreasureType.WIND) {&#xD;
            countWind++;&#xD;
        } else if (tempTreasureType == TreasureType.STONE) {&#xD;
            countStore++;&#xD;
        } else if (tempTreasureType == TreasureType.CHALICE) {&#xD;
            countChalice++;&#xD;
        } else {&#xD;
            ;&#xD;
        }&#xD;
    }&#xD;
    if (countWind >= 4) {&#xD;
        System.out.print(&quot;  [WindCards>=4]&quot;);&#xD;
    }&#xD;
    if (countChalice >= 4) {&#xD;
        System.out.print(&quot;  [ChaliceCards>=4]&quot;);&#xD;
    }&#xD;
    if (countFire >= 4) {&#xD;
        System.out.print(&quot;  [FireCards>=4]&quot;);&#xD;
    }&#xD;
    if (countStore >= 4) {&#xD;
        System.out.print(&quot;  [StoreCards>=4]&quot;);&#xD;
    }&#xD;
    System.out.println();&#xD;
    for (TreasureCard i : cards) {&#xD;
        i.printCLI();&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vlj8EE7XEeuHa4bUOfM2xQ" name="StdRole" visibility="public" method="_vlnmcE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vloNgE7XEeuHa4bUOfM2xQ" name="begin" visibility="public" method="_vloNgU7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vloNgk7XEeuHa4bUOfM2xQ" name="end" visibility="public" method="_vlqCsE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vloNg07XEeuHa4bUOfM2xQ" type="_vZhrME7XEeuHa4bUOfM2xQ" direction="return">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vlo0kE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vlpboE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlpboU7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vlrQ0E7XEeuHa4bUOfM2xQ" name="getIsAlive" visibility="public" method="_vlse8E7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlr34E7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vltGAE7XEeuHa4bUOfM2xQ" name="getAP" visibility="public" method="_vlttEU7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlttEE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vlu7ME7XEeuHa4bUOfM2xQ" name="getCurrStdTile" visibility="public" method="_vlwJUE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlu7MU7XEeuHa4bUOfM2xQ" type="_vZhrME7XEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vlxXcE7XEeuHa4bUOfM2xQ" name="getCards" visibility="public" method="_vlzzsE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlx-gE7XEeuHa4bUOfM2xQ" type="_vZnx0E7XEeuHa4bUOfM2xQ" direction="return">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vlylkE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vlzMoE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vl0awE7XEeuHa4bUOfM2xQ" name="getTreasures" visibility="public" method="_vl2P8E7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vl0awU7XEeuHa4bUOfM2xQ" type="_vPc-oU7WEeuHa4bUOfM2xQ" direction="return">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vl1o4E7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vl1o4U7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vl3eEE7XEeuHa4bUOfM2xQ" name="getName" visibility="public" method="_vl4sME7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vl4FIE7XEeuHa4bUOfM2xQ" type="_eKOjE07WEeuHa4bUOfM2xQ" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vl5TQE7XEeuHa4bUOfM2xQ" name="setIsAlive" visibility="public" method="_vl7IcE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vl6hYE7XEeuHa4bUOfM2xQ" name="isAlive">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vl89oE7XEeuHa4bUOfM2xQ" name="setAP" visibility="public" method="_vl-LwE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vl9ksE7XEeuHa4bUOfM2xQ" name="AP">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vl-y0E7XEeuHa4bUOfM2xQ" name="setCurrStdTile" visibility="public" method="_vmAoAE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmAA8E7XEeuHa4bUOfM2xQ" name="currStdTile" type="_vZhrME7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmB2IE7XEeuHa4bUOfM2xQ" name="setCards" visibility="public" method="_vmDrUE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmCdME7XEeuHa4bUOfM2xQ" name="cards" type="_vZnx0E7XEeuHa4bUOfM2xQ">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vmDEQE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vmDEQU7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmE5cE7XEeuHa4bUOfM2xQ" name="setTreasures" visibility="public" method="_vmHVsE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmFggE7XEeuHa4bUOfM2xQ" name="treasures" type="_vPc-oU7WEeuHa4bUOfM2xQ">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vmGHkE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vmGuoE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmIj0E7XEeuHa4bUOfM2xQ" name="setName" visibility="public" method="_vmJx8E7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmJK4E7XEeuHa4bUOfM2xQ" name="name" type="_eKOjE07WEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmLAEE7XEeuHa4bUOfM2xQ" name="getCoord" visibility="public" method="_vmMOME7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmLAEU7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vmLnIE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vmLnIU7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmMOMU7XEeuHa4bUOfM2xQ" name="getDestination" visibility="public" method="_vmODYE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmMOMk7XEeuHa4bUOfM2xQ" type="_vZhrME7XEeuHa4bUOfM2xQ" direction="return"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmM1QE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmNcUE7XEeuHa4bUOfM2xQ" name="directionType" type="_vkzHEE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmPRgE7XEeuHa4bUOfM2xQ" name="move" visibility="public" method="_vmRtwE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmP4kE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmQfoE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmRGsE7XEeuHa4bUOfM2xQ" name="directionType" type="_vkzHEE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmS74E7XEeuHa4bUOfM2xQ" name="freeMove" visibility="protected" method="_vmUKAE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmTi8E7XEeuHa4bUOfM2xQ" name="destination" type="_vZhrME7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmUxEE7XEeuHa4bUOfM2xQ" name="shoreUp" visibility="public" method="_vmXNUE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmVYIE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmV_ME7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmWmQE7XEeuHa4bUOfM2xQ" name="directionType" type="_vkzHEE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmYbcE7XEeuHa4bUOfM2xQ" name="freeShoreUp" visibility="protected" method="_vmaQoE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmZCgE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmZpkE7XEeuHa4bUOfM2xQ" name="destination" type="_vZhrME7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmbewE7XEeuHa4bUOfM2xQ" name="sink" visibility="public" method="_vmd7AE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmcF0E7XEeuHa4bUOfM2xQ" type="_vZhrME7XEeuHa4bUOfM2xQ" direction="return">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vmcs4E7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vmdT8E7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmdT8U7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmeiEE7XEeuHa4bUOfM2xQ" name="addTreasureCard" visibility="public" method="_vmfwME7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmfJIE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmfJIU7XEeuHa4bUOfM2xQ" name="card" type="_vZnx0E7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmfwMU7XEeuHa4bUOfM2xQ" name="dropTreasureCard" visibility="public" method="_vmgXQk7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmfwMk7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmgXQE7XEeuHa4bUOfM2xQ" name="cardIndex">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmgXQU7XEeuHa4bUOfM2xQ" name="usedTreasureDeck" type="_vdzuQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmg-UE7XEeuHa4bUOfM2xQ" name="removeTreasureCard" visibility="public" method="_vmhlYE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmg-UU7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmg-Uk7XEeuHa4bUOfM2xQ" name="cardIndex">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmhlYU7XEeuHa4bUOfM2xQ" name="passCard" visibility="public" method="_vmiMck7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmhlYk7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmiMcE7XEeuHa4bUOfM2xQ" name="targetRole" type="_vklEoE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmiMcU7XEeuHa4bUOfM2xQ" name="cardIndex">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmizgE7XEeuHa4bUOfM2xQ" name="freePassCard" visibility="protected" method="_vmjakE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmizgU7XEeuHa4bUOfM2xQ" name="targetRole" type="_vklEoE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmizgk7XEeuHa4bUOfM2xQ" name="cardIndex">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmjakU7XEeuHa4bUOfM2xQ" name="captureTreasure" visibility="public" method="_vmkBoE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmjakk7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmjak07XEeuHa4bUOfM2xQ" name="usedTreasureDeck" type="_vdzuQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmkBoU7XEeuHa4bUOfM2xQ" name="printCLI" visibility="public" method="_vmkosE7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Enumeration" xmi:id="_vkzHEE7XEeuHa4bUOfM2xQ" name="DirectionType" visibility="public">
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vkzuIE7XEeuHa4bUOfM2xQ" name="UP"/>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vk0VME7XEeuHa4bUOfM2xQ" name="DOWN"/>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vk08QE7XEeuHa4bUOfM2xQ" name="LEFT"/>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vk1jUE7XEeuHa4bUOfM2xQ" name="RIGHT"/>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vk1jUU7XEeuHa4bUOfM2xQ" name="TOPLEFT"/>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vk2KYE7XEeuHa4bUOfM2xQ" name="BOTTOMRIGHT"/>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vk2xcE7XEeuHa4bUOfM2xQ" name="BOTTOMLEFT"/>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vk3YgE7XEeuHa4bUOfM2xQ" name="TOPRIGHT"/>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_vk3_kE7XEeuHa4bUOfM2xQ" name="MIDDLE"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vk6b0E7XEeuHa4bUOfM2xQ" name="Engineer" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_vk7C4E7XEeuHa4bUOfM2xQ" general="_vklEoE7XEeuHa4bUOfM2xQ"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vk_7YE7XEeuHa4bUOfM2xQ" name="Engineer" specification="_vk7p8E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.name = &quot;Engineer&quot;;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vlDlwE7XEeuHa4bUOfM2xQ" name="shoreUp" specification="_vlAicE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.AP == 0) {&#xD;
        //not enough AP&#xD;
        return false;&#xD;
    } else {&#xD;
        if (directionType1 == directionType2) {&#xD;
            //mistaken call&#xD;
            return false;&#xD;
        } else if (directionType1 == null) {&#xD;
            //mistaken call&#xD;
            return false;&#xD;
        } else {&#xD;
            switch(directionType1) {&#xD;
                //↑&#xD;
                case UP:&#xD;
                //↓&#xD;
                case DOWN:&#xD;
                //←&#xD;
                case LEFT:&#xD;
                //→&#xD;
                case RIGHT:&#xD;
                //?&#xD;
                case MIDDLE:&#xD;
                    StdTile destination1 = getDestination(board, directionType1);&#xD;
                    if (destination1 == null) {&#xD;
                        //failure&#xD;
                        return false;&#xD;
                    } else {&#xD;
                        if (destination1.getStatus() == Status.FLOODED) {&#xD;
                            if (directionType2 == null) {&#xD;
                                //if any invalid input&#xD;
                                return false;&#xD;
                            } else {&#xD;
                                switch(directionType2) {&#xD;
                                    //↑&#xD;
                                    case UP:&#xD;
                                    //↓&#xD;
                                    case DOWN:&#xD;
                                    //←&#xD;
                                    case LEFT:&#xD;
                                    //→&#xD;
                                    case RIGHT:&#xD;
                                    //?&#xD;
                                    case MIDDLE:&#xD;
                                        StdTile destination2 = getDestination(board, directionType2);&#xD;
                                        if (destination2 == null) {&#xD;
                                            //failure&#xD;
                                            return false;&#xD;
                                        } else {&#xD;
                                            if (destination2.getStatus() == Status.FLOODED) {&#xD;
                                                this.freeShoreUp(destination1);&#xD;
                                                this.freeShoreUp(destination2);&#xD;
                                                //true&#xD;
                                                this.AP--;&#xD;
                                                return true;&#xD;
                                            } else {&#xD;
                                                //failure&#xD;
                                                return false;&#xD;
                                            }&#xD;
                                        }&#xD;
                                    //↖//not allowed&#xD;
                                    case TOPLEFT:&#xD;
                                    //↘//not allowed&#xD;
                                    case BOTTOMRIGHT:&#xD;
                                    //↙//not allowed&#xD;
                                    case BOTTOMLEFT:&#xD;
                                    //↗//not allowed&#xD;
                                    case TOPRIGHT:&#xD;
                                    //ERR&#xD;
                                    default:&#xD;
                                        //failure&#xD;
                                        return false;&#xD;
                                }&#xD;
                            }&#xD;
                        } else {&#xD;
                            //failure&#xD;
                            return false;&#xD;
                        }&#xD;
                    }&#xD;
                //↖//not allowed&#xD;
                case TOPLEFT:&#xD;
                //↘//not allowed&#xD;
                case BOTTOMRIGHT:&#xD;
                //↙//not allowed&#xD;
                case BOTTOMLEFT:&#xD;
                //↗//not allowed&#xD;
                case TOPRIGHT:&#xD;
                //ERR&#xD;
                default:&#xD;
                    //failure&#xD;
                    return false;&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vk7p8E7XEeuHa4bUOfM2xQ" name="Engineer" visibility="public" method="_vk_7YE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vlAicE7XEeuHa4bUOfM2xQ" name="shoreUp" visibility="public" method="_vlDlwE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlBJgE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlBwkE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlCXoE7XEeuHa4bUOfM2xQ" name="directionType1" type="_vkzHEE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlC-sE7XEeuHa4bUOfM2xQ" name="directionType2" type="_vkzHEE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vlGpEE7XEeuHa4bUOfM2xQ" name="Diver" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_vlHQIE7XEeuHa4bUOfM2xQ" general="_vklEoE7XEeuHa4bUOfM2xQ"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vlK6gE7XEeuHa4bUOfM2xQ" name="Diver" specification="_vlH3ME7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.name = &quot;Diver&quot;;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vlOk4U7XEeuHa4bUOfM2xQ" name="end" specification="_vlMIoE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.AP = 0;&#xD;
    if (this.currStdTile.getStatus() == Status.SUNK) {&#xD;
        if (Options.ifDiverAllowedStopAtSunkTile) {&#xD;
            return this.sink(board);&#xD;
        } else {&#xD;
            this.isAlive = false;&#xD;
            return null;&#xD;
        }&#xD;
    } else {&#xD;
        return null;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vlRoMU7XEeuHa4bUOfM2xQ" name="move" specification="_vlPzAE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.AP == 0) {&#xD;
        //not enough AP&#xD;
        return false;&#xD;
    } else {&#xD;
        switch(directionType) {&#xD;
            //↑&#xD;
            case UP:&#xD;
            //↓&#xD;
            case DOWN:&#xD;
            //←&#xD;
            case LEFT:&#xD;
            //→&#xD;
            case RIGHT:&#xD;
                StdTile destination = getDestination(board, directionType);&#xD;
                if (destination == null) {&#xD;
                    //failure&#xD;
                    return false;&#xD;
                } else {&#xD;
                    this.freeMove(destination);&#xD;
                    this.AP--;&#xD;
                    //success&#xD;
                    return true;&#xD;
                }&#xD;
            //?//cancel&#xD;
            case MIDDLE:&#xD;
            //↖//not allowed&#xD;
            case TOPLEFT:&#xD;
            //↘//not allowed&#xD;
            case BOTTOMRIGHT:&#xD;
            //↙//not allowed&#xD;
            case BOTTOMLEFT:&#xD;
            //↗//not allowed&#xD;
            case TOPRIGHT:&#xD;
            //ERR&#xD;
            default:&#xD;
                //failure&#xD;
                return false;&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vlUEcU7XEeuHa4bUOfM2xQ" name="sink" specification="_vlS2UE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    int[] currCoord = this.currStdTile.getCoord();&#xD;
    int currRow = currCoord[0], currCol = currCoord[1];&#xD;
    ArrayList&lt;StdTile> tempList = new ArrayList&lt;StdTile>();&#xD;
    StdTile temp;&#xD;
    int distance = 1;&#xD;
    // ╱↖ // ↗╲ // ↘╱ // ╲↙&#xD;
    do {&#xD;
        for (// ╱↖&#xD;
        int i = 0, y = 0, x = -distance; // ╱↖&#xD;
        i &lt; distance; // ╱↖&#xD;
        i++, // ╱↖&#xD;
        y--, // ╱↖&#xD;
        x++) {&#xD;
            temp = board.getStdTile(currRow + y, currCol + x);&#xD;
            if (temp == null) {&#xD;
                ;&#xD;
            } else if (temp.getStatus() == Status.SUNK) {&#xD;
                ;&#xD;
            } else {&#xD;
                tempList.add(temp);&#xD;
            }&#xD;
        }&#xD;
        for (// ↗╲&#xD;
        int i = 0, y = -distance, x = 0; // ↗╲&#xD;
        i &lt; distance; // ↗╲&#xD;
        i++, // ↗╲&#xD;
        y++, // ↗╲&#xD;
        x++) {&#xD;
            temp = board.getStdTile(currRow + y, currCol + x);&#xD;
            if (temp == null) {&#xD;
                ;&#xD;
            } else if (temp.getStatus() == Status.SUNK) {&#xD;
                ;&#xD;
            } else {&#xD;
                tempList.add(temp);&#xD;
            }&#xD;
        }&#xD;
        for (// ↘╱&#xD;
        int i = 0, y = 0, x = distance; // ↘╱&#xD;
        i &lt; distance; // ↘╱&#xD;
        i++, // ↘╱&#xD;
        y++, // ↘╱&#xD;
        x--) {&#xD;
            temp = board.getStdTile(currRow + y, currCol + x);&#xD;
            if (temp == null) {&#xD;
                ;&#xD;
            } else if (temp.getStatus() == Status.SUNK) {&#xD;
                ;&#xD;
            } else {&#xD;
                tempList.add(temp);&#xD;
            }&#xD;
        }&#xD;
        for (// ╲↙&#xD;
        int i = 0, y = distance, x = 0; // ╲↙&#xD;
        i &lt; distance; // ╲↙&#xD;
        i++, // ╲↙&#xD;
        y--, // ╲↙&#xD;
        x--) {&#xD;
            temp = board.getStdTile(currRow + y, currCol + x);&#xD;
            if (temp == null) {&#xD;
                ;&#xD;
            } else if (temp.getStatus() == Status.SUNK) {&#xD;
                ;&#xD;
            } else {&#xD;
                tempList.add(temp);&#xD;
            }&#xD;
        }&#xD;
    } while ((tempList.size() == 0) &amp;&amp; (distance++ != 7));&#xD;
    if (tempList.size() == 0) {&#xD;
        this.isAlive = false;&#xD;
    }&#xD;
    return tempList;&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vlH3ME7XEeuHa4bUOfM2xQ" name="Diver" visibility="public" method="_vlK6gE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vlMIoE7XEeuHa4bUOfM2xQ" name="end" visibility="public" method="_vlOk4U7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlNWwE7XEeuHa4bUOfM2xQ" type="_vZhrME7XEeuHa4bUOfM2xQ" direction="return">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vlN90E7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vlN90U7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlOk4E7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vlPzAE7XEeuHa4bUOfM2xQ" name="move" visibility="public" method="_vlRoMU7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlQaEE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlRBIE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlRoME7XEeuHa4bUOfM2xQ" name="directionType" type="_vkzHEE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vlS2UE7XEeuHa4bUOfM2xQ" name="sink" visibility="public" method="_vlUEcU7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlTdYE7XEeuHa4bUOfM2xQ" type="_vZhrME7XEeuHa4bUOfM2xQ" direction="return">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vlTdYU7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vlTdYk7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vlUEcE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vmnE8E7XEeuHa4bUOfM2xQ" name="Explorer" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_vmnsAE7XEeuHa4bUOfM2xQ" general="_vklEoE7XEeuHa4bUOfM2xQ"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmrWYE7XEeuHa4bUOfM2xQ" name="Explorer" specification="_vmoTEE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.name = &quot;Explorer&quot;;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmvAwE7XEeuHa4bUOfM2xQ" name="move" specification="_vmr9cE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.AP == 0) {&#xD;
        //no enough AP&#xD;
        return false;&#xD;
    } else {&#xD;
        switch(directionType) {&#xD;
            //↑&#xD;
            case UP:&#xD;
            //↓&#xD;
            case DOWN:&#xD;
            //←&#xD;
            case LEFT:&#xD;
            //→&#xD;
            case RIGHT:&#xD;
            //↖&#xD;
            case TOPLEFT:&#xD;
            case //↘&#xD;
            BOTTOMRIGHT:&#xD;
            case //↙&#xD;
            BOTTOMLEFT:&#xD;
            //↗&#xD;
            case TOPRIGHT:&#xD;
                StdTile destination = getDestination(board, directionType);&#xD;
                if (destination == null) {&#xD;
                    //failure&#xD;
                    return false;&#xD;
                } else if (destination.getStatus() == Status.SUNK) {&#xD;
                    //failure&#xD;
                    return false;&#xD;
                } else {&#xD;
                    this.freeMove(destination);&#xD;
                    this.AP--;&#xD;
                    //success&#xD;
                    return true;&#xD;
                }&#xD;
            //?//cancel&#xD;
            case MIDDLE:&#xD;
            //ERR&#xD;
            default:&#xD;
                //failure&#xD;
                return false;&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vmyrIE7XEeuHa4bUOfM2xQ" name="shoreUp" specification="_vmwO4E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.AP == 0) {&#xD;
        //no enough AP&#xD;
        return false;&#xD;
    } else {&#xD;
        switch(directionType) {&#xD;
            //↑&#xD;
            case UP:&#xD;
            //↓&#xD;
            case DOWN:&#xD;
            //←&#xD;
            case LEFT:&#xD;
            //→&#xD;
            case RIGHT:&#xD;
            //↖//not allowed&#xD;
            case TOPLEFT:&#xD;
            //↘//not allowed&#xD;
            case BOTTOMRIGHT:&#xD;
            //↙//not allowed&#xD;
            case BOTTOMLEFT:&#xD;
            //↗//not allowed&#xD;
            case TOPRIGHT:&#xD;
                StdTile destination = getDestination(board, directionType);&#xD;
                if (destination == null) {&#xD;
                    //failure&#xD;
                    return false;&#xD;
                } else {&#xD;
                    if (this.freeShoreUp(destination)) {&#xD;
                        this.AP--;&#xD;
                        //success&#xD;
                        return true;&#xD;
                    } else {&#xD;
                        //failure&#xD;
                        return false;&#xD;
                    }&#xD;
                }&#xD;
            //?&#xD;
            case MIDDLE:&#xD;
            //ERR&#xD;
            default:&#xD;
                //failure&#xD;
                return false;&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vm2VgE7XEeuHa4bUOfM2xQ" name="sink" specification="_vmz5QE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.currStdTile.getStatus() != Status.SUNK) {&#xD;
        System.err.println(&quot;func sink ERR -- mistaken call&quot;);&#xD;
        //mistaken call&#xD;
        return null;&#xD;
    } else {&#xD;
        ArrayList&lt;StdTile> tempList = new ArrayList&lt;StdTile>();&#xD;
        StdTile temp;&#xD;
        ArrayList&lt;DirectionType> eightDirectionTypes = new ArrayList&lt;DirectionType>();&#xD;
        eightDirectionTypes.add(DirectionType.UP);&#xD;
        eightDirectionTypes.add(DirectionType.DOWN);&#xD;
        eightDirectionTypes.add(DirectionType.LEFT);&#xD;
        eightDirectionTypes.add(DirectionType.RIGHT);&#xD;
        eightDirectionTypes.add(DirectionType.TOPLEFT);&#xD;
        eightDirectionTypes.add(DirectionType.BOTTOMRIGHT);&#xD;
        eightDirectionTypes.add(DirectionType.BOTTOMLEFT);&#xD;
        eightDirectionTypes.add(DirectionType.TOPRIGHT);&#xD;
        for (DirectionType i : eightDirectionTypes) {&#xD;
            temp = this.getDestination(board, i);&#xD;
            if (temp == null) {&#xD;
                ;&#xD;
            } else if (temp.getStatus() == Status.SUNK) {&#xD;
                ;&#xD;
            } else {&#xD;
                tempList.add(temp);&#xD;
            }&#xD;
        }&#xD;
        if (tempList.size() == 0) {&#xD;
            this.isAlive = false;&#xD;
        }&#xD;
        return tempList;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmoTEE7XEeuHa4bUOfM2xQ" name="Explorer" visibility="public" method="_vmrWYE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmr9cE7XEeuHa4bUOfM2xQ" name="move" visibility="public" method="_vmvAwE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmr9cU7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmskgE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmtyoE7XEeuHa4bUOfM2xQ" name="directionType" type="_vkzHEE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmwO4E7XEeuHa4bUOfM2xQ" name="shoreUp" visibility="public" method="_vmyrIE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmwO4U7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmw18E7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vmyEEE7XEeuHa4bUOfM2xQ" name="directionType" type="_vkzHEE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vmz5QE7XEeuHa4bUOfM2xQ" name="sink" visibility="public" method="_vm2VgE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vm0gUE7XEeuHa4bUOfM2xQ" type="_vZhrME7XEeuHa4bUOfM2xQ" direction="return">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vm1HYE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vm1HYU7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vm1ucE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vm4xwE7XEeuHa4bUOfM2xQ" name="Pilot" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_vm5Y0E7XEeuHa4bUOfM2xQ" general="_vklEoE7XEeuHa4bUOfM2xQ"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vm6m8E7XEeuHa4bUOfM2xQ" name="ifAbilityUsed" visibility="protected" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vm7OAE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>false</body>
            </defaultValue>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vm-RUE7XEeuHa4bUOfM2xQ" name="Pilot" specification="_vm71EE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.name = &quot;Pilot&quot;;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vnAGgE7XEeuHa4bUOfM2xQ" name="begin" specification="_vm_fcE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.AP = 3;&#xD;
    this.ifAbilityUsed = false;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vnCiwE7XEeuHa4bUOfM2xQ" name="getIfAbilityUsed" specification="_vnBUoE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    return ifAbilityUsed;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vnG0ME7XEeuHa4bUOfM2xQ" name="sink" specification="_vnDw4E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    ArrayList&lt;StdTile> tempList = new ArrayList&lt;StdTile>();&#xD;
    StdTile temp;&#xD;
    for (int id = 0; id &lt; 24; id++) {&#xD;
        temp = board.getStdTile(id);&#xD;
        if (temp.getStatus() != Status.SUNK) {&#xD;
            tempList.add(temp);&#xD;
        } else {&#xD;
            ;&#xD;
        }&#xD;
    }&#xD;
    if (tempList.size() == 0) {&#xD;
        this.isAlive = false;&#xD;
    }&#xD;
    return tempList;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vnM60E7XEeuHa4bUOfM2xQ" name="flyAbility" specification="_vnIpYE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    int row = coord[0], col = coord[1];&#xD;
    return this.flyAbility(board, row, col);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vnRMQE7XEeuHa4bUOfM2xQ" name="flyAbility" specification="_vnOI8E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.ifAbilityUsed) {&#xD;
        return false;&#xD;
    } else if (this.AP == 0) {&#xD;
        //no enough AP&#xD;
        return false;&#xD;
    } else {&#xD;
        StdTile destination;&#xD;
        destination = board.getStdTile(row, col);&#xD;
        if (destination == null) {&#xD;
            return false;&#xD;
        } else if (destination.getStatus() == Status.SUNK) {&#xD;
            //failure&#xD;
            return false;&#xD;
        } else {&#xD;
            this.freeMove(destination);&#xD;
            this.AP--;&#xD;
            this.ifAbilityUsed = true;&#xD;
            return true;&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vm71EE7XEeuHa4bUOfM2xQ" name="Pilot" visibility="public" method="_vm-RUE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vm_fcE7XEeuHa4bUOfM2xQ" name="begin" visibility="public" method="_vnAGgE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vnBUoE7XEeuHa4bUOfM2xQ" name="getIfAbilityUsed" visibility="public" method="_vnCiwE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vnB7sE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vnDw4E7XEeuHa4bUOfM2xQ" name="sink" visibility="public" method="_vnG0ME7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vnE_AE7XEeuHa4bUOfM2xQ" type="_vZhrME7XEeuHa4bUOfM2xQ" direction="return">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vnFmEE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vnFmEU7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vnGNIE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vnIpYE7XEeuHa4bUOfM2xQ" name="flyAbility" visibility="public" method="_vnM60E7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vnJQcE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vnKekE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vnLFoE7XEeuHa4bUOfM2xQ" name="coord">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vnLssE7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vnMTwE7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vnOI8E7XEeuHa4bUOfM2xQ" name="flyAbility" visibility="public" method="_vnRMQE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vnOwAE7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vnPXEE7XEeuHa4bUOfM2xQ" name="board" type="_vYAoQE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vnPXEU7XEeuHa4bUOfM2xQ" name="row">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vnQlME7XEeuHa4bUOfM2xQ" name="col">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vnTogE7XEeuHa4bUOfM2xQ" name="Messenger" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_vnUPkE7XEeuHa4bUOfM2xQ" general="_vklEoE7XEeuHa4bUOfM2xQ"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vnX58E7XEeuHa4bUOfM2xQ" name="Messenger" specification="_vnU2oE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.name = &quot;Messenger&quot;;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vnbkUE7XEeuHa4bUOfM2xQ" name="passCard" specification="_vnZvIE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    if (this.AP == 0) {&#xD;
        //not enough AP&#xD;
        return false;&#xD;
    } else {&#xD;
        this.freePassCard(targetRole, cardIndex);&#xD;
        this.AP--;&#xD;
        return //success&#xD;
        true;&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vnU2oE7XEeuHa4bUOfM2xQ" name="Messenger" visibility="public" method="_vnX58E7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vnZvIE7XEeuHa4bUOfM2xQ" name="passCard" visibility="public" method="_vnbkUE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vnZvIU7XEeuHa4bUOfM2xQ" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vna9QE7XEeuHa4bUOfM2xQ" name="targetRole" type="_vklEoE7XEeuHa4bUOfM2xQ"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vna9QU7XEeuHa4bUOfM2xQ" name="cardIndex">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vneAkE7XEeuHa4bUOfM2xQ" name="CheatCharacter" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_vnenoE7XEeuHa4bUOfM2xQ" general="_vklEoE7XEeuHa4bUOfM2xQ"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vniSAE7XEeuHa4bUOfM2xQ" name="CheatCharacter" specification="_vnfOsE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.name = &quot;Daddy&quot;;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vni5EU7XEeuHa4bUOfM2xQ" name="begin" specification="_vni5EE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    this.AP = 99;&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vnfOsE7XEeuHa4bUOfM2xQ" name="CheatCharacter" visibility="public" method="_vniSAE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vni5EE7XEeuHa4bUOfM2xQ" name="begin" visibility="public" method="_vni5EU7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_vnjgIE7XEeuHa4bUOfM2xQ" name="setting">
        <packagedElement xmi:type="uml:Class" xmi:id="_vnkuQE7XEeuHa4bUOfM2xQ" name="Options" visibility="public" isLeaf="true">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vnlVUE7XEeuHa4bUOfM2xQ" name="ifDiverAllowedStopAtSunkTile" visibility="public" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vnmjcE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>true</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vnnKgE7XEeuHa4bUOfM2xQ" name="ifNavigatorHasOwnAbility" visibility="public" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vnnKgU7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>false</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vnnxkE7XEeuHa4bUOfM2xQ" name="ifHelicopterLiftPlayerShouldAtTheSameTile" visibility="public" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vno_sE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>false</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vnpmwE7XEeuHa4bUOfM2xQ" name="ifCheat" visibility="public" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vnqN0E7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>false</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vnqN0U7XEeuHa4bUOfM2xQ" name="ifDebug" visibility="public" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vnrb8E7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>false</body>
            </defaultValue>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vnufQE7XEeuHa4bUOfM2xQ" name="Options" specification="_vnsDAE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    ;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vnvtYE7XEeuHa4bUOfM2xQ" name="mod" specification="_vnvGUE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    Options.ifDiverAllowedStopAtSunkTile = true;&#xD;
    Options.ifNavigatorHasOwnAbility = false;&#xD;
    Options.ifHelicopterLiftPlayerShouldAtTheSameTile = false;&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vnw7gE7XEeuHa4bUOfM2xQ" name="real" specification="_vnwUcE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    Options.ifDiverAllowedStopAtSunkTile = false;&#xD;
    Options.ifNavigatorHasOwnAbility = true;&#xD;
    Options.ifHelicopterLiftPlayerShouldAtTheSameTile = true;&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vnsDAE7XEeuHa4bUOfM2xQ" name="Options" visibility="public" method="_vnufQE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vnvGUE7XEeuHa4bUOfM2xQ" name="mod" visibility="public" isStatic="true" method="_vnvtYE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vnwUcE7XEeuHa4bUOfM2xQ" name="real" visibility="public" isStatic="true" method="_vnw7gE7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_vn3pME7XEeuHa4bUOfM2xQ" name="test_cases">
        <packagedElement xmi:type="uml:Class" xmi:id="_vn5eYE7XEeuHa4bUOfM2xQ" name="MyGameManagerTest" visibility="public">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vn7TkE7XEeuHa4bUOfM2xQ" name="testMGM" visibility="private" type="_vh3u4E7XEeuHa4bUOfM2xQ" isUnique="false"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vn_lAE7XEeuHa4bUOfM2xQ" name="setUp" specification="_vn76oE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //The card deck should be loaded once GameManager set up, the used card deck should be empty&#xD;
    testMGM = new MyGameManager();&#xD;
    assertFalse(&quot;New board set up should NOT be initialized&quot;, testMGM.getBoard().ifInit);&#xD;
    assertEquals(&quot;FloodDeck should be prepared&quot;, 24, testMGM.getFloodDeck().getStack().size());&#xD;
    assertEquals(&quot;TreasureDeck should be prepared&quot;, 28, testMGM.getTreasureDeck().getStack().size());&#xD;
    assertEquals(&quot;usedFloodDeck should have no thing&quot;, 0, testMGM.getUsedFloodDeck().getStack().size());&#xD;
    assertEquals(&quot;usedTreasureDeck should have no thing&quot;, 0, testMGM.getUsedTreasureDeck().getStack().size());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voBaME7XEeuHa4bUOfM2xQ" name="testInitForTest" specification="_voAzIE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //the input of initForTest() are the num of players and water meters respectively&#xD;
    testMGM.initForTest(2, 4);&#xD;
    //The board should be initialized at this time, or say the board will be rearranged&#xD;
    assertTrue(&quot;New board set up should be initialized&quot;, testMGM.getBoard().ifInit);&#xD;
    assertEquals(&quot;Should assign 2 Players&quot;, 2, testMGM.getBoard().getPlayerList().size());&#xD;
    assertEquals(&quot;Water Meter should be set as 4&quot;, 4, testMGM.getWaterMeter().getMeter());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voDPYE7XEeuHa4bUOfM2xQ" name="testFirstTurnAssignCards" specification="_voCoUE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //No matter what role is assigned, everyone will get 2 treasure cards &#xD;
    //Also both of them shouldn't be WaterRise Card &#xD;
    ArrayList&lt;StdRole> testPlayerList = new ArrayList&lt;StdRole>();&#xD;
    testPlayerList.add(new Diver());&#xD;
    testPlayerList.add(new Engineer());&#xD;
    testPlayerList.add(new Explorer());&#xD;
    testPlayerList.add(new Messenger());&#xD;
    testPlayerList.add(new Navigator());&#xD;
    testPlayerList.add(new Pilot());&#xD;
    testMGM.getBoard().setPlayerList(testPlayerList);&#xD;
    testMGM.initAssignCards();&#xD;
    for (int i = 0; i &lt; 6; i++) {&#xD;
        assertFalse(&quot;No one can own WaterRise Card by the 1st card in the 1st turn&quot;, testMGM.getBoard().getPlayerList().get(i).getCards().get(0) instanceof WaterRise);&#xD;
        assertFalse(&quot;No one can own WaterRise Card by the 2nd card in the 1st turn&quot;, testMGM.getBoard().getPlayerList().get(i).getCards().get(1) instanceof WaterRise);&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voFEkE7XEeuHa4bUOfM2xQ" name="testInitPlayerByRoles" specification="_voEdgE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //this method should randomly assign roles to the set number of players&#xD;
    //In this case assign 4 players, should be always different by two calls&#xD;
    testMGM.initRoles(4);&#xD;
    ArrayList&lt;StdRole> testPlayerList1 = testMGM.getBoard().getPlayerList();&#xD;
    testMGM.initRoles(4);&#xD;
    ArrayList&lt;StdRole> testPlayerList2 = testMGM.getBoard().getPlayerList();&#xD;
    assertFalse(&quot;Both player lists should be different&quot;, testPlayerList1.equals(testPlayerList2));&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voGSsU7XEeuHa4bUOfM2xQ" name="testIfLose1" specification="_voGSsE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //1&#xD;
    Fire COF = new Fire();&#xD;
    Cave.setTreasure(COF);&#xD;
    testMGM.getBoard().getStdTile(1, 3).setStatus(Status.SUNK);&#xD;
    testMGM.getBoard().getStdTile(1, 4).setStatus(Status.SUNK);&#xD;
    assertTrue(&quot;Treasure hasn't been captured but both Caves has been SUNK, should be a true loss&quot;, testMGM.ifLose1());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voG5wU7XEeuHa4bUOfM2xQ" name="resetStatus" specification="_voG5wE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    testMGM.getBoard().getStdTile(1, 3).setStatus(Status.NORMAL);&#xD;
    testMGM.getBoard().getStdTile(1, 4).setStatus(Status.NORMAL);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voHg0E7XEeuHa4bUOfM2xQ" name="testIfLose2" specification="_voG5wk7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //2&#xD;
    testMGM.getBoard().getStdTile(3, 2).setStatus(Status.SUNK);&#xD;
    assertTrue(&quot;Fool's Landing has been SUNK, should be a true loss&quot;, testMGM.ifLose2());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voJWAE7XEeuHa4bUOfM2xQ" name="testIfLose3" specification="_voIu8E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //3&#xD;
    Navigator testPlayerN = new Navigator();&#xD;
    ArrayList&lt;StdRole> testPlayerList = new ArrayList&lt;StdRole>();&#xD;
    testPlayerList.add(testPlayerN);&#xD;
    testMGM.getBoard().setPlayerList(testPlayerList);&#xD;
    testPlayerN.setCurrStdTile(testMGM.getBoard().getStdTile(4, 1));&#xD;
    //breakersBridge(SUNK)&#xD;
    testMGM.getBoard().getStdTile(1, 1).setStatus(Status.SUNK);&#xD;
    //cliffsOfAbandon(SUNK)&#xD;
    testMGM.getBoard().getStdTile(2, 1).setStatus(Status.SUNK);&#xD;
    //dunesOfDeception(SUNK)&#xD;
    testMGM.getBoard().getStdTile(3, 1).setStatus(Status.SUNK);&#xD;
    //observatory(Navigator here,SUNK)&#xD;
    testMGM.getBoard().getStdTile(4, 1).setStatus(Status.SUNK);&#xD;
    //mistyMarsh(SUNK)&#xD;
    testMGM.getBoard().getStdTile(4, 2).setStatus(Status.SUNK);&#xD;
    //lostLagoon(SUNK)&#xD;
    testMGM.getBoard().getStdTile(4, 3).setStatus(Status.SUNK);&#xD;
    //ironGate(SUNK)&#xD;
    testMGM.getBoard().getStdTile(4, 4).setStatus(Status.SUNK);&#xD;
    //works similar with PlayerSink() method&#xD;
    testPlayerN.sink(testMGM.getBoard());&#xD;
    assertTrue(&quot;Navigator is not alive, should be a true loss&quot;, testMGM.ifLose3());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voKkIU7XEeuHa4bUOfM2xQ" name="testIfLose4" specification="_voKkIE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //4 &#xD;
    testMGM.getWaterMeter().setWaterMeter(9);&#xD;
    assertFalse(&quot;Water Level haven't reached the skull and crossbones, should NOT be a loss&quot;, testMGM.ifLose4());&#xD;
    //Water Meter should be 8, reach Water Level 5, the method useWaterRise() works well &#xD;
    testMGM.useWaterRiseTest(new WaterRise());&#xD;
    assertTrue(&quot;Water Level reach the skull and crossbones, should be a true loss&quot;, testMGM.ifLose4());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voLLMU7XEeuHa4bUOfM2xQ" name="testUseSandbagsForTest" specification="_voLLME7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    Navigator testPlayerN = new Navigator();&#xD;
    ArrayList&lt;StdRole> testPlayerList = new ArrayList&lt;StdRole>();&#xD;
    testPlayerList.add(testPlayerN);&#xD;
    testMGM.getBoard().setPlayerList(testPlayerList);&#xD;
    testPlayerN.addTreasureCard(new Sandbags());&#xD;
    testPlayerN.addTreasureCard(new Sandbags());&#xD;
    //get the position of NORMAL watchtower&#xD;
    int[] tempInt = testMGM.getBoard().getStdTile(3, 0).getCoord();&#xD;
    assertFalse(&quot;No need to use Sandbags for NORMAL watchtower&quot;, testMGM.useSandbagsForTest(new Sandbags(), 0, testPlayerN, tempInt));&#xD;
    assertEquals(&quot;The two Sandbags Cards won't be cost&quot;, 2, testPlayerN.getCards().size());&#xD;
    //Set watchtower&#xD;
    testMGM.getBoard().getStdTile(3, 0).setStatus(Status.FLOODED);&#xD;
    assertTrue(&quot;Need to use Sandbags for FLOODED watchtower&quot;, testMGM.useSandbagsForTest(new Sandbags(), 0, testPlayerN, tempInt));&#xD;
    assertEquals(&quot;FLOODED watchtower turns NORMAL&quot;, Status.NORMAL, testMGM.getBoard().getStdTile(3, 1).getStatus());&#xD;
    assertEquals(&quot;Use 1 Sandbags Card, should has 1 remaining&quot;, 1, testPlayerN.getCards().size());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voNAYE7XEeuHa4bUOfM2xQ" name="testifWin" specification="_voMZUE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //all tiles chosen are default NORMAL&#xD;
    //all treasures taken&#xD;
    Palace.setIfGet(true);&#xD;
    Cave.setIfGet(true);&#xD;
    Temple.setIfGet(true);&#xD;
    Garden.setIfGet(true);&#xD;
    testMGM.setBoard(new Board());&#xD;
    //Assume 4 players assigned with different roles&#xD;
    Navigator testPlayerN = new Navigator();&#xD;
    Pilot testPlayerP = new Pilot();&#xD;
    Engineer testPlayerE = new Engineer();&#xD;
    Messenger testPlayerM = new Messenger();&#xD;
    ArrayList&lt;StdRole> testPlayerList = new ArrayList&lt;StdRole>();&#xD;
    testPlayerList.add(testPlayerN);&#xD;
    testPlayerList.add(testPlayerP);&#xD;
    testPlayerList.add(testPlayerE);&#xD;
    testPlayerList.add(testPlayerM);&#xD;
    testMGM.getBoard().setPlayerList(testPlayerList);&#xD;
    //Set them in foolslanding&#xD;
    testMGM.getBoard().getStdTile(3, 2).setPlayers(testMGM.getBoard().getPlayerList());&#xD;
    assertTrue(&quot;Should satisfy the win condition&quot;, testMGM.ifWin());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voNncU7XEeuHa4bUOfM2xQ" name="resetIfGet" specification="_voNncE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    Cave.setIfGet(false);&#xD;
    Palace.setIfGet(false);&#xD;
    Garden.setIfGet(false);&#xD;
    Temple.setIfGet(false);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voPcoE7XEeuHa4bUOfM2xQ" name="testUseHelicopterLiftByMultipleForTest" specification="_voOOgE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    Engineer testPlayerE = new Engineer();&#xD;
    Navigator testPlayerN = new Navigator();&#xD;
    ArrayList&lt;StdRole> testPlayerList = new ArrayList&lt;StdRole>();&#xD;
    testPlayerList.add(testPlayerE);&#xD;
    testPlayerList.add(testPlayerN);&#xD;
    testMGM.getBoard().setPlayerList(testPlayerList);&#xD;
    testPlayerE.addTreasureCard(new HelicopterLift());&#xD;
    //Set them in watchtower&#xD;
    testPlayerE.setCurrStdTile(testMGM.getBoard().getStdTile(3, 0));&#xD;
    testPlayerN.setCurrStdTile(testMGM.getBoard().getStdTile(3, 0));&#xD;
    //go to foolsLanding(3,2)&#xD;
    int[] tempInt = testMGM.getBoard().getStdTile(3, 2).getCoord();&#xD;
    HashSet&lt;Integer> tempIntHashSet = new HashSet&lt;Integer>();&#xD;
    tempIntHashSet.add(1);&#xD;
    //take 2 members, indicates testPlayerE and testPlayerN&#xD;
    tempIntHashSet.add(2);&#xD;
    testMGM.useHelicopterLiftByMultipleForTest(new HelicopterLift(), 0, testPlayerE, tempIntHashSet, tempInt);&#xD;
    assertEquals(&quot;testPlayerE should have no cards&quot;, 0, testPlayerE.getCards().size());&#xD;
    assertEquals(&quot;watchtower should have no people&quot;, 0, testMGM.getBoard().getStdTile(3, 0).getPlayers().size());&#xD;
    assertEquals(&quot;foolsLanding should get two people&quot;, 2, testMGM.getBoard().getStdTile(3, 2).getPlayers().size());&#xD;
    //all treasures taken&#xD;
    Palace.setIfGet(true);&#xD;
    Cave.setIfGet(true);&#xD;
    Temple.setIfGet(true);&#xD;
    Garden.setIfGet(true);&#xD;
    //go to lostlagoon&#xD;
    int[] tempInt2 = testMGM.getBoard().getStdTile(4, 3).getCoord();&#xD;
    testPlayerE.addTreasureCard(new HelicopterLift());&#xD;
    testMGM.useHelicopterLiftByMultipleForTest(new HelicopterLift(), 0, testPlayerE, tempIntHashSet, tempInt2);&#xD;
    assertEquals(&quot;lostlagoon should have no people, because the condition of win the game is satisfied&quot;, 0, testMGM.getBoard().getStdTile(4, 3).getPlayers().size());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voRR0E7XEeuHa4bUOfM2xQ" name="resetIfGet2" specification="_voQqwE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    Cave.setIfGet(false);&#xD;
    Palace.setIfGet(false);&#xD;
    Garden.setIfGet(false);&#xD;
    Temple.setIfGet(false);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voSf8E7XEeuHa4bUOfM2xQ" name="testUseCardWhileDrop" specification="_voRR0U7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //only test drop card here&#xD;
    Engineer testPlayerE = new Engineer();&#xD;
    ArrayList&lt;StdRole> testPlayerList = new ArrayList&lt;StdRole>();&#xD;
    testPlayerList.add(testPlayerE);&#xD;
    testMGM.getBoard().setPlayerList(testPlayerList);&#xD;
    testPlayerE.addTreasureCard(new Sandbags());&#xD;
    testPlayerE.addTreasureCard(new StoneCard());&#xD;
    testMGM.UseCardWhileDrop(testPlayerE, 1, 0);&#xD;
    assertEquals(&quot;Drop card with index 1, one card should be remained&quot;, 1, testPlayerE.getCards().size());&#xD;
    assertTrue(&quot;The remaining card should be Stone card with original index 2&quot;, testPlayerE.getCards().get(0) instanceof StoneCard);&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vn76oE7XEeuHa4bUOfM2xQ" name="setUp" visibility="public" method="_vn_lAE7XEeuHa4bUOfM2xQ" raisedException="_vn8hsE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voAzIE7XEeuHa4bUOfM2xQ" name="testInitForTest" visibility="public" method="_voBaME7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voCoUE7XEeuHa4bUOfM2xQ" name="testFirstTurnAssignCards" visibility="public" method="_voDPYE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voEdgE7XEeuHa4bUOfM2xQ" name="testInitPlayerByRoles" visibility="public" method="_voFEkE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voGSsE7XEeuHa4bUOfM2xQ" name="testIfLose1" visibility="public" method="_voGSsU7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voG5wE7XEeuHa4bUOfM2xQ" name="resetStatus" visibility="public" method="_voG5wU7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voG5wk7XEeuHa4bUOfM2xQ" name="testIfLose2" visibility="public" method="_voHg0E7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voIu8E7XEeuHa4bUOfM2xQ" name="testIfLose3" visibility="public" method="_voJWAE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voKkIE7XEeuHa4bUOfM2xQ" name="testIfLose4" visibility="public" method="_voKkIU7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voLLME7XEeuHa4bUOfM2xQ" name="testUseSandbagsForTest" visibility="public" method="_voLLMU7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voMZUE7XEeuHa4bUOfM2xQ" name="testifWin" visibility="public" method="_voNAYE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voNncE7XEeuHa4bUOfM2xQ" name="resetIfGet" visibility="public" method="_voNncU7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voOOgE7XEeuHa4bUOfM2xQ" name="testUseHelicopterLiftByMultipleForTest" visibility="public" method="_voPcoE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voQqwE7XEeuHa4bUOfM2xQ" name="resetIfGet2" visibility="public" method="_voRR0E7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voRR0U7XEeuHa4bUOfM2xQ" name="testUseCardWhileDrop" visibility="public" method="_voSf8E7XEeuHa4bUOfM2xQ" raisedException="_vgtRQE7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_voWKUE7XEeuHa4bUOfM2xQ" name="DeckTest" visibility="public">
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voXYcE7XEeuHa4bUOfM2xQ" name="testLoad" specification="_voWxYE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    FloodDeck testF = new FloodDeck();&#xD;
    TreasureDeck testT = new TreasureDeck();&#xD;
    Board testB = new Board();&#xD;
    testF.init(testB);&#xD;
    assertEquals(&quot;Flood deck must contain 24 cards after load&quot;, 24, testF.getStack().size());&#xD;
    testT.init();&#xD;
    assertEquals(&quot;Treasure deck must contain 28 cards after load&quot;, 28, testT.getStack().size());&#xD;
    for (int i = 0; i &lt; testF.getStack().size() - 1; i++) {&#xD;
        assertTrue(&quot;Flood deck must contain Floodcards&quot;, testF.getStack().get(i) instanceof FloodCard);&#xD;
    }&#xD;
    for (int i = 0; i &lt; testT.getStack().size() - 1; i++) {&#xD;
        assertTrue(&quot;Treasure deck must contain Treasurecards&quot;, testT.getStack().get(i) instanceof TreasureCard);&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voX_gU7XEeuHa4bUOfM2xQ" name="testShuffle" specification="_voX_gE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    FloodDeck testF = new FloodDeck();&#xD;
    TreasureDeck testT = new TreasureDeck();&#xD;
    FloodDeck testFused = new FloodDeck();&#xD;
    TreasureDeck testTused = new TreasureDeck();&#xD;
    testF.shuffle(testFused);&#xD;
    testT.shuffle(testTused);&#xD;
    assertTrue(&quot;Initialized testT should be empty given by initialized shuffled testTused!&quot;, testT.getStack().isEmpty());&#xD;
    assertTrue(&quot;Initialized testF should be empty given by initialized shuffled testFused!&quot;, testF.getStack().isEmpty());&#xD;
    //assign 5 types of Floodcard for Fused&#xD;
    testFused.getStack().push(new FloodCard(&quot;1&quot;, new Temple(&quot;testTemple&quot;)));&#xD;
    testFused.getStack().push(new FloodCard(&quot;2&quot;, new Palace(&quot;testPalace&quot;)));&#xD;
    testFused.getStack().push(new FloodCard(&quot;3&quot;, new Garden(&quot;testGarden&quot;)));&#xD;
    testFused.getStack().push(new FloodCard(&quot;4&quot;, new FoolsLanding()));&#xD;
    testFused.getStack().push(new FloodCard(&quot;5&quot;, new Cave(&quot;testCave&quot;)));&#xD;
    //assign 8 types of Treasurecard for Tused&#xD;
    testTused.getStack().push(new WindCard());&#xD;
    testTused.getStack().push(new StoneCard());&#xD;
    testTused.getStack().push(new FireCard());&#xD;
    testTused.getStack().push(new ChaliceCard());&#xD;
    testTused.getStack().push(new WindCard());&#xD;
    testTused.getStack().push(new Sandbags());&#xD;
    testTused.getStack().push(new WaterRise());&#xD;
    testTused.getStack().push(new HelicopterLift());&#xD;
    testF.shuffle(testFused);&#xD;
    testT.shuffle(testTused);&#xD;
    assertNotNull(&quot;testF should be added by the shuffled testFused and have cards&quot;, testF);&#xD;
    assertNotNull(&quot;testT should be added by the shuffled testTused and have cards&quot;, testT);&#xD;
    assertEquals(&quot;testF must contain 5 cards after shuffling&quot;, 5, testF.getStack().size());&#xD;
    assertEquals(&quot;testT must contain 8 cards after shuffling&quot;, 8, testT.getStack().size());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_voYmkU7XEeuHa4bUOfM2xQ" name="testUseFloodCard" specification="_voYmkE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    FloodDeck testF = new FloodDeck();&#xD;
    FloodDeck testFused = new FloodDeck();&#xD;
    testF.getStack().push(new FloodCard(&quot;1&quot;, new Temple(&quot;testTemple&quot;)));&#xD;
    testF.getStack().push(new FloodCard(&quot;2&quot;, new Palace(&quot;testPalace&quot;)));&#xD;
    testF.getStack().push(new FloodCard(&quot;3&quot;, new Garden(&quot;testGarden&quot;)));&#xD;
    testF.getStack().push(new FloodCard(&quot;4&quot;, new FoolsLanding()));&#xD;
    testF.getStack().push(new FloodCard(&quot;5&quot;, new Cave(&quot;testCave&quot;)));&#xD;
    testF.useCard(testFused);&#xD;
    assertEquals(&quot;testF must contain 4 cards after using 1 card &quot;, 4, testF.getStack().size());&#xD;
    assertEquals(&quot;testFused must contain 1 card after using 1 card &quot;, 1, testFused.getStack().size());&#xD;
    for (int i = 0; i &lt; 4; i++) {&#xD;
        testF.useCard(testFused);&#xD;
    }&#xD;
    assertEquals(&quot;testF must contain 5 cards again after running out the cards in it &quot;, 5, testF.getStack().size());&#xD;
    assertEquals(&quot;testFused must contain 0 card&quot;, 0, testFused.getStack().size());&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voWxYE7XEeuHa4bUOfM2xQ" name="testLoad" visibility="public" method="_voXYcE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voX_gE7XEeuHa4bUOfM2xQ" name="testShuffle" visibility="public" method="_voX_gU7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voYmkE7XEeuHa4bUOfM2xQ" name="testUseFloodCard" visibility="public" method="_voYmkU7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vodfEE7XEeuHa4bUOfM2xQ" name="PlayerMovementTest" visibility="public">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_voeGIE7XEeuHa4bUOfM2xQ" name="testB" visibility="private" type="_vYAoQE7XEeuHa4bUOfM2xQ" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vofUQE7XEeuHa4bUOfM2xQ" name="testPlayerP" visibility="private" type="_vm4xwE7XEeuHa4bUOfM2xQ" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vof7UE7XEeuHa4bUOfM2xQ" name="testPlayerE" visibility="private" type="_vmnE8E7XEeuHa4bUOfM2xQ" isUnique="false"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vohwgE7XEeuHa4bUOfM2xQ" name="setUp" specification="_vohJcE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    testB = new Board();&#xD;
    testPlayerP = new Pilot();&#xD;
    testPlayerP.setAP(100);&#xD;
    testPlayerE = new Explorer();&#xD;
    testPlayerE.setAP(100);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vojlsE7XEeuHa4bUOfM2xQ" name="testNullTileNotAllowed" specification="_voi-oE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    testPlayerE.setCurrStdTile(testB.getStdTile(1, 1));&#xD;
    //↖ to null&#xD;
    assertEquals(&quot;TOPLEFT to Nulltile shouldn't be allowed&quot;, false, testPlayerE.move(testB, DirectionType.TOPLEFT));&#xD;
    //← to null&#xD;
    assertEquals(&quot;LEFT to Nulltile shouldn't be allowed&quot;, false, testPlayerE.move(testB, DirectionType.LEFT));&#xD;
    //↑ to null&#xD;
    assertEquals(&quot;UP to Nulltile shouldn't be allowed&quot;, false, testPlayerE.move(testB, DirectionType.UP));&#xD;
    testPlayerE.setCurrStdTile(testB.getStdTile(1, 4));&#xD;
    //↗ to null&#xD;
    assertEquals(&quot;TOPRIGHT to Nulltile shouldn't be allowed&quot;, false, testPlayerE.move(testB, DirectionType.TOPRIGHT));&#xD;
    testPlayerE.setCurrStdTile(testB.getStdTile(4, 1));&#xD;
    //↙ to null&#xD;
    assertEquals(&quot;BOTTOMLEFT to Nulltile shouldn't be allowed&quot;, false, testPlayerE.move(testB, DirectionType.BOTTOMLEFT));&#xD;
    testPlayerE.setCurrStdTile(testB.getStdTile(4, 4));&#xD;
    //→ to null&#xD;
    assertEquals(&quot;RIGHT to Nulltile shouldn't be allowed&quot;, false, testPlayerE.move(testB, DirectionType.RIGHT));&#xD;
    //↘ to null&#xD;
    assertEquals(&quot;BOTTOMRIGHT to Nulltile shouldn't be allowed&quot;, false, testPlayerE.move(testB, DirectionType.BOTTOMRIGHT));&#xD;
    //↓ to null&#xD;
    assertEquals(&quot;DOWN to Nulltile shouldn't be allowed&quot;, false, testPlayerE.move(testB, DirectionType.DOWN));&#xD;
    for (int x = 0; x &lt; 6; x++) {&#xD;
        for (int y = 0; y &lt; 6; y++) {&#xD;
            testPlayerP.setCurrStdTile(testB.getStdTile(x, y));&#xD;
            if (testB.getStdTile(x, y) != null) {&#xD;
                assertEquals(&quot;Pilot to any Nulltile shouldn't be allowed,in this case [0,0] has problem&quot;, false, testPlayerP.flyAbility(testB, 0, 0));&#xD;
                assertEquals(&quot;Pilot to any Nulltile shouldn't be allowed,in this case [0,1] has problem&quot;, false, testPlayerP.flyAbility(testB, 0, 1));&#xD;
                assertEquals(&quot;Pilot to any Nulltile shouldn't be allowed,in this case [0,4] has problem&quot;, false, testPlayerP.flyAbility(testB, 0, 4));&#xD;
                assertEquals(&quot;Pilot to any Nulltile shouldn't be allowed,in this case [0,5] has problem&quot;, false, testPlayerP.flyAbility(testB, 0, 5));&#xD;
                assertEquals(&quot;Pilot to any Nulltile shouldn't be allowed,in this case [1,0] has problem&quot;, false, testPlayerP.flyAbility(testB, 1, 0));&#xD;
                assertEquals(&quot;Pilot to any Nulltile shouldn't be allowed,in this case [1,5] has problem&quot;, false, testPlayerP.flyAbility(testB, 1, 5));&#xD;
                assertEquals(&quot;Pilot to any Nulltile shouldn't be allowed,in this case [4,0] has problem&quot;, false, testPlayerP.flyAbility(testB, 4, 0));&#xD;
                assertEquals(&quot;Pilot to any Nulltile shouldn't be allowed,in this case [4,5] has problem&quot;, false, testPlayerP.flyAbility(testB, 4, 5));&#xD;
                assertEquals(&quot;Pilot to any Nulltile shouldn't be allowed,in this case [5,0] has problem&quot;, false, testPlayerP.flyAbility(testB, 5, 0));&#xD;
                assertEquals(&quot;Pilot to any Nulltile shouldn't be allowed,in this case [5,1] has problem&quot;, false, testPlayerP.flyAbility(testB, 5, 1));&#xD;
                assertEquals(&quot;Pilot to any Nulltile shouldn't be allowed,in this case [5,4] has problem&quot;, false, testPlayerP.flyAbility(testB, 5, 4));&#xD;
                assertEquals(&quot;Pilot to any Nulltile shouldn't be allowed,in this case [5,5] has problem&quot;, false, testPlayerP.flyAbility(testB, 5, 5));&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vokMwU7XEeuHa4bUOfM2xQ" name="testNormalMovement" specification="_vokMwE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    testPlayerE.setCurrStdTile(testB.getStdTile(3, 2));&#xD;
    testPlayerE.move(testB, DirectionType.UP);&#xD;
    assertEquals(&quot;After move UP, should be at copperGate&quot;, testB.getStdTile(2, 2), testPlayerE.getCurrStdTile());&#xD;
    testPlayerE.move(testB, DirectionType.LEFT);&#xD;
    assertEquals(&quot;After move LEFT, should be at cliffsOfAbandon&quot;, testB.getStdTile(2, 1), testPlayerE.getCurrStdTile());&#xD;
    testPlayerE.move(testB, DirectionType.DOWN);&#xD;
    assertEquals(&quot;After move DOWN, should be at dunesOfDeception&quot;, testB.getStdTile(3, 1), testPlayerE.getCurrStdTile());&#xD;
    testPlayerE.move(testB, DirectionType.RIGHT);&#xD;
    assertEquals(&quot;After move RIGHT, should be at foolsLanding&quot;, testB.getStdTile(3, 2), testPlayerE.getCurrStdTile());&#xD;
    testPlayerE.move(testB, DirectionType.TOPRIGHT);&#xD;
    assertEquals(&quot;After move TOPRIGHT, should be at coralPalace&quot;, testB.getStdTile(2, 3), testPlayerE.getCurrStdTile());&#xD;
    testPlayerE.move(testB, DirectionType.BOTTOMRIGHT);&#xD;
    assertEquals(&quot;After move BOTTOMRIGHT, should be at howlingGarden&quot;, testB.getStdTile(3, 4), testPlayerE.getCurrStdTile());&#xD;
    testPlayerE.move(testB, DirectionType.BOTTOMLEFT);&#xD;
    assertEquals(&quot;After move BOTTOMLEFT, should be at lostLagoon&quot;, testB.getStdTile(4, 3), testPlayerE.getCurrStdTile());&#xD;
    testPlayerE.move(testB, DirectionType.TOPLEFT);&#xD;
    assertEquals(&quot;After move TOPLEFT, should be at foolsLanding&quot;, testB.getStdTile(3, 2), testPlayerE.getCurrStdTile());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vola4E7XEeuHa4bUOfM2xQ" name="testSunkTileNotAllowed" specification="_vokz0E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    testB.getStdTile(2, 1).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(2, 2).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(2, 3).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(3, 1).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(3, 3).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(4, 1).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(4, 2).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(4, 3).setStatus(Status.SUNK);&#xD;
    testPlayerE.setCurrStdTile(testB.getStdTile(3, 2));&#xD;
    testPlayerP.setCurrStdTile(testB.getStdTile(3, 2));&#xD;
    assertEquals(&quot;TOPLEFT to SUNK cliffsOfAbandon shouldn't be allowed&quot;, false, testPlayerE.move(testB, //↖ &#xD;
    DirectionType.TOPLEFT));&#xD;
    assertEquals(&quot;LEFT to SUNK dunesOfDeception shouldn't be allowed&quot;, false, testPlayerE.move(testB, //←&#xD;
    DirectionType.LEFT));&#xD;
    assertEquals(&quot;UP to SUNK copperGate shouldn't be allowed&quot;, false, testPlayerE.move(testB, //↑&#xD;
    DirectionType.UP));&#xD;
    assertEquals(&quot;TOPRIGHT to SUNK coralPalace shouldn't be allowed&quot;, false, testPlayerE.move(testB, //↗ &#xD;
    DirectionType.TOPRIGHT));&#xD;
    assertEquals(&quot;BOTTOMLEFT to SUNK observatory shouldn't be allowed&quot;, false, testPlayerE.move(testB, //↙ &#xD;
    DirectionType.BOTTOMLEFT));&#xD;
    assertEquals(&quot;RIGHT to SUNK goldGate shouldn't be allowed&quot;, false, testPlayerE.move(testB, //→ &#xD;
    DirectionType.RIGHT));&#xD;
    assertEquals(&quot;BOTTOMRIGHT to SUNK lostLagoon shouldn't be allowed&quot;, false, testPlayerE.move(testB, //↘ &#xD;
    DirectionType.BOTTOMRIGHT));&#xD;
    assertEquals(&quot;DOWN to SUNK mistyMarsh shouldn't be allowed&quot;, false, testPlayerE.move(testB, //↓ &#xD;
    DirectionType.DOWN));&#xD;
    assertEquals(&quot;Pilot fly to SUNK tiles shouldn't be allowed,in this case cliffsOfAbandon has problem&quot;, false, testPlayerP.flyAbility(testB, 2, 1));&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vohJcE7XEeuHa4bUOfM2xQ" name="setUp" visibility="public" method="_vohwgE7XEeuHa4bUOfM2xQ" raisedException="_vn8hsE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_voi-oE7XEeuHa4bUOfM2xQ" name="testNullTileNotAllowed" visibility="public" method="_vojlsE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vokMwE7XEeuHa4bUOfM2xQ" name="testNormalMovement" visibility="public" method="_vokMwU7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vokz0E7XEeuHa4bUOfM2xQ" name="testSunkTileNotAllowed" visibility="public" method="_vola4E7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vompAE7XEeuHa4bUOfM2xQ" name="AllTest" visibility="public"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_vorhgE7XEeuHa4bUOfM2xQ" name="BoardTest" visibility="public">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vosvoE7XEeuHa4bUOfM2xQ" name="testB" visibility="private" type="_vYAoQE7XEeuHa4bUOfM2xQ" isUnique="false"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vot9wE7XEeuHa4bUOfM2xQ" name="setUp" specification="_votWsE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    testB = new Board();&#xD;
    testB.init();&#xD;
    assertTrue(&quot;New board set up should be initialized&quot;, testB.ifInit);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vouk0U7XEeuHa4bUOfM2xQ" name="testPlaceGetTreasure" specification="_vouk0E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    assertTrue(&quot;TidalPalace should manage Ocean's Chalice&quot;, testB.getStdTile(14).getTreasure() instanceof Chalice);&#xD;
    assertTrue(&quot;CaveOfShadows should manage the Crystal of the Fire&quot;, testB.getStdTile(10).getTreasure() instanceof Fire);&#xD;
    assertTrue(&quot;TempleOftheMoon should manage the Earth Stone &quot;, testB.getStdTile(16).getTreasure() instanceof Stone);&#xD;
    assertTrue(&quot;Whispering Garden should manage the Statue of the Wind&quot;, testB.getStdTile(12).getTreasure() instanceof Wind);&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vovL4U7XEeuHa4bUOfM2xQ" name="testRearrange" specification="_vovL4E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //looking for a coordinate difference after shuffling&#xD;
    int[] cr = new //rows&#xD;
    int[//rows&#xD;
    24];&#xD;
    int[] cc = new //cols&#xD;
    int[//cols&#xD;
    24];&#xD;
    for (int i = 0; i &lt; 24; i++) {&#xD;
        cr[i] = (testB.getStdTile(i).getCoord())[0];&#xD;
        cc[i] = (testB.getStdTile(i).getCoord())[1];&#xD;
    }&#xD;
    //		int c00r=(testB.getStdTile(0).getCoord())[0];&#xD;
    //		int c00c=(testB.getStdTile(0).getCoord())[1];&#xD;
    //		&#xD;
    //		int c01r=(testB.getStdTile(1).getCoord())[0];&#xD;
    //		int c01c=(testB.getStdTile(1).getCoord())[1];&#xD;
    //		&#xD;
    //		int c02r=(testB.getStdTile(2).getCoord())[0];&#xD;
    //		int c02c=(testB.getStdTile(2).getCoord())[1];&#xD;
    //		&#xD;
    //		int c03r=(testB.getStdTile(3).getCoord())[0];&#xD;
    //		int c03c=(testB.getStdTile(3).getCoord())[1];&#xD;
    //		&#xD;
    //		int c04r=(testB.getStdTile(4).getCoord())[0];&#xD;
    //		int c04c=(testB.getStdTile(4).getCoord())[1];&#xD;
    //		&#xD;
    //		int c05r=(testB.getStdTile(5).getCoord())[0];&#xD;
    //		int c05c=(testB.getStdTile(5).getCoord())[1];&#xD;
    //		&#xD;
    //		int c06r=(testB.getStdTile(6).getCoord())[0];&#xD;
    //		int c06c=(testB.getStdTile(6).getCoord())[1];&#xD;
    //		&#xD;
    //		int c07r=(testB.getStdTile(7).getCoord())[0];&#xD;
    //		int c07c=(testB.getStdTile(7).getCoord())[1];&#xD;
    //		&#xD;
    //		int c08r=(testB.getStdTile(8).getCoord())[0];&#xD;
    //		int c08c=(testB.getStdTile(8).getCoord())[1];&#xD;
    //		&#xD;
    //		int c09r=(testB.getStdTile(9).getCoord())[0];&#xD;
    //		int c09c=(testB.getStdTile(9).getCoord())[1];&#xD;
    //	&#xD;
    //		int c10r=(testB.getStdTile(10).getCoord())[0];&#xD;
    //		int c10c=(testB.getStdTile(10).getCoord())[1];&#xD;
    //		&#xD;
    //		int c11r=(testB.getStdTile(11).getCoord())[0];&#xD;
    //		int c11c=(testB.getStdTile(11).getCoord())[1];&#xD;
    //		&#xD;
    //		int c12r=(testB.getStdTile(12).getCoord())[0];&#xD;
    //		int c12c=(testB.getStdTile(12).getCoord())[1];&#xD;
    //		&#xD;
    //		int c13r=(testB.getStdTile(13).getCoord())[0];&#xD;
    //		int c13c=(testB.getStdTile(13).getCoord())[1];&#xD;
    //		&#xD;
    //		int c14r=(testB.getStdTile(14).getCoord())[0];&#xD;
    //		int c14c=(testB.getStdTile(14).getCoord())[1];&#xD;
    //		&#xD;
    //		int c15r=(testB.getStdTile(15).getCoord())[0];&#xD;
    //		int c15c=(testB.getStdTile(15).getCoord())[1];&#xD;
    //		&#xD;
    //		int c16r=(testB.getStdTile(16).getCoord())[0];&#xD;
    //		int c16c=(testB.getStdTile(16).getCoord())[1];&#xD;
    //		&#xD;
    //		int c17r=(testB.getStdTile(17).getCoord())[0];&#xD;
    //		int c17c=(testB.getStdTile(17).getCoord())[1];&#xD;
    //		&#xD;
    //		int c18r=(testB.getStdTile(18).getCoord())[0];&#xD;
    //		int c18c=(testB.getStdTile(18).getCoord())[1];&#xD;
    //		&#xD;
    //		int c19r=(testB.getStdTile(19).getCoord())[0];&#xD;
    //		int c19c=(testB.getStdTile(19).getCoord())[1];&#xD;
    //		&#xD;
    //		int c20r=(testB.getStdTile(20).getCoord())[0];&#xD;
    //		int c20c=(testB.getStdTile(20).getCoord())[1];&#xD;
    //		&#xD;
    //		int c21r=(testB.getStdTile(21).getCoord())[0];&#xD;
    //		int c21c=(testB.getStdTile(21).getCoord())[1];&#xD;
    //		&#xD;
    //		int c22r=(testB.getStdTile(22).getCoord())[0];&#xD;
    //		int c22c=(testB.getStdTile(22).getCoord())[1];&#xD;
    //		&#xD;
    //		int c23r=(testB.getStdTile(23).getCoord())[0];&#xD;
    //		int c23c=(testB.getStdTile(23).getCoord())[1];&#xD;
    testB.rearrange();&#xD;
    double similarity = 0;&#xD;
    for (int i = 0; i &lt; 24; i++) {&#xD;
        if (((testB.getStdTile(i).getCoord())[0] == cr[i]) &amp;&amp; ((testB.getStdTile(i).getCoord())[1] == cc[i])) {&#xD;
            similarity += 1.0 / 24.0;&#xD;
        }&#xD;
    }&#xD;
    //should be true at most of time&#xD;
    assertTrue(&quot;After shuffling, the similarity for both board may &lt;= 0.33&quot;, (similarity &lt;= 0.33));&#xD;
//assertTrue(&quot;After shuffling, the new position of twilightHollow should be changed&quot;,(c00r!=(testB.getStdTile(0).getCoord())[0])||(c00c!=(testB.getStdTile(0).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of breakersBridge should be changed&quot;,(c01r!=(testB.getStdTile(1).getCoord())[0])||(c01c!=(testB.getStdTile(1).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of lostLagoon should be changed&quot;,(c02r!=(testB.getStdTile(2).getCoord())[0])||(c02c!=(testB.getStdTile(2).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of watchtower should be changed&quot;,(c03r!=(testB.getStdTile(3).getCoord())[0])||(c03c!=(testB.getStdTile(3).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of crimsonForest should be changed&quot;,(c04r!=(testB.getStdTile(4).getCoord())[0])||(c04c!=(testB.getStdTile(4).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of cliffsOfAbandon should be changed&quot;,(c05r!=(testB.getStdTile(5).getCoord())[0])||(c05c!=(testB.getStdTile(5).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of mistyMarsh should be changed&quot;,(c06r!=(testB.getStdTile(6).getCoord())[0])||(c06c!=(testB.getStdTile(6).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of phantomRock should be changed&quot;,(c07r!=(testB.getStdTile(7).getCoord())[0])||(c07c!=(testB.getStdTile(7).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of dunesOfDeception should be changed&quot;,(c08r!=(testB.getStdTile(8).getCoord())[0])||(c08c!=(testB.getStdTile(8).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of observatory should be changed&quot;,(c09r!=(testB.getStdTile(9).getCoord())[0])||(c09c!=(testB.getStdTile(9).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of caveOfShadows should be changed&quot;,(c10r!=(testB.getStdTile(10).getCoord())[0])||(c10c!=(testB.getStdTile(10).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of caveOfEmbers should be changed&quot;,(c11r!=(testB.getStdTile(11).getCoord())[0])||(c11c!=(testB.getStdTile(11).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of whisperingGarden should be changed&quot;,(c12r!=(testB.getStdTile(12).getCoord())[0])||(c12c!=(testB.getStdTile(12).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of howlingGarden should be changed&quot;,(c13r!=(testB.getStdTile(13).getCoord())[0])||(c13c!=(testB.getStdTile(13).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of tidalPalace should be changed&quot;,(c14r!=(testB.getStdTile(14).getCoord())[0])||(c14c!=(testB.getStdTile(14).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of coralPalace should be changed&quot;,(c15r!=(testB.getStdTile(15).getCoord())[0])||(c15c!=(testB.getStdTile(15).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of templeOfTheMoon should be changed&quot;,(c16r!=(testB.getStdTile(16).getCoord())[0])||(c16c!=(testB.getStdTile(16).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of templeOfTheSun should be changed&quot;,(c17r!=(testB.getStdTile(17).getCoord())[0])||(c17c!=(testB.getStdTile(17).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of foolsLanding should be changed&quot;,(c18r!=(testB.getStdTile(18).getCoord())[0])||(c18c!=(testB.getStdTile(18).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of goldGate should be changed&quot;,(c19r!=(testB.getStdTile(19).getCoord())[0])||(c19c!=(testB.getStdTile(19).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of ironGate should be changed&quot;,(c20r!=(testB.getStdTile(20).getCoord())[0])||(c20c!=(testB.getStdTile(20).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of silverGate should be changed&quot;,(c21r!=(testB.getStdTile(21).getCoord())[0])||(c21c!=(testB.getStdTile(21).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of bronzeGate should be changed&quot;,(c22r!=(testB.getStdTile(22).getCoord())[0])||(c22c!=(testB.getStdTile(22).getCoord())[1]));&#xD;
//assertTrue(&quot;After shuffling, the new position of copperGate should be changed&quot;,(c23r!=(testB.getStdTile(23).getCoord())[0])||(c23c!=(testB.getStdTile(23).getCoord())[1]));&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_votWsE7XEeuHa4bUOfM2xQ" name="setUp" visibility="public" method="_vot9wE7XEeuHa4bUOfM2xQ" raisedException="_vn8hsE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vouk0E7XEeuHa4bUOfM2xQ" name="testPlaceGetTreasure" visibility="public" method="_vouk0U7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vovL4E7XEeuHa4bUOfM2xQ" name="testRearrange" visibility="public" method="_vovL4U7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vozdUE7XEeuHa4bUOfM2xQ" name="PlayerTest" visibility="public">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_vo0EYE7XEeuHa4bUOfM2xQ" name="testB" visibility="private" type="_vYAoQE7XEeuHa4bUOfM2xQ" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_vo1SgE7XEeuHa4bUOfM2xQ" name="defaultValue">
              <language>JAVA</language>
              <body>new Board()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vo2goE7XEeuHa4bUOfM2xQ" name="testDiverEnd" specification="_vo1SgU7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    Diver testPlayerD = new Diver();&#xD;
    testB.getStdTile(1, 1).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(2, 0).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(2, 1).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(2, 2).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(3, 1).setStatus(Status.SUNK);&#xD;
    testPlayerD.setCurrStdTile(testB.getStdTile(2, 1));&#xD;
    assertEquals(&quot;Should find 5 nearest tiles&quot;, 5, testPlayerD.end(testB).size());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vo3uwU7XEeuHa4bUOfM2xQ" name="testEngineerShoreUp" specification="_vo3uwE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    Engineer testPlayerE = new Engineer();&#xD;
    testPlayerE.setAP(1);&#xD;
    testPlayerE.setCurrStdTile(testB.getStdTile(2, 1));&#xD;
    //SUNK test 1st&#xD;
    testB.getStdTile(2, 2).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(3, 1).setStatus(Status.FLOODED);&#xD;
    assertEquals(&quot;Once the asked shore up is relevant to a SUNK tile, shoreUp should NOT work&quot;, false, testPlayerE.shoreUp(testB, DirectionType.DOWN, DirectionType.RIGHT));&#xD;
    //FLOODED TEST 2RD&#xD;
    testB.getStdTile(2, 2).setStatus(Status.FLOODED);&#xD;
    //call again&#xD;
    testPlayerE.shoreUp(testB, DirectionType.DOWN, DirectionType.RIGHT);&#xD;
    assertEquals(&quot;FLOODED copperGate should return NORMAL&quot;, Status.NORMAL, testB.getStdTile(2, 2).getStatus());&#xD;
    assertEquals(&quot;FLOODED dunesOfDeception should return NORMAL&quot;, Status.NORMAL, testB.getStdTile(3, 1).getStatus());&#xD;
    assertEquals(&quot;AP should run out&quot;, 0, testPlayerE.getAP());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vo484E7XEeuHa4bUOfM2xQ" name="testMessengerPassCard" specification="_vo3uwk7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    Messenger testPlayerM = new Messenger();&#xD;
    Navigator testPlayerN = new Navigator();&#xD;
    testPlayerM.setAP(1);&#xD;
    testPlayerM.setCurrStdTile(testB.getStdTile(2, 1));&#xD;
    testPlayerN.setCurrStdTile(testB.getStdTile(2, 2));&#xD;
    //ArrayList&lt;TreasureCard> testCards=new ArrayList&lt;TreasureCard>();&#xD;
    FireCard fireTest = new FireCard();&#xD;
    ChaliceCard chaliceTest = new ChaliceCard();&#xD;
    Sandbags sandbagsTest = new Sandbags();&#xD;
    testPlayerM.addTreasureCard(fireTest);&#xD;
    testPlayerM.addTreasureCard(chaliceTest);&#xD;
    testPlayerM.addTreasureCard(sandbagsTest);&#xD;
    testPlayerM.passCard(testPlayerN, 1);&#xD;
    assertTrue(&quot;testPlayerN should get ChaliceCard&quot;, testPlayerN.getCards().get(0) instanceof ChaliceCard);&#xD;
    assertEquals(&quot;The size of Messenger's cards should be 2&quot;, 2, testPlayerM.getCards().size());&#xD;
    assertEquals(&quot;AP should run out&quot;, 0, testPlayerM.getAP());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vo6LAU7XEeuHa4bUOfM2xQ" name="testExplorerSink" specification="_vo6LAE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    Explorer testPlayerE = new Explorer();&#xD;
    testB.getStdTile(1, 1).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(2, 0).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(2, 1).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(2, 2).setStatus(Status.SUNK);&#xD;
    testB.getStdTile(3, 1).setStatus(Status.SUNK);&#xD;
    testPlayerE.setCurrStdTile(testB.getStdTile(2, 1));&#xD;
    assertEquals(&quot;Should find 3 nearest tiles&quot;, 3, testPlayerE.sink(testB).size());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vo8AME7XEeuHa4bUOfM2xQ" name="testCaptureTreasure" specification="_vo7ZIE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //test 3 same treasure cards to capture treasure, should fail&#xD;
    //test 5 same treasure cards to capture treasure, should success by costing 4&#xD;
    Navigator testPlayerN1 = new Navigator();&#xD;
    Navigator testPlayerN2 = new Navigator();&#xD;
    Cave testCave = new Cave(&quot;testCave&quot;);&#xD;
    testPlayerN1.setAP(1);&#xD;
    testPlayerN2.setAP(1);&#xD;
    for (int i = 0; i &lt; 3; i++) {&#xD;
        //assign 3 Firecards to testPlayer1&#xD;
        testPlayerN1.addTreasureCard(new FireCard());&#xD;
    }&#xD;
    testPlayerN1.setCurrStdTile(testCave);&#xD;
    //Set testPlayers at caveOfShadows&#xD;
    testPlayerN2.setCurrStdTile(testCave);&#xD;
    Fire COF = new Fire();&#xD;
    //Set Crystal of Fire treasure&#xD;
    Cave.setTreasure(COF);&#xD;
    assertNotNull(&quot;should has treasure&quot;, Cave.getFire());&#xD;
    TreasureDeck testTused = new TreasureDeck();&#xD;
    assertFalse(&quot;3 cards to capture is not enough&quot;, testPlayerN1.captureTreasure(testTused));&#xD;
    for (int i = 0; i &lt; 5; i++) {&#xD;
        //assign 5 Firecards to testPlayer2&#xD;
        testPlayerN2.addTreasureCard(new FireCard());&#xD;
    }&#xD;
    assertNotNull(&quot;should has treasure&quot;, Cave.getFire());&#xD;
    assertTrue(&quot;5 cards should be enough to capture&quot;, testPlayerN2.captureTreasure(testTused));&#xD;
    assertEquals(&quot;After capture the player remain 1 treasure card&quot;, 1, testPlayerN2.getCards().size());&#xD;
    assertEquals(&quot;Should get treasure: Crystal of Fire&quot;, COF, testPlayerN2.getTreasures().get(0));&#xD;
    assertEquals(&quot;AP should run out&quot;, 0, testPlayerN2.getAP());&#xD;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vo91YE7XEeuHa4bUOfM2xQ" name="resetIfGet" specification="_vo9OUE7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    //Reset Cave static ifGet&#xD;
    Cave.setIfGet(false);&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vo1SgU7XEeuHa4bUOfM2xQ" name="testDiverEnd" visibility="public" method="_vo2goE7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vo3uwE7XEeuHa4bUOfM2xQ" name="testEngineerShoreUp" visibility="public" method="_vo3uwU7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vo3uwk7XEeuHa4bUOfM2xQ" name="testMessengerPassCard" visibility="public" method="_vo484E7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vo6LAE7XEeuHa4bUOfM2xQ" name="testExplorerSink" visibility="public" method="_vo6LAU7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vo7ZIE7XEeuHa4bUOfM2xQ" name="testCaptureTreasure" visibility="public" method="_vo8AME7XEeuHa4bUOfM2xQ"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vo9OUE7XEeuHa4bUOfM2xQ" name="resetIfGet" visibility="public" method="_vo91YE7XEeuHa4bUOfM2xQ" raisedException="_vn8hsE7XEeuHa4bUOfM2xQ"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_vpARoE7XEeuHa4bUOfM2xQ" name="TestRunner" visibility="public">
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vpD8AE7XEeuHa4bUOfM2xQ" name="main" specification="_vpCG0E7XEeuHa4bUOfM2xQ">
            <language>JAVA</language>
            <body>&#xD;
    System.err.println(&quot;Please wait for the test result!&quot;);&#xD;
    Result result = JUnitCore.runClasses(AllTest.class);&#xD;
    for (Failure failure : result.getFailures()) {&#xD;
        System.out.println(failure.toString());&#xD;
    }&#xD;
    System.err.println(&quot;Test result is successful: &quot; + result.wasSuccessful());&#xD;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_vpCG0E7XEeuHa4bUOfM2xQ" name="main" visibility="public" isStatic="true" method="_vpD8AE7XEeuHa4bUOfM2xQ">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vpCt4E7XEeuHa4bUOfM2xQ" name="args" type="_eKOjE07WEeuHa4bUOfM2xQ">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vpDU8E7XEeuHa4bUOfM2xQ"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vpDU8U7XEeuHa4bUOfM2xQ" value="*"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_G-E2cE7fEeuHa4bUOfM2xQ" name="Main" visibility="public">
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_G-GEk07fEeuHa4bUOfM2xQ" name="main" specification="_G-FdgE7fEeuHa4bUOfM2xQ">
          <language>JAVA</language>
          <body>&#xD;
    for (String i : args) {&#xD;
        if (i.equalsIgnoreCase(&quot;cheat&quot;)) {&#xD;
            System.out.println(&quot;cheat!!&quot;);&#xD;
            Options.ifCheat = true;&#xD;
        } else if (i.equalsIgnoreCase(&quot;mod&quot;)) {&#xD;
            System.out.println(&quot;mod!!&quot;);&#xD;
            Options.mod();&#xD;
        } else if (i.equalsIgnoreCase(&quot;real&quot;)) {&#xD;
            System.out.println(&quot;real!!&quot;);&#xD;
            Options.real();&#xD;
        } else if (i.equalsIgnoreCase(&quot;realdiv&quot;)) {&#xD;
            System.out.println(&quot;realdiv!!&quot;);&#xD;
            Options.ifDiverAllowedStopAtSunkTile = false;&#xD;
        } else if (i.equalsIgnoreCase(&quot;realnav&quot;)) {&#xD;
            System.out.println(&quot;realnav!!&quot;);&#xD;
            Options.ifNavigatorHasOwnAbility = true;&#xD;
        } else if (i.equalsIgnoreCase(&quot;realcopter&quot;)) {&#xD;
            System.out.println(&quot;realcopter!!&quot;);&#xD;
            Options.ifHelicopterLiftPlayerShouldAtTheSameTile = true;&#xD;
        } else if (i.equalsIgnoreCase(&quot;debug&quot;)) {&#xD;
            System.out.println(&quot;debug!!&quot;);&#xD;
            Options.ifDebug = true;&#xD;
        }&#xD;
    }&#xD;
    MyGameManager facade = new MyGameManager();&#xD;
    facade.init();&#xD;
    while (true) {&#xD;
        try {&#xD;
            //turns begins&#xD;
            facade.begin();&#xD;
            //during turns&#xD;
            facade.takeAction();&#xD;
            //turns ends&#xD;
            facade.end();&#xD;
        } catch (IOException e) {&#xD;
            e.printStackTrace();&#xD;
        }&#xD;
    //during this turn&#xD;
    }&#xD;
</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_G-FdgE7fEeuHa4bUOfM2xQ" name="main" visibility="public" isStatic="true" method="_G-GEk07fEeuHa4bUOfM2xQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_G-GEkE7fEeuHa4bUOfM2xQ" name="args" type="_eKOjE07WEeuHa4bUOfM2xQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_G-GEkU7fEeuHa4bUOfM2xQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_G-GEkk7fEeuHa4bUOfM2xQ" value="*"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_eKOjEE7WEeuHa4bUOfM2xQ" name="java">
      <packagedElement xmi:type="uml:Package" xmi:id="_eKOjEU7WEeuHa4bUOfM2xQ" name="java">
        <packagedElement xmi:type="uml:Package" xmi:id="_eKOjEk7WEeuHa4bUOfM2xQ" name="lang">
          <packagedElement xmi:type="uml:Class" xmi:id="_eKOjE07WEeuHa4bUOfM2xQ" name="String"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_vn8hsE7XEeuHa4bUOfM2xQ" name="Exception"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_gb5qwU7WEeuHa4bUOfM2xQ" name="util">
          <packagedElement xmi:type="uml:Class" xmi:id="_gb5qwk7WEeuHa4bUOfM2xQ" name="HashSet"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_vdj2oE7XEeuHa4bUOfM2xQ" name="Stack"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_vgAGoE7XEeuHa4bUOfM2xQ" name="ArrayList"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_vicWoE7XEeuHa4bUOfM2xQ" name="HashMap"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_vgsqME7XEeuHa4bUOfM2xQ" name="io">
          <packagedElement xmi:type="uml:Interface" xmi:id="_vgtRQE7XEeuHa4bUOfM2xQ" name="IOException"/>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_gZ2cUU7WEeuHa4bUOfM2xQ" name="importedTypes">
      <packagedElement xmi:type="uml:Package" xmi:id="_gZ3DYE7WEeuHa4bUOfM2xQ" name="board">
        <packagedElement xmi:type="uml:Package" xmi:id="_gZ3DYU7WEeuHa4bUOfM2xQ" name="tile">
          <packagedElement xmi:type="uml:Class" xmi:id="_gZ3DYk7WEeuHa4bUOfM2xQ" name="NullTile"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_gZ774E7WEeuHa4bUOfM2xQ" name="StdTile"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_gac5QE7WEeuHa4bUOfM2xQ" name="Palace"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_gak1EE7WEeuHa4bUOfM2xQ" name="Cave"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_gatX8E7WEeuHa4bUOfM2xQ" name="Temple"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_ga1TwE7WEeuHa4bUOfM2xQ" name="Garden"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_gbEkUE7WEeuHa4bUOfM2xQ" name="FoolsLanding"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_gbL5EE7WEeuHa4bUOfM2xQ" name="Gate"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_gbaikE7WEeuHa4bUOfM2xQ" name="Tile"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_gbh3UE7WEeuHa4bUOfM2xQ" name="role">
        <packagedElement xmi:type="uml:Class" xmi:id="_gbieYE7WEeuHa4bUOfM2xQ" name="StdRole"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_gb9VIE7WEeuHa4bUOfM2xQ" name="DirectionType"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_vPc-oE7WEeuHa4bUOfM2xQ" name="treasure">
        <packagedElement xmi:type="uml:Class" xmi:id="_vPc-oU7WEeuHa4bUOfM2xQ" name="Treasure"/>
      </packagedElement>
    </packagedElement>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_eKKRoE7WEeuHa4bUOfM2xQ">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_eKKRoU7WEeuHa4bUOfM2xQ" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/PapyrusJava/1#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://PapyrusJava_PROFILES/PapyrusJava.profile.uml#_j9REUByGEduN1bTiWJ0lyw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_eKK4sE7WEeuHa4bUOfM2xQ">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_eKK4sU7WEeuHa4bUOfM2xQ" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/Codegen/1#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://Codegen_PROFILES/Codegen.profile.uml#_fPDsIBa-EearhdjjJ6cVzQ"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_eKLfwE7WEeuHa4bUOfM2xQ">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_eKLfwU7WEeuHa4bUOfM2xQ" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
    </profileApplication>
  </uml:Model>
  <PapyrusJava:External xmi:id="_eKRmYE7WEeuHa4bUOfM2xQ" name="java.lang.String" base_Classifier="_eKOjE07WEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_gZ5foE7WEeuHa4bUOfM2xQ" name="board.tile.NullTile" base_Classifier="_gZ3DYk7WEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_gZ-_ME7WEeuHa4bUOfM2xQ" name="board.tile.StdTile" base_Classifier="_gZ774E7WEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_gaeHYE7WEeuHa4bUOfM2xQ" name="board.tile.Palace" base_Classifier="_gac5QE7WEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_ganRUE7WEeuHa4bUOfM2xQ" name="board.tile.Cave" base_Classifier="_gak1EE7WEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_gavNIE7WEeuHa4bUOfM2xQ" name="board.tile.Temple" base_Classifier="_gatX8E7WEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_ga3I8E7WEeuHa4bUOfM2xQ" name="board.tile.Garden" base_Classifier="_ga1TwE7WEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_gbHAkE7WEeuHa4bUOfM2xQ" name="board.tile.FoolsLanding" base_Classifier="_gbEkUE7WEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_gbOVUE7WEeuHa4bUOfM2xQ" name="board.tile.Gate" base_Classifier="_gbL5EE7WEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_gbdl4E7WEeuHa4bUOfM2xQ" name="board.tile.Tile" base_Classifier="_gbaikE7WEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_gbk6oE7WEeuHa4bUOfM2xQ" name="role.StdRole" base_Classifier="_gbieYE7WEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_gb7f8E7WEeuHa4bUOfM2xQ" name="java.util.HashSet" base_Classifier="_gb5qwk7WEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_gb_KUE7WEeuHa4bUOfM2xQ" name="role.DirectionType" base_Classifier="_gb9VIE7WEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_vPbwgE7WEeuHa4bUOfM2xQ" name="TreasureTile" base_Classifier="_vPZUQU7WEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_vPez0E7WEeuHa4bUOfM2xQ" name="treasure.Treasure" base_Classifier="_vPc-oU7WEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vY2VwE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vY0gkE7XEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_vZaWcE7XEeuHa4bUOfM2xQ" name="StringBuilder" base_Classifier="_vZYhQE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vZkHcE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vZi5UE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vZ3pcE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vZ10QE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vaG6AE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vaFr4E7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_van3YE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vampQE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vat-AE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_varhwE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vb0KME7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vbxt8E7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vcLWkE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vcJhYE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vcPoAE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vcNy0E7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vcb1QE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vcaAEE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vc020E7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vczBoU7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vdPtkE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vdN4YE7XEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_vdlr0E7XEeuHa4bUOfM2xQ" name="java.util.Stack" base_Classifier="_vdj2oE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vdp9QE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vdoIEE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vd3_sE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vd2xkE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_veUEkE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_veS2cE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vefqwE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_veecoE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vemYcE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vekjQE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_veu7UE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vesfEE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_ve23IE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_ve0a4E7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_ve-y8E7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_ve89wE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vfMOUE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vfKZIE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vfa30E7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vfZpsE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vfko0E7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vfjasE7XEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_vgCi4E7XEeuHa4bUOfM2xQ" name="java.util.ArrayList" base_Classifier="_vgAGoE7XEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_vgvtgE7XEeuHa4bUOfM2xQ" name="java.io.IOException" base_Classifier="_vgtRQE7XEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_viey4E7XEeuHa4bUOfM2xQ" name="java.util.HashMap" base_Classifier="_vicWoE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vijrYE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_viidQE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vkng4E7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vkmSwE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vk-GME7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vk7p8E7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vlJsYE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vlH3ME7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vllxQE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vlj8EE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vmqIQE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vmoTEE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vm9DME7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vm71EE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vnWr0E7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vnU2oE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vngc0E7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vnfOsE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vnt4ME7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vnsDAE7XEeuHa4bUOfM2xQ"/>
  <PapyrusJava:External xmi:id="_vn9v0E7XEeuHa4bUOfM2xQ" name="java.lang.Exception" base_Classifier="_vn8hsE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vpKCoE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vpINcE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vpPiME7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vpOUEU7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vpbIYE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vpZ6QE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vuyJgE7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vuvGME7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vu43ME7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vu3CAE7XEeuHa4bUOfM2xQ"/>
  <standard:Create xmi:id="_vvAL8E7XEeuHa4bUOfM2xQ" base_BehavioralFeature="_vu-WwE7XEeuHa4bUOfM2xQ"/>
</xmi:XMI>
